syntax = "proto3";
package imuachain.avs.v1;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "imuachain/avs/v1/tx.proto";

option go_package = "github.com/imua-xyz/imuachain/x/avs/types";

// QueryAVSInfoReq is the request to query avs related information
message QueryAVSInfoReq {
  // avs_address is the address of avs
  string avs_address = 1 [(gogoproto.customname) = "AVSAddress"];
}

// QueryAVSInfoResponse is the response of avs related information
message QueryAVSInfoResponse {
  // basic information of avs
  AVSInfo info = 1;
}

// QueryAVSAddressByChainIDReq is the request to query avs address by chain id
message QueryAVSAddressByChainIDReq {
  // chain is the chain id of the chain, with or without the version suffix.
  string chain = 1;
}

// QueryAVSAddressByChainIDResponse is the response of avs address by chain id
message QueryAVSAddressByChainIDResponse {
  // avs_address is the hex address of avs
  string avs_address = 1 [(gogoproto.customname) = "AVSAddress"];
}

// QueryAVSTaskInfoReq is the request to obtain the task information.
message QueryAVSTaskInfoReq {
  // task_address is the task contract address,its type should be a sdk.AccAddress
  string task_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // task_id is the task identifier
  string task_id = 2;
}

// QuerySubmitTaskResultReq is the request to obtain the task information.
message QuerySubmitTaskResultReq {
  // task_address is the task contract address,its type should be a sdk.AccAddress
  string task_address = 1 [(gogoproto.customname) = "TaskAddress"];
  // task_id is the task identifier
  string task_id = 2;
  // operator_address is the operator address,its type should be a sdk.AccAddress
  string operator_address = 3 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QueryChallengeInfoReq is the request to obtain the task information.
message QueryChallengeInfoReq {
  // task_address is the task contract address,its type should be a sdk.AccAddress
  string task_address = 1 [(gogoproto.customname) = "TaskAddress"];
  // task_id is the task identifier
  string task_id = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QuerySubmitTaskResultResponse is the response of avs related information
message QuerySubmitTaskResultResponse {
  // info is the taskResult.
  TaskResultInfo info = 1;
}

// QueryChallengeInfoResponse is the response of avs related information
message QueryChallengeInfoResponse {
  // challenge_address is the challenge address,its type should be a common.HexAddress.
  string challenge_address = 1;
}

// Query defines the gRPC querier service.
service Query {
  // Query avs info by avs address
  rpc QueryAVSInfo(QueryAVSInfoReq) returns (QueryAVSInfoResponse) {
    option (google.api.http).get = "/imuachain/avs/v1/avs_info";
  }
  // Query the task info by task address and task id.
  rpc QueryAVSTaskInfo(QueryAVSTaskInfoReq) returns (TaskInfo) {
    option (google.api.http).get = "/imuachain/avs/v1/avs_task_info/{task_address}/{task_id}";
  }
  // QueryAVSAddressByChainID queries the avs address by chain id
  rpc QueryAVSAddressByChainID(QueryAVSAddressByChainIDReq) returns (QueryAVSAddressByChainIDResponse) {
    option (google.api.http).get = "/imuachain/avs/v1/avs_address/{chain}";
  }
  // Submit task result for the specified task and operator
  rpc QuerySubmitTaskResult(QuerySubmitTaskResultReq) returns (QuerySubmitTaskResultResponse) {
    option (google.api.http).get = "/imuachain/avs/v1/submit_task_result/{task_address}/{task_id}/{operator_address}";
  }
  // Query the challenge info by task address and task id
  rpc QueryChallengeInfo(QueryChallengeInfoReq) returns (QueryChallengeInfoResponse) {
    option (google.api.http).get = "/imuachain/avs/v1/challenge_info/{task_address}/{task_id}";
  }
}
