syntax = "proto3";
package exocore.operator.v1;

import "amino/amino.proto";

import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/query/v1/query.proto";
import "cosmos_proto/cosmos.proto";

import "exocore/operator/v1/tx.proto";
import "exocore/operator/v1/validator.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

import "tendermint/crypto/keys.proto";

option go_package = "github.com/ExocoreNetwork/exocore/x/operator/types";

// QueryOperatorInfoReq is the request to obtain the operator information.
message GetOperatorInfoReq {
  // operator_addr is the operator address,its type should be a sdk.AccAddress
  string operator_addr = 1
  [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QueryAllOperatorsRequest is the request to obtain all operators.
message QueryAllOperatorsRequest {
  // pagination related options.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryAllOperatorsResponse is the response containing all operator account addresses.
message QueryAllOperatorsResponse {
  // operators is a list of all operators.
  repeated string operator_acc_addrs = 1;
  // pagination related response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// OperatorAVSAddress includes the address of operator and AVS
message OperatorAVSAddress {
  // operator_addr should be the string type of sdk.AccAddress
  string operator_addr = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // avs_address is the address of the AVS - either an 0x address or a chainID.
  string avs_address = 2;
}

// QueryOperatorUSDValueRequest is the request to obtain the USD value for operator.
message QueryOperatorUSDValueRequest {
  // operator_and_avs is the operator and AVS address
  OperatorAVSAddress operator_and_avs = 1 [(gogoproto.embed) = true];
}

// QueryOperatorUSDValueResponse is the response to obtain the USD value for operator.
message QueryOperatorUSDValueResponse {
  // usd_info includes the self and total staking for the operator and AVS
  OperatorOptedUSDValue usd_values = 1
  [(gogoproto.customname) = "USDValues"];
}

// QueryAVSUSDValueRequest is the request to obtain the USD value for AVS.
message QueryAVSUSDValueRequest {
  // avs_address is the AVS address opted-in by the operator
  string avs_address = 1
  [(gogoproto.customname) = "AVSAddress"];
}

// QueryOperatorSlashInfoRequest is the request to obtain the slash information for the specified
// operator and AVS
message QueryOperatorSlashInfoRequest {
  // operator_and_avs is the operator and AVS address
  OperatorAVSAddress operator_and_avs = 1 [(gogoproto.embed) = true];
  // pagination related options.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// OperatorSlashInfoByID includes the slash information and the slashID
message OperatorSlashInfoByID {
  // slash_id is stored as the key of the slash information,
  // so it will be parsed and padding here.
  string slash_id = 1 [(gogoproto.customname) = "SlashID"];
  // info is the specified detailed information for the slashing event.
  OperatorSlashInfo info = 2;
}

// QueryOperatorSlashInfoResponse is the response for GetOperatorSlashInfoRequest
message QueryOperatorSlashInfoResponse {
  // all_slash_info is a list of the slash information for the specified operator and AVS
  repeated OperatorSlashInfoByID all_slash_info = 1;
  // pagination related response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryOperatorConsKeyRequest is the request to obtain the consensus public key of the operator
message QueryOperatorConsKeyRequest {
  // operator_acc_addr is the operator account address.
  string operator_acc_addr = 1;
  // chain is the id of the chain served by the operator. here chain_id is not used since the
  // Linter complains about capitalization, which can be set with a gogoproto.custom_name but
  // that is not compatible with google.api.http.get in the Query service below.
  string chain = 2;
}

// QueryOperatorConsKeyResponse is the response for QueryOperatorConsKeyRequest.
message QueryOperatorConsKeyResponse {
  // public_key is the consensus public key of the operator.
  tendermint.crypto.PublicKey public_key = 1 [(gogoproto.nullable) = false];
  // opting_out is a flag to indicate if the operator is opting out of consensus.
  bool opting_out = 2;
}

// QueryOperatorConsAddressRequest is the request to obtain the consensus address of the operator
// for a specific chain ID.
message QueryOperatorConsAddressRequest {
  // operator_acc_addr is the operator account address.
  string operator_acc_addr = 1;
  // chain is the id of the chain served by the operator. here chain_id is not used since the
  // Linter complains about capitalization, which can be set with a gogoproto.custom_name but
  // that is not compatible with google.api.http.get in the Query service below.
  string chain = 2;
}

// QueryOperatorConsAddressResponse is the response for QueryOperatorConsAddressRequest.
message QueryOperatorConsAddressResponse {
  // cons_addr is the consensus address corresponding to the consensus public key
  // currently in use by the operator.
  string cons_addr = 1;
  // opting_out is a flag to indicate if the operator is opting out of consensus.
  bool opting_out = 2;
}

// QueryAllOperatorConsKeysByChainIDRequest is the request to obtain all operator addresses
// and consensus keys for a specific chain ID, with pagination.
message QueryAllOperatorConsKeysByChainIDRequest {
  // chain for which the cons keys are being queried. here chain_id is not used since the
  // Linter complains about capitalization, which can be set with a gogoproto.custom_name but
  // that is not compatible with google.api.http.get in the Query service below.
  string chain = 1;
  // pagination related options.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryAllOperatorConsKeysByChainIDResponse is the response that includes a list of all operators
// and their consensus keys for a specified chain ID.
message QueryAllOperatorConsKeysByChainIDResponse {
  // operator_cons_keys is a list of operator addresses and their consensus public keys.
  repeated OperatorConsKeyPair operator_cons_keys = 1;
  // pagination related response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// OperatorConsKeyPair holds the operator address and the consensus public key currently in
// use by the operator.
message OperatorConsKeyPair {
  // operator_acc_addr is the operator account address.
  string operator_acc_addr = 1;
  // public_key is the consensus public key of the operator.
  tendermint.crypto.PublicKey public_key = 2;
  // opting_out is a flag to indicate if the operator is opting out of consensus.
  bool opting_out = 3;
}

// QueryAllOperatorConsAddrsByChainIDRequest is the request to obtain all operator addresses
// and consensus addresses for a specific chain ID, with pagination.
message QueryAllOperatorConsAddrsByChainIDRequest {
  // chain for which the cons addrs are being queried. here chain_id is not used since the
  // Linter complains about capitalization, which can be set with a gogoproto.custom_name but
  // that is not compatible with google.api.http.get in the Query service below.
  string chain = 1;
  // pagination related options.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryAllOperatorConsAddrsByChainIDResponse is the response that includes a list of all operators
// and their consensus addresses for a specified chain ID.
message QueryAllOperatorConsAddrsByChainIDResponse {
  // operator_cons_addrs is a list of operator account addresses and the consensus addresses.
  repeated OperatorConsAddrPair operator_cons_addrs = 1;
  // pagination related response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// OperatorConsAddrPair holds the operator address and the corresponding consensus address.
message OperatorConsAddrPair {
  // operator_acc_addr is the operator account address.
  string operator_acc_addr = 1;
  // cons_addr is the consensus address corresponding to the consensus public key
  // currently in use by the operator.
  string cons_addr = 2;
  // opting_out is a flag to indicate if the operator is opting out of consensus.
  bool opting_out = 3;
}

// QueryAllOperatorsWithOptInAVSRequest is the request to obtain all opt-in operator addresses
//  for a specific avs with pagination.
message QueryAllOperatorsByOptInAVSRequest {
  // avs address
  string avs = 1;
}

// QueryAllOperatorsWithOptInAVSResponse is the response that includes a list of all avs
//   for a specified operator address.
message QueryAllOperatorsByOptInAVSResponse {
  // operator_list is a list of operator addresses.
  repeated string operator_list = 1;
}

// QueryAllAVSsByOperatorRequest is the request to obtain all operator addresses
// and consensus keys for a specific chain ID, with pagination.
message QueryAllAVSsByOperatorRequest {
  // operator address.
  string operator = 1;
}

// QueryAllAVSsByOperatorResponse is the response that includes a list of all operators
// and their consensus keys for a specified chain ID.
message QueryAllAVSsByOperatorResponse {
  // avs_list is a list of avs addresses  .
  repeated string avs_list = 1;
}

// QueryOptInfoRequest is the request to obtain the opted information of specified operator
// and AVS
message QueryOptInfoRequest {
  // operator_and_avs is the operator and AVS address
  OperatorAVSAddress operator_and_avs = 1 [(gogoproto.embed) = true];
}

// QuerySnapshotHelperRequest is the request to obtain the voting power snapshot
// helper information.
message QuerySnapshotHelperRequest {
  // avs address
  string avs = 1;
}

// QuerySpecifiedSnapshotRequest is the request to obtain the voting power snapshot
// at the specified height.
message QuerySpecifiedSnapshotRequest {
  // avs address
  string avs = 1;
  // height is used to specify the snapshot height you want to query.
  int64 height = 2;
}

// VotingPowerSnapshotKeyHeight is used in the response of QuerySpecifiedSnapshot
// and QueryAllSnapshot
message VotingPowerSnapshotKeyHeight {
  // snapshot_key_height when it is used in QuerySpecifiedSnapshot, it's the latest
  // height with a snapshot key found based on the input height; this height is typically
  // the start height of the epoch in which the input height is located.
  // when it is used in QueryAllSnapshot, it's the height in the current snapshot key.
  int64 snapshot_key_height =1;
  // snapshot when it is used in QuerySpecifiedSnapshot, it is the final retrieved information
  // containing the voting power set.
  // when it is used in QueryAllSnapshot, It is the snapshot stored under `snapshot_key_height`,
  // and its voting power set may be nil.
  VotingPowerSnapshot snapshot = 2;
}

// QueryAllSnapshotRequest is the request to obtain all voting power snapshot
// for the specified AVS
message QueryAllSnapshotRequest {
  // avs address
  string avs = 1;
  // pagination related options.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryAllSnapshotResponse is the response to obtain all voting power snapshot
// for the specified AVS
message QueryAllSnapshotResponse {
  // snapshots is a list of all snapshots for the specified AVS.
  repeated VotingPowerSnapshotKeyHeight snapshots = 1;
  // pagination related response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// Query defines the gRPC querier service.
service Query {
  // QueryOperatorInfo queries the operator information.
  rpc QueryOperatorInfo(GetOperatorInfoReq) returns (OperatorInfo) {
    option (google.api.http).get = "/exocore/operator/v1/operator_info/{operator_addr}";
  }

  // QueryAllOperators queries all operators.
  rpc QueryAllOperators(QueryAllOperatorsRequest) returns (QueryAllOperatorsResponse) {
    option (google.api.http) = {
      get: "/exocore/operator/v1/all_operators"
    };
  }

  // QueryOperatorConsKeyForChainID queries the consensus public key for the operator
  rpc QueryOperatorConsKeyForChainID(QueryOperatorConsKeyRequest) returns (QueryOperatorConsKeyResponse) {
    option (google.api.http) = {
      get: "/exocore/operator/v1/operator_cons_key/{operator_acc_addr}/{chain}"
    };
  }

  // QueryOperatorConsAddressForChainID queries the consensus address for the operator.
  rpc QueryOperatorConsAddressForChainID(QueryOperatorConsAddressRequest) returns (QueryOperatorConsAddressResponse) {
    option (google.api.http) = {
      get: "/exocore/operator/v1/operator_cons_addr/{operator_acc_addr}/{chain}"
    };
  }

  // QueryAllOperatorConsKeysByChainID queries all operators and their consensus public keys
  // for a specific chain ID
  rpc QueryAllOperatorConsKeysByChainID(QueryAllOperatorConsKeysByChainIDRequest)
      returns (QueryAllOperatorConsKeysByChainIDResponse) {
    option (google.api.http) = {
      get: "/exocore/operator/v1/all_operator_cons_keys/{chain}"
    };
  }

  // QueryOperatorUSDValue queries the opted-in USD value for the operator
  rpc QueryOperatorUSDValue(QueryOperatorUSDValueRequest) returns(QueryOperatorUSDValueResponse){
    option (google.api.http).get =
    "/exocore/operator/v1/operator_usd_value/{operator_and_avs.operator_addr}/"
        "{operator_and_avs.avs_address}";
  }

  // QueryAVSUSDValue queries the USD value for the AVS
  rpc QueryAVSUSDValue(QueryAVSUSDValueRequest) returns(DecValueField){
    option (google.api.http).get = "/exocore/operator/v1/avs_usd_value";
  }

  // QueryOperatorSlashInfo queries the slash information for the specified operator and AVS
  rpc QueryOperatorSlashInfo(QueryOperatorSlashInfoRequest) returns(QueryOperatorSlashInfoResponse){
    option (google.api.http).get =
    "/exocore/operator/v1/operator_slash_info/{operator_and_avs.operator_addr}/"
        "{operator_and_avs.avs_address}";
  }

  // QueryAllOperatorConsAddrsByChainID queries all operators and their consensus addresses
  // for a specific chain ID
  rpc QueryAllOperatorConsAddrsByChainID(QueryAllOperatorConsAddrsByChainIDRequest)
      returns (QueryAllOperatorConsAddrsByChainIDResponse) {
    option (google.api.http) = {
      get: "/exocore/operator/v1/all_operator_cons_addrs/{chain}"
    };
  }

  // QueryAllOperatorsWithOptInAVS queries  operator list by avs.
  rpc QueryAllOperatorsWithOptInAVS(QueryAllOperatorsByOptInAVSRequest) returns (
      QueryAllOperatorsByOptInAVSResponse) {
    option (google.api.http) = {
      get: "/exocore/operator/v1/opt/operator_list/{avs}"
    };
  }

  // QueryAllAVSsByOperator queries avs list.
  rpc QueryAllAVSsByOperator(QueryAllAVSsByOperatorRequest) returns (QueryAllAVSsByOperatorResponse) {
    option (google.api.http) = {
      get: "/exocore/operator/v1/opt/avs_list/{operator}"
    };
  }

  // QueryOptInfo queries specified opted information.
  rpc QueryOptInfo(QueryOptInfoRequest) returns (OptedInfo) {
    option (google.api.http) = {
      get: "/exocore/operator/v1/opt_info/{operator_and_avs.operator_addr}/{operator_and_avs.avs_address}"
    };
  }

  // QuerySnapshotHelper queries the snapshot helper of the AVS
  rpc QuerySnapshotHelper(QuerySnapshotHelperRequest) returns (SnapshotHelper) {
    option (google.api.http).get = "/exocore/operator/v1/snapshot_helper/{avs}";
  }

  // QuerySpecifiedSnapshot queries the voting power snapshot of specified AVS and height
  rpc QuerySpecifiedSnapshot(QuerySpecifiedSnapshotRequest) returns (VotingPowerSnapshotKeyHeight) {
    option (google.api.http).get = "/exocore/operator/v1/snapshot/{avs}/{height}";
  }

  // QueryAllSnapshot queries all voting power snapshot for the specified AVS
  rpc QueryAllSnapshot(QueryAllSnapshotRequest) returns (QueryAllSnapshotResponse) {
    option (google.api.http).get = "/exocore/operator/v1/all_snapshot/{avs}";
  }

  // Validators queries all validators that match the given status.
  // When called from another module, this query might consume a high amount of
  // gas if the pagination field is incorrectly set.
  rpc Validators(QueryValidatorsRequest) returns (QueryValidatorsResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/exocore/operator/v1/validators/{chain}";
  }

  // Validator queries validator info for given validator address.
  rpc Validator(QueryValidatorRequest) returns (QueryValidatorResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/exocore/operator/v1/validator/{validator_acc_addr}/{chain}";
  }
}
// QueryValidatorsRequest is request type for Query/Validators RPC method.
message QueryValidatorsRequest {
  // chain is the id of the chain served by the operator. here chain_id is not used since the
  // Linter complains about capitalization, which can be set with a gogoproto.custom_name but
  // that is not compatible with google.api.http.get in the Query service below.
  string chain = 1;
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}
// QueryValidatorsResponse is response type for the Query/Validators RPC method
message QueryValidatorsResponse {
  // validators contains all the queried validators.
  repeated Validator validators = 1
      [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryValidatorRequest is response type for the Query/Validator RPC method
message QueryValidatorRequest {
  // validator_acc_addr defines the validator address to query for.
  string validator_acc_addr = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // chain is the id of the chain served by the operator. here chain_id is not used since the
  // Linter complains about capitalization, which can be set with a gogoproto.custom_name but
  // that is not compatible with google.api.http.get in the Query service below.
  string chain = 2;
}

// QueryValidatorResponse is response type for the Query/Validator RPC method
message QueryValidatorResponse {
  // validator defines the validator info.
  Validator validator = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}
