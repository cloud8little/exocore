// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imua-xyz/imuachain/x/oracle/keeper/feedermanagement (interfaces: CacheReader)
//
// Generated by this command:
//
//	mockgen -destination mock_cachereader_test.go -package feedermanagement github.com/imua-xyz/imuachain/x/oracle/keeper/feedermanagement CacheReader
//

// Package feedermanagement is a generated GoMock package.
package feedermanagement

import (
	big "math/big"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCacheReader is a mock of CacheReader interface.
type MockCacheReader struct {
	ctrl     *gomock.Controller
	recorder *MockCacheReaderMockRecorder
	isgomock struct{}
}

// MockCacheReaderMockRecorder is the mock recorder for MockCacheReader.
type MockCacheReaderMockRecorder struct {
	mock *MockCacheReader
}

// NewMockCacheReader creates a new mock instance.
func NewMockCacheReader(ctrl *gomock.Controller) *MockCacheReader {
	mock := &MockCacheReader{ctrl: ctrl}
	mock.recorder = &MockCacheReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheReader) EXPECT() *MockCacheReaderMockRecorder {
	return m.recorder
}

// GetPowerForValidator mocks base method.
func (m *MockCacheReader) GetPowerForValidator(validator string) (*big.Int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPowerForValidator", validator)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetPowerForValidator indicates an expected call of GetPowerForValidator.
func (mr *MockCacheReaderMockRecorder) GetPowerForValidator(validator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPowerForValidator", reflect.TypeOf((*MockCacheReader)(nil).GetPowerForValidator), validator)
}

// GetThreshold mocks base method.
func (m *MockCacheReader) GetThreshold() *threshold {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThreshold")
	ret0, _ := ret[0].(*threshold)
	return ret0
}

// GetThreshold indicates an expected call of GetThreshold.
func (mr *MockCacheReaderMockRecorder) GetThreshold() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThreshold", reflect.TypeOf((*MockCacheReader)(nil).GetThreshold))
}

// GetTotalPower mocks base method.
func (m *MockCacheReader) GetTotalPower() *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalPower")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetTotalPower indicates an expected call of GetTotalPower.
func (mr *MockCacheReaderMockRecorder) GetTotalPower() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalPower", reflect.TypeOf((*MockCacheReader)(nil).GetTotalPower))
}

// GetValidators mocks base method.
func (m *MockCacheReader) GetValidators() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidators")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetValidators indicates an expected call of GetValidators.
func (mr *MockCacheReaderMockRecorder) GetValidators() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidators", reflect.TypeOf((*MockCacheReader)(nil).GetValidators))
}

// IsDeterministic mocks base method.
func (m *MockCacheReader) IsDeterministic(sournceID int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDeterministic", sournceID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDeterministic indicates an expected call of IsDeterministic.
func (mr *MockCacheReaderMockRecorder) IsDeterministic(sournceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDeterministic", reflect.TypeOf((*MockCacheReader)(nil).IsDeterministic), sournceID)
}

// IsRuleV1 mocks base method.
func (m *MockCacheReader) IsRuleV1(feederID int64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRuleV1", feederID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRuleV1 indicates an expected call of IsRuleV1.
func (mr *MockCacheReaderMockRecorder) IsRuleV1(feederID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRuleV1", reflect.TypeOf((*MockCacheReader)(nil).IsRuleV1), feederID)
}
