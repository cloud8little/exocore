// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: imuachain/oracle/v1/slashing.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ValidatorReportInfo represents the information to describe the miss status of a validator reporting prices
type ValidatorReportInfo struct {
	// address of the validtor
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// start_height for the performance round of the configured window of rounds
	StartHeight int64 `protobuf:"varint,2,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	// index_offset track the offset of current window
	IndexOffset int64 `protobuf:"varint,3,opt,name=index_offset,json=indexOffset,proto3" json:"index_offset,omitempty"`
	// missed_rounds_counter counts the number of missed rounds for this window
	MissedRoundsCounter int64 `protobuf:"varint,4,opt,name=missed_rounds_counter,json=missedRoundsCounter,proto3" json:"missed_rounds_counter,omitempty"`
}

func (m *ValidatorReportInfo) Reset()         { *m = ValidatorReportInfo{} }
func (m *ValidatorReportInfo) String() string { return proto.CompactTextString(m) }
func (*ValidatorReportInfo) ProtoMessage()    {}
func (*ValidatorReportInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b4c90f6640fb6f64, []int{0}
}
func (m *ValidatorReportInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorReportInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorReportInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorReportInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorReportInfo.Merge(m, src)
}
func (m *ValidatorReportInfo) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorReportInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorReportInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorReportInfo proto.InternalMessageInfo

func (m *ValidatorReportInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ValidatorReportInfo) GetStartHeight() int64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *ValidatorReportInfo) GetIndexOffset() int64 {
	if m != nil {
		return m.IndexOffset
	}
	return 0
}

func (m *ValidatorReportInfo) GetMissedRoundsCounter() int64 {
	if m != nil {
		return m.MissedRoundsCounter
	}
	return 0
}

func init() {
	proto.RegisterType((*ValidatorReportInfo)(nil), "imuachain.oracle.v1.ValidatorReportInfo")
}

func init() {
	proto.RegisterFile("imuachain/oracle/v1/slashing.proto", fileDescriptor_b4c90f6640fb6f64)
}

var fileDescriptor_b4c90f6640fb6f64 = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x90, 0x31, 0x4e, 0x84, 0x40,
	0x14, 0x86, 0x19, 0xd7, 0x68, 0x44, 0x2b, 0x88, 0x09, 0xd5, 0x64, 0xdd, 0x6a, 0x0b, 0x85, 0xac,
	0xde, 0x40, 0x13, 0xa3, 0x95, 0x09, 0x85, 0x85, 0x0d, 0x99, 0x65, 0x06, 0x98, 0x04, 0xe6, 0x91,
	0x79, 0x8f, 0x0d, 0xeb, 0x29, 0xbc, 0x86, 0x37, 0xb1, 0xdc, 0xd2, 0xd2, 0xc0, 0x45, 0xcc, 0x0e,
	0x59, 0x2d, 0xdf, 0xf7, 0x7f, 0xcd, 0xfb, 0xfc, 0x85, 0x6e, 0x3a, 0x91, 0x57, 0x42, 0x9b, 0x04,
	0xac, 0xc8, 0x6b, 0x95, 0x6c, 0x56, 0x09, 0xd6, 0x02, 0x2b, 0x6d, 0xca, 0xb8, 0xb5, 0x40, 0x10,
	0x84, 0x7f, 0x4e, 0x3c, 0x39, 0xf1, 0x66, 0xb5, 0xf8, 0x64, 0x7e, 0xf8, 0x2a, 0x6a, 0x2d, 0x05,
	0x81, 0x4d, 0x55, 0x0b, 0x96, 0x9e, 0x4d, 0x01, 0x41, 0xe4, 0x9f, 0x0a, 0x29, 0xad, 0x42, 0x8c,
	0xd8, 0x9c, 0x2d, 0xcf, 0xd2, 0xc3, 0x19, 0x5c, 0xf9, 0x17, 0x48, 0xc2, 0x52, 0x56, 0x29, 0x5d,
	0x56, 0x14, 0x1d, 0xcd, 0xd9, 0x72, 0x96, 0x9e, 0x3b, 0xf6, 0xe4, 0xd0, 0x5e, 0xd1, 0x46, 0xaa,
	0x3e, 0x83, 0xa2, 0x40, 0x45, 0xd1, 0x6c, 0x52, 0x1c, 0x7b, 0x71, 0x28, 0xb8, 0xf5, 0x2f, 0x1b,
	0x8d, 0xa8, 0x64, 0x66, 0xa1, 0x33, 0x12, 0xb3, 0x1c, 0x3a, 0x43, 0xca, 0x46, 0xc7, 0xce, 0x0d,
	0xa7, 0x31, 0x75, 0xdb, 0xc3, 0x34, 0xdd, 0x3f, 0x7e, 0x0d, 0x9c, 0xed, 0x06, 0xce, 0x7e, 0x06,
	0xce, 0x3e, 0x46, 0xee, 0xed, 0x46, 0xee, 0x7d, 0x8f, 0xdc, 0x7b, 0xbb, 0x2e, 0x35, 0x55, 0xdd,
	0x3a, 0xce, 0xa1, 0x49, 0xf6, 0x5f, 0xde, 0xf4, 0xdb, 0xf7, 0xe4, 0x3f, 0x49, 0x7f, 0x88, 0x42,
	0xdb, 0x56, 0xe1, 0xfa, 0xc4, 0xf5, 0xb8, 0xfb, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x3b, 0xd8, 0x21,
	0xb1, 0x35, 0x01, 0x00, 0x00,
}

func (m *ValidatorReportInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorReportInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorReportInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MissedRoundsCounter != 0 {
		i = encodeVarintSlashing(dAtA, i, uint64(m.MissedRoundsCounter))
		i--
		dAtA[i] = 0x20
	}
	if m.IndexOffset != 0 {
		i = encodeVarintSlashing(dAtA, i, uint64(m.IndexOffset))
		i--
		dAtA[i] = 0x18
	}
	if m.StartHeight != 0 {
		i = encodeVarintSlashing(dAtA, i, uint64(m.StartHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintSlashing(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSlashing(dAtA []byte, offset int, v uint64) int {
	offset -= sovSlashing(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValidatorReportInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovSlashing(uint64(l))
	}
	if m.StartHeight != 0 {
		n += 1 + sovSlashing(uint64(m.StartHeight))
	}
	if m.IndexOffset != 0 {
		n += 1 + sovSlashing(uint64(m.IndexOffset))
	}
	if m.MissedRoundsCounter != 0 {
		n += 1 + sovSlashing(uint64(m.MissedRoundsCounter))
	}
	return n
}

func sovSlashing(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSlashing(x uint64) (n int) {
	return sovSlashing(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ValidatorReportInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSlashing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorReportInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorReportInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSlashing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSlashing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			m.StartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexOffset", wireType)
			}
			m.IndexOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexOffset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissedRoundsCounter", wireType)
			}
			m.MissedRoundsCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissedRoundsCounter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSlashing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSlashing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSlashing(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSlashing
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSlashing
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSlashing
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSlashing
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSlashing        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSlashing          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSlashing = fmt.Errorf("proto: unexpected end of group")
)
