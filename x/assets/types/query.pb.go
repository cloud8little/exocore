// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exocore/assets/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryClientChainInfo is the query for getting the client chain info by index.
type QueryClientChainInfo struct {
	// chain_index is the index of the chain.
	ChainIndex uint64 `protobuf:"varint,1,opt,name=chain_index,json=chainIndex,proto3" json:"chain_index,omitempty"`
}

func (m *QueryClientChainInfo) Reset()         { *m = QueryClientChainInfo{} }
func (m *QueryClientChainInfo) String() string { return proto.CompactTextString(m) }
func (*QueryClientChainInfo) ProtoMessage()    {}
func (*QueryClientChainInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de33a8cf38ccb9d, []int{0}
}
func (m *QueryClientChainInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClientChainInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClientChainInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClientChainInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClientChainInfo.Merge(m, src)
}
func (m *QueryClientChainInfo) XXX_Size() int {
	return m.Size()
}
func (m *QueryClientChainInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClientChainInfo.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClientChainInfo proto.InternalMessageInfo

func (m *QueryClientChainInfo) GetChainIndex() uint64 {
	if m != nil {
		return m.ChainIndex
	}
	return 0
}

// QueryAllClientChainInfo is the query for all client chains info.
type QueryAllClientChainInfo struct {
	// pagination related options.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllClientChainInfo) Reset()         { *m = QueryAllClientChainInfo{} }
func (m *QueryAllClientChainInfo) String() string { return proto.CompactTextString(m) }
func (*QueryAllClientChainInfo) ProtoMessage()    {}
func (*QueryAllClientChainInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de33a8cf38ccb9d, []int{1}
}
func (m *QueryAllClientChainInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllClientChainInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllClientChainInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllClientChainInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllClientChainInfo.Merge(m, src)
}
func (m *QueryAllClientChainInfo) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllClientChainInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllClientChainInfo.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllClientChainInfo proto.InternalMessageInfo

func (m *QueryAllClientChainInfo) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllClientChainInfoResponse is the response for all client chains info.
type QueryAllClientChainInfoResponse struct {
	// all_client_chain_infos is a list of all client chain info.
	AllClientChainInfos []*ClientChainInfo `protobuf:"bytes,1,rep,name=all_client_chain_infos,json=allClientChainInfos,proto3" json:"all_client_chain_infos,omitempty"`
	// pagination related response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllClientChainInfoResponse) Reset()         { *m = QueryAllClientChainInfoResponse{} }
func (m *QueryAllClientChainInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllClientChainInfoResponse) ProtoMessage()    {}
func (*QueryAllClientChainInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de33a8cf38ccb9d, []int{2}
}
func (m *QueryAllClientChainInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllClientChainInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllClientChainInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllClientChainInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllClientChainInfoResponse.Merge(m, src)
}
func (m *QueryAllClientChainInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllClientChainInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllClientChainInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllClientChainInfoResponse proto.InternalMessageInfo

func (m *QueryAllClientChainInfoResponse) GetAllClientChainInfos() []*ClientChainInfo {
	if m != nil {
		return m.AllClientChainInfos
	}
	return nil
}

func (m *QueryAllClientChainInfoResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryStakingAssetInfo is the query for getting the staking asset info.
type QueryStakingAssetInfo struct {
	// asset_id is the asset for which the query is made.
	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (m *QueryStakingAssetInfo) Reset()         { *m = QueryStakingAssetInfo{} }
func (m *QueryStakingAssetInfo) String() string { return proto.CompactTextString(m) }
func (*QueryStakingAssetInfo) ProtoMessage()    {}
func (*QueryStakingAssetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de33a8cf38ccb9d, []int{3}
}
func (m *QueryStakingAssetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakingAssetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakingAssetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakingAssetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakingAssetInfo.Merge(m, src)
}
func (m *QueryStakingAssetInfo) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakingAssetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakingAssetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakingAssetInfo proto.InternalMessageInfo

func (m *QueryStakingAssetInfo) GetAssetId() string {
	if m != nil {
		return m.AssetId
	}
	return ""
}

// QueryAllStakingAssetsInfo is the query for getting all staking assets info.
type QueryAllStakingAssetsInfo struct {
}

func (m *QueryAllStakingAssetsInfo) Reset()         { *m = QueryAllStakingAssetsInfo{} }
func (m *QueryAllStakingAssetsInfo) String() string { return proto.CompactTextString(m) }
func (*QueryAllStakingAssetsInfo) ProtoMessage()    {}
func (*QueryAllStakingAssetsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de33a8cf38ccb9d, []int{4}
}
func (m *QueryAllStakingAssetsInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStakingAssetsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStakingAssetsInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStakingAssetsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStakingAssetsInfo.Merge(m, src)
}
func (m *QueryAllStakingAssetsInfo) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStakingAssetsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStakingAssetsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStakingAssetsInfo proto.InternalMessageInfo

// QueryAllStakingAssetsInfoResponse is the response for all staking assets info,
// indexed by the asset id.
type QueryAllStakingAssetsInfoResponse struct {
	// all_staking_assets_info is the response for all staking assets info.
	AllStakingAssetsInfo []StakingAssetInfo `protobuf:"bytes,1,rep,name=all_staking_assets_info,json=allStakingAssetsInfo,proto3" json:"all_staking_assets_info"`
}

func (m *QueryAllStakingAssetsInfoResponse) Reset()         { *m = QueryAllStakingAssetsInfoResponse{} }
func (m *QueryAllStakingAssetsInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllStakingAssetsInfoResponse) ProtoMessage()    {}
func (*QueryAllStakingAssetsInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de33a8cf38ccb9d, []int{5}
}
func (m *QueryAllStakingAssetsInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStakingAssetsInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStakingAssetsInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStakingAssetsInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStakingAssetsInfoResponse.Merge(m, src)
}
func (m *QueryAllStakingAssetsInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStakingAssetsInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStakingAssetsInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStakingAssetsInfoResponse proto.InternalMessageInfo

func (m *QueryAllStakingAssetsInfoResponse) GetAllStakingAssetsInfo() []StakingAssetInfo {
	if m != nil {
		return m.AllStakingAssetsInfo
	}
	return nil
}

// QueryStakerAssetInfo is the query for getting the staker asset info.
type QueryStakerAssetInfo struct {
	// stake_id is the staker id for which the query is made.
	StakerId string `protobuf:"bytes,1,opt,name=staker_id,json=stakerId,proto3" json:"staker_id,omitempty"`
}

func (m *QueryStakerAssetInfo) Reset()         { *m = QueryStakerAssetInfo{} }
func (m *QueryStakerAssetInfo) String() string { return proto.CompactTextString(m) }
func (*QueryStakerAssetInfo) ProtoMessage()    {}
func (*QueryStakerAssetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de33a8cf38ccb9d, []int{6}
}
func (m *QueryStakerAssetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakerAssetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakerAssetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakerAssetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakerAssetInfo.Merge(m, src)
}
func (m *QueryStakerAssetInfo) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakerAssetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakerAssetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakerAssetInfo proto.InternalMessageInfo

func (m *QueryStakerAssetInfo) GetStakerId() string {
	if m != nil {
		return m.StakerId
	}
	return ""
}

// QueryAssetInfoResponse is the response for the staker asset info.
type QueryAssetInfoResponse struct {
	// asset_infos is the response for the staker asset info, indexed by the asset id.
	AssetInfos []DepositByAsset `protobuf:"bytes,1,rep,name=asset_infos,json=assetInfos,proto3" json:"asset_infos"`
}

func (m *QueryAssetInfoResponse) Reset()         { *m = QueryAssetInfoResponse{} }
func (m *QueryAssetInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAssetInfoResponse) ProtoMessage()    {}
func (*QueryAssetInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de33a8cf38ccb9d, []int{7}
}
func (m *QueryAssetInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssetInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssetInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssetInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssetInfoResponse.Merge(m, src)
}
func (m *QueryAssetInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssetInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssetInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssetInfoResponse proto.InternalMessageInfo

func (m *QueryAssetInfoResponse) GetAssetInfos() []DepositByAsset {
	if m != nil {
		return m.AssetInfos
	}
	return nil
}

// QuerySpecifiedAssetAmountReq is the query for getting the staker specified asset amount.
type QuerySpecifiedAssetAmountReq struct {
	// staker_id is the staker id for which the query is made.
	StakerId string `protobuf:"bytes,1,opt,name=staker_id,json=stakerId,proto3" json:"staker_id,omitempty"`
	// asset_id is the asset for which the query is made.
	AssetId string `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (m *QuerySpecifiedAssetAmountReq) Reset()         { *m = QuerySpecifiedAssetAmountReq{} }
func (m *QuerySpecifiedAssetAmountReq) String() string { return proto.CompactTextString(m) }
func (*QuerySpecifiedAssetAmountReq) ProtoMessage()    {}
func (*QuerySpecifiedAssetAmountReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de33a8cf38ccb9d, []int{8}
}
func (m *QuerySpecifiedAssetAmountReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpecifiedAssetAmountReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpecifiedAssetAmountReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpecifiedAssetAmountReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpecifiedAssetAmountReq.Merge(m, src)
}
func (m *QuerySpecifiedAssetAmountReq) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpecifiedAssetAmountReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpecifiedAssetAmountReq.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpecifiedAssetAmountReq proto.InternalMessageInfo

func (m *QuerySpecifiedAssetAmountReq) GetStakerId() string {
	if m != nil {
		return m.StakerId
	}
	return ""
}

func (m *QuerySpecifiedAssetAmountReq) GetAssetId() string {
	if m != nil {
		return m.AssetId
	}
	return ""
}

// QueryOperatorAssetInfos is the query for getting the operator asset info.
type QueryOperatorAssetInfos struct {
	// operator_addr is the operator address for which the query is made.
	OperatorAddr string `protobuf:"bytes,1,opt,name=operator_addr,json=operatorAddr,proto3" json:"operator_addr,omitempty"`
}

func (m *QueryOperatorAssetInfos) Reset()         { *m = QueryOperatorAssetInfos{} }
func (m *QueryOperatorAssetInfos) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorAssetInfos) ProtoMessage()    {}
func (*QueryOperatorAssetInfos) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de33a8cf38ccb9d, []int{9}
}
func (m *QueryOperatorAssetInfos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorAssetInfos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorAssetInfos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorAssetInfos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorAssetInfos.Merge(m, src)
}
func (m *QueryOperatorAssetInfos) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorAssetInfos) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorAssetInfos.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorAssetInfos proto.InternalMessageInfo

func (m *QueryOperatorAssetInfos) GetOperatorAddr() string {
	if m != nil {
		return m.OperatorAddr
	}
	return ""
}

// QueryOperatorAssetInfosResponse is the response to the operator asset info query.
type QueryOperatorAssetInfosResponse struct {
	// asset_infos is the response for the operator asset info, indexed by the asset id.
	AssetInfos []AssetByID `protobuf:"bytes,1,rep,name=asset_infos,json=assetInfos,proto3" json:"asset_infos"`
}

func (m *QueryOperatorAssetInfosResponse) Reset()         { *m = QueryOperatorAssetInfosResponse{} }
func (m *QueryOperatorAssetInfosResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorAssetInfosResponse) ProtoMessage()    {}
func (*QueryOperatorAssetInfosResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de33a8cf38ccb9d, []int{10}
}
func (m *QueryOperatorAssetInfosResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorAssetInfosResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorAssetInfosResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorAssetInfosResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorAssetInfosResponse.Merge(m, src)
}
func (m *QueryOperatorAssetInfosResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorAssetInfosResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorAssetInfosResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorAssetInfosResponse proto.InternalMessageInfo

func (m *QueryOperatorAssetInfosResponse) GetAssetInfos() []AssetByID {
	if m != nil {
		return m.AssetInfos
	}
	return nil
}

// QueryOperatorSpecifiedAssetAmountReq is the query for getting the operator
// specified asset amount.
type QueryOperatorSpecifiedAssetAmountReq struct {
	// operator_addr is the operator address for which the query is made.
	OperatorAddr string `protobuf:"bytes,1,opt,name=operator_addr,json=operatorAddr,proto3" json:"operator_addr,omitempty"`
	// asset_id is the asset for which the query is made.
	AssetId string `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (m *QueryOperatorSpecifiedAssetAmountReq) Reset()         { *m = QueryOperatorSpecifiedAssetAmountReq{} }
func (m *QueryOperatorSpecifiedAssetAmountReq) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorSpecifiedAssetAmountReq) ProtoMessage()    {}
func (*QueryOperatorSpecifiedAssetAmountReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de33a8cf38ccb9d, []int{11}
}
func (m *QueryOperatorSpecifiedAssetAmountReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorSpecifiedAssetAmountReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorSpecifiedAssetAmountReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorSpecifiedAssetAmountReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorSpecifiedAssetAmountReq.Merge(m, src)
}
func (m *QueryOperatorSpecifiedAssetAmountReq) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorSpecifiedAssetAmountReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorSpecifiedAssetAmountReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorSpecifiedAssetAmountReq proto.InternalMessageInfo

func (m *QueryOperatorSpecifiedAssetAmountReq) GetOperatorAddr() string {
	if m != nil {
		return m.OperatorAddr
	}
	return ""
}

func (m *QueryOperatorSpecifiedAssetAmountReq) GetAssetId() string {
	if m != nil {
		return m.AssetId
	}
	return ""
}

// QueryStakerExCoreAddr is the query for getting the staker exocore address.
type QueryStakerExCoreAddr struct {
	// Per https://github.com/gogo/protobuf/issues/331, grpc-gateway does not like custom names.
	// So we remove the id suffix from here as well as the query.
	Staker string `protobuf:"bytes,1,opt,name=staker,proto3" json:"staker,omitempty"`
}

func (m *QueryStakerExCoreAddr) Reset()         { *m = QueryStakerExCoreAddr{} }
func (m *QueryStakerExCoreAddr) String() string { return proto.CompactTextString(m) }
func (*QueryStakerExCoreAddr) ProtoMessage()    {}
func (*QueryStakerExCoreAddr) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de33a8cf38ccb9d, []int{12}
}
func (m *QueryStakerExCoreAddr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakerExCoreAddr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakerExCoreAddr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakerExCoreAddr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakerExCoreAddr.Merge(m, src)
}
func (m *QueryStakerExCoreAddr) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakerExCoreAddr) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakerExCoreAddr.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakerExCoreAddr proto.InternalMessageInfo

func (m *QueryStakerExCoreAddr) GetStaker() string {
	if m != nil {
		return m.Staker
	}
	return ""
}

// QueryStakerExCoreAddrResponse is the response for the staker exocore address query.
type QueryStakerExCoreAddrResponse struct {
	// exocore_addr is the exocore address of the staker.
	ExoCoreAddr string `protobuf:"bytes,1,opt,name=exocore_addr,json=exocoreAddr,proto3" json:"exocore_addr,omitempty"`
}

func (m *QueryStakerExCoreAddrResponse) Reset()         { *m = QueryStakerExCoreAddrResponse{} }
func (m *QueryStakerExCoreAddrResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakerExCoreAddrResponse) ProtoMessage()    {}
func (*QueryStakerExCoreAddrResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de33a8cf38ccb9d, []int{13}
}
func (m *QueryStakerExCoreAddrResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakerExCoreAddrResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakerExCoreAddrResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakerExCoreAddrResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakerExCoreAddrResponse.Merge(m, src)
}
func (m *QueryStakerExCoreAddrResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakerExCoreAddrResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakerExCoreAddrResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakerExCoreAddrResponse proto.InternalMessageInfo

func (m *QueryStakerExCoreAddrResponse) GetExoCoreAddr() string {
	if m != nil {
		return m.ExoCoreAddr
	}
	return ""
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de33a8cf38ccb9d, []int{14}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC
// method.
type QueryParamsResponse struct {
	// params defines the parameters for this module.
	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1de33a8cf38ccb9d, []int{15}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryClientChainInfo)(nil), "exocore.assets.v1.QueryClientChainInfo")
	proto.RegisterType((*QueryAllClientChainInfo)(nil), "exocore.assets.v1.QueryAllClientChainInfo")
	proto.RegisterType((*QueryAllClientChainInfoResponse)(nil), "exocore.assets.v1.QueryAllClientChainInfoResponse")
	proto.RegisterType((*QueryStakingAssetInfo)(nil), "exocore.assets.v1.QueryStakingAssetInfo")
	proto.RegisterType((*QueryAllStakingAssetsInfo)(nil), "exocore.assets.v1.QueryAllStakingAssetsInfo")
	proto.RegisterType((*QueryAllStakingAssetsInfoResponse)(nil), "exocore.assets.v1.QueryAllStakingAssetsInfoResponse")
	proto.RegisterType((*QueryStakerAssetInfo)(nil), "exocore.assets.v1.QueryStakerAssetInfo")
	proto.RegisterType((*QueryAssetInfoResponse)(nil), "exocore.assets.v1.QueryAssetInfoResponse")
	proto.RegisterType((*QuerySpecifiedAssetAmountReq)(nil), "exocore.assets.v1.QuerySpecifiedAssetAmountReq")
	proto.RegisterType((*QueryOperatorAssetInfos)(nil), "exocore.assets.v1.QueryOperatorAssetInfos")
	proto.RegisterType((*QueryOperatorAssetInfosResponse)(nil), "exocore.assets.v1.QueryOperatorAssetInfosResponse")
	proto.RegisterType((*QueryOperatorSpecifiedAssetAmountReq)(nil), "exocore.assets.v1.QueryOperatorSpecifiedAssetAmountReq")
	proto.RegisterType((*QueryStakerExCoreAddr)(nil), "exocore.assets.v1.QueryStakerExCoreAddr")
	proto.RegisterType((*QueryStakerExCoreAddrResponse)(nil), "exocore.assets.v1.QueryStakerExCoreAddrResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "exocore.assets.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "exocore.assets.v1.QueryParamsResponse")
}

func init() { proto.RegisterFile("exocore/assets/v1/query.proto", fileDescriptor_1de33a8cf38ccb9d) }

var fileDescriptor_1de33a8cf38ccb9d = []byte{
	// 1060 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0x86, 0x12, 0xda, 0x71, 0x38, 0x30, 0x35, 0x69, 0xbc, 0x49, 0xec, 0x66, 0x9a, 0x26,
	0x21, 0x6a, 0x77, 0x6b, 0xb7, 0xa2, 0x80, 0xf8, 0xa1, 0xd8, 0x0d, 0xd4, 0x3d, 0x40, 0x71, 0x25,
	0x40, 0x5c, 0xcc, 0xd8, 0x3b, 0xd9, 0xae, 0xe2, 0xec, 0x6c, 0x76, 0x36, 0xc1, 0x21, 0x8a, 0x84,
	0x90, 0x90, 0x7a, 0x44, 0x42, 0xe2, 0x2f, 0xe0, 0x02, 0x27, 0x0e, 0x1c, 0xe0, 0xcc, 0xa5, 0x12,
	0x97, 0x0a, 0x2e, 0x9c, 0x2a, 0x94, 0x20, 0xf1, 0x6f, 0xa0, 0x9d, 0x99, 0xfd, 0xe1, 0xdd, 0x59,
	0x3b, 0xa8, 0xb7, 0x9d, 0x79, 0xdf, 0x9b, 0xf7, 0xbd, 0xef, 0xcd, 0xbc, 0xb7, 0x60, 0x89, 0x0c,
	0x69, 0x9f, 0xfa, 0xc4, 0xc4, 0x8c, 0x91, 0x80, 0x99, 0x07, 0x75, 0x73, 0x6f, 0x9f, 0xf8, 0x87,
	0x86, 0xe7, 0xd3, 0x80, 0xc2, 0x97, 0xa4, 0xd9, 0x10, 0x66, 0xe3, 0xa0, 0xae, 0x6f, 0xf4, 0x29,
	0xdb, 0xa5, 0xcc, 0xec, 0x61, 0x46, 0x04, 0xd6, 0x3c, 0xa8, 0xf7, 0x48, 0x80, 0xeb, 0xa6, 0x87,
	0x6d, 0xc7, 0xc5, 0x81, 0x43, 0x5d, 0xe1, 0xae, 0x2f, 0x48, 0x6c, 0x04, 0x4b, 0x9f, 0xad, 0x57,
	0x84, 0xb1, 0xcb, 0x57, 0xa6, 0x58, 0x48, 0x53, 0x2d, 0xcf, 0xca, 0x26, 0x2e, 0x61, 0x4e, 0x04,
	0xa8, 0xe6, 0x01, 0x1e, 0xf6, 0xf1, 0x6e, 0x64, 0xd7, 0xf3, 0xf6, 0x60, 0x28, 0x6d, 0x65, 0x9b,
	0xda, 0x54, 0x04, 0x0d, 0xbf, 0xe4, 0xee, 0xa2, 0x4d, 0xa9, 0x3d, 0x20, 0x26, 0xf6, 0x1c, 0x13,
	0xbb, 0x2e, 0x0d, 0x78, 0x1e, 0xf2, 0x3c, 0x74, 0x1b, 0x94, 0x3f, 0x0c, 0xa9, 0xb7, 0x06, 0x0e,
	0x71, 0x83, 0xd6, 0x43, 0xec, 0xb8, 0x6d, 0x77, 0x9b, 0xc2, 0x1a, 0x28, 0xf5, 0xc3, 0x45, 0xd7,
	0x71, 0x2d, 0x32, 0x9c, 0xd7, 0x2e, 0x6b, 0xeb, 0xe7, 0x3a, 0xa0, 0x2f, 0xec, 0x16, 0x19, 0x22,
	0x0c, 0x2e, 0x71, 0xc7, 0xcd, 0xc1, 0x20, 0xeb, 0xfb, 0x2e, 0x00, 0x89, 0x60, 0xdc, 0xb5, 0xd4,
	0x58, 0x35, 0xa4, 0x0e, 0xa1, 0xba, 0x86, 0x50, 0x4b, 0xaa, 0x6b, 0xdc, 0xc7, 0x36, 0xe9, 0x90,
	0xbd, 0x7d, 0xc2, 0x82, 0x4e, 0xca, 0x13, 0xfd, 0xa6, 0x81, 0x5a, 0x41, 0x8c, 0x0e, 0x61, 0x1e,
	0x75, 0x19, 0x81, 0x1f, 0x83, 0x39, 0x3c, 0x18, 0x74, 0xfb, 0xdc, 0xdc, 0x8d, 0x28, 0x6f, 0x53,
	0x36, 0xaf, 0x5d, 0x7e, 0x6e, 0xbd, 0xd4, 0x40, 0x46, 0xae, 0xd0, 0x46, 0xf6, 0xac, 0x8b, 0x38,
	0x77, 0x3e, 0x83, 0xef, 0x8d, 0x24, 0x31, 0xcd, 0x93, 0x58, 0x9b, 0x98, 0x84, 0x60, 0x35, 0x92,
	0x45, 0x03, 0xbc, 0xcc, 0x93, 0x78, 0x10, 0xe0, 0x1d, 0xc7, 0xb5, 0x37, 0x43, 0x1a, 0x5c, 0xa6,
	0x0a, 0x38, 0xcf, 0x39, 0x75, 0x1d, 0x8b, 0x8b, 0x74, 0xa1, 0xf3, 0x02, 0x5f, 0xb7, 0x2d, 0xb4,
	0x00, 0x2a, 0x51, 0xe2, 0x69, 0x37, 0x16, 0xfa, 0xa1, 0xaf, 0x35, 0xb0, 0x5c, 0x68, 0x8d, 0x85,
	0xf9, 0x0c, 0x5c, 0x0a, 0x85, 0x61, 0x02, 0xd0, 0x15, 0xd9, 0x73, 0x69, 0xa4, 0x32, 0x57, 0x14,
	0xca, 0x64, 0x39, 0x36, 0xcf, 0x3d, 0x7e, 0x5a, 0x9b, 0xea, 0x94, 0xb1, 0x8a, 0xc7, 0x4d, 0x79,
	0x75, 0x42, 0x0b, 0xf1, 0x93, 0xbc, 0x16, 0xc0, 0x05, 0xc6, 0xb7, 0x92, 0xc4, 0xce, 0x8b, 0x8d,
	0xb6, 0x85, 0x7a, 0x60, 0x4e, 0x70, 0x8f, 0xe0, 0x31, 0xe1, 0xbb, 0xa0, 0x24, 0xe5, 0x48, 0x95,
	0x6f, 0x59, 0x41, 0xf2, 0x0e, 0xf1, 0x28, 0x73, 0x82, 0xa6, 0x38, 0x43, 0x52, 0x04, 0x38, 0x3a,
	0x90, 0xa1, 0x8f, 0xc0, 0xa2, 0x20, 0xe6, 0x91, 0xbe, 0xb3, 0xed, 0x10, 0x8b, 0x03, 0x37, 0x77,
	0xe9, 0xbe, 0x1b, 0x74, 0xc8, 0xde, 0x58, 0x82, 0x23, 0x55, 0x99, 0x1e, 0xad, 0xca, 0x27, 0xf2,
	0xca, 0x7f, 0xe0, 0x11, 0x1f, 0x07, 0x34, 0x49, 0x99, 0xc1, 0xb7, 0xc0, 0x8b, 0x54, 0xee, 0x76,
	0xb1, 0x65, 0xf9, 0xe2, 0xd8, 0xe6, 0xfc, 0x1f, 0x3f, 0x5f, 0x2f, 0xcb, 0x3b, 0xb3, 0x69, 0x59,
	0x3e, 0x61, 0xec, 0x41, 0xe0, 0x3b, 0xae, 0xdd, 0x99, 0x8d, 0xe0, 0xe1, 0x36, 0xda, 0x96, 0x17,
	0x3d, 0x7f, 0x72, 0x2c, 0x4f, 0x4b, 0x25, 0xcf, 0xa2, 0x42, 0x1e, 0xa1, 0xca, 0x61, 0xfb, 0x8e,
	0x42, 0x99, 0x2f, 0x35, 0xb0, 0x32, 0x12, 0xa8, 0x48, 0xa2, 0x67, 0xcb, 0x67, 0x9c, 0x88, 0x66,
	0xea, 0x39, 0x10, 0x7f, 0x6b, 0xd8, 0xa2, 0x3e, 0xe1, 0x3e, 0x73, 0x60, 0x46, 0x14, 0x41, 0x96,
	0x44, 0xae, 0xd0, 0x0e, 0x58, 0x52, 0x3a, 0xc4, 0xca, 0xdc, 0x03, 0xb3, 0x52, 0x85, 0x34, 0xd5,
	0xb5, 0x93, 0xa7, 0xb5, 0xd2, 0xd6, 0x90, 0x46, 0xf0, 0x42, 0xe6, 0x25, 0xe9, 0xcc, 0x0b, 0x51,
	0x06, 0x90, 0x07, 0xbb, 0xcf, 0x7b, 0xae, 0x6c, 0x4a, 0xe8, 0x2e, 0xb8, 0x38, 0xb2, 0x2b, 0x03,
	0xd7, 0xc1, 0x8c, 0xe8, 0xcd, 0xb2, 0xc7, 0x55, 0x14, 0xd5, 0x90, 0x2e, 0x12, 0xd8, 0x78, 0x34,
	0x0b, 0x9e, 0xe7, 0x47, 0xc1, 0x2f, 0xc0, 0x8c, 0xb0, 0xc1, 0xab, 0x0a, 0xb7, 0x3c, 0x09, 0x7d,
	0x75, 0x12, 0x4c, 0xb0, 0x42, 0xcb, 0x5f, 0xfd, 0xf9, 0xcf, 0xb7, 0xd3, 0x0b, 0xb0, 0x62, 0x16,
	0x8d, 0x12, 0xf8, 0xbd, 0xc6, 0xfb, 0x4b, 0xa6, 0xe7, 0x35, 0x0f, 0x79, 0x67, 0x87, 0x6b, 0x45,
	0x81, 0x32, 0x78, 0xfd, 0x0c, 0xbd, 0x15, 0xbd, 0xf1, 0xe8, 0xdf, 0x9f, 0x36, 0x34, 0x4e, 0xc9,
	0x84, 0xd7, 0x15, 0x94, 0xd2, 0x9d, 0xdb, 0x3c, 0x4a, 0xcd, 0x9c, 0x63, 0xf8, 0xa3, 0xc6, 0xef,
	0x8a, 0x62, 0xc2, 0x6c, 0x14, 0x51, 0xcc, 0x63, 0xf5, 0xc6, 0xd9, 0xb1, 0xb1, 0x86, 0xf5, 0x84,
	0xf5, 0x2a, 0x5c, 0x51, 0xb0, 0xce, 0xce, 0x1c, 0x06, 0xbf, 0xd3, 0xf8, 0x25, 0xc9, 0x75, 0xf9,
	0xf5, 0xa2, 0xf0, 0x59, 0xa4, 0x7e, 0x96, 0x86, 0x8c, 0x6e, 0x24, 0xcc, 0xae, 0xc2, 0x2b, 0x2a,
	0x66, 0xe1, 0x97, 0x79, 0x14, 0x3d, 0xbf, 0x63, 0xf8, 0x83, 0xc6, 0xdb, 0x96, 0x6a, 0x58, 0xc0,
	0x6b, 0x63, 0xb4, 0xc9, 0xa1, 0xf5, 0x5b, 0xff, 0x07, 0x1d, 0x6b, 0xb9, 0x91, 0x30, 0xae, 0xc1,
	0xa5, 0x02, 0x2d, 0xc5, 0x2a, 0xbc, 0x98, 0x91, 0x88, 0x24, 0xdd, 0x5e, 0xd7, 0xc6, 0x89, 0x98,
	0x42, 0xea, 0xaf, 0x14, 0x52, 0xcc, 0xce, 0x1b, 0xf4, 0x7a, 0xc2, 0xcb, 0x80, 0xd7, 0x14, 0xbc,
	0xe4, 0x8c, 0x90, 0x1b, 0x47, 0xf1, 0xc8, 0x38, 0x86, 0xbf, 0x6a, 0xbc, 0x27, 0x89, 0xe0, 0xaa,
	0x16, 0x0a, 0xcd, 0x42, 0xc2, 0xea, 0x86, 0xab, 0x7c, 0x4b, 0x99, 0xe4, 0x50, 0x2b, 0x61, 0xfc,
	0x1a, 0x7c, 0x75, 0x02, 0xe3, 0x34, 0xe1, 0xf4, 0x75, 0xf8, 0x45, 0x3c, 0x2a, 0xc5, 0x0c, 0x2b,
	0x7c, 0x54, 0x79, 0x6c, 0xf1, 0xa3, 0x2a, 0x9e, 0x60, 0xe8, 0x9d, 0x84, 0xfe, 0x2d, 0xd8, 0x50,
	0xd0, 0x4f, 0x26, 0x8e, 0x94, 0x7c, 0x64, 0x04, 0x1d, 0xc3, 0xdf, 0xc5, 0xff, 0xe0, 0xb8, 0xd9,
	0x05, 0x6f, 0x4f, 0x22, 0x56, 0x54, 0x80, 0x15, 0x85, 0x63, 0x2e, 0x19, 0xd4, 0x4e, 0x72, 0x78,
	0x1b, 0xbe, 0x39, 0x31, 0x87, 0x6c, 0x0a, 0xa9, 0x42, 0x34, 0xef, 0x3d, 0x3e, 0xa9, 0x6a, 0x4f,
	0x4e, 0xaa, 0xda, 0xdf, 0x27, 0x55, 0xed, 0x9b, 0xd3, 0xea, 0xd4, 0x93, 0xd3, 0xea, 0xd4, 0x5f,
	0xa7, 0xd5, 0xa9, 0x4f, 0x6f, 0xd8, 0x4e, 0xf0, 0x70, 0xbf, 0x67, 0xf4, 0xe9, 0xae, 0xb9, 0x25,
	0x22, 0xbc, 0x4f, 0x82, 0xcf, 0xa9, 0xbf, 0x13, 0x07, 0x1c, 0x46, 0x21, 0x83, 0x43, 0x8f, 0xb0,
	0xde, 0x0c, 0xff, 0x99, 0xbf, 0xf9, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x65, 0x01, 0xc8, 0xda,
	0xf5, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params retrieves the assets module params
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// ClientChainInfoByIndex queries the client chain info by index.
	QueClientChainInfoByIndex(ctx context.Context, in *QueryClientChainInfo, opts ...grpc.CallOption) (*ClientChainInfo, error)
	// AllClientChainInfo queries all client chain info.
	QueAllClientChainInfo(ctx context.Context, in *QueryAllClientChainInfo, opts ...grpc.CallOption) (*QueryAllClientChainInfoResponse, error)
	// StakingAssetInfo queries the staking asset info.
	QueStakingAssetInfo(ctx context.Context, in *QueryStakingAssetInfo, opts ...grpc.CallOption) (*StakingAssetInfo, error)
	// AllStakingAssetsInfo queries all staking assets info.
	QueAllStakingAssetsInfo(ctx context.Context, in *QueryAllStakingAssetsInfo, opts ...grpc.CallOption) (*QueryAllStakingAssetsInfoResponse, error)
	// StakerAssetInfos queries the staker asset info.
	QueStakerAssetInfos(ctx context.Context, in *QueryStakerAssetInfo, opts ...grpc.CallOption) (*QueryAssetInfoResponse, error)
	// StakerSpecifiedAssetAmount queries the staker specified asset amount.
	QueStakerSpecifiedAssetAmount(ctx context.Context, in *QuerySpecifiedAssetAmountReq, opts ...grpc.CallOption) (*StakerAssetInfo, error)
	// OperatorAssetInfos queries the operator asset info.
	QueOperatorAssetInfos(ctx context.Context, in *QueryOperatorAssetInfos, opts ...grpc.CallOption) (*QueryOperatorAssetInfosResponse, error)
	// OperatorSpecifiedAssetAmount queries the operator specified asset amount.
	QueOperatorSpecifiedAssetAmount(ctx context.Context, in *QueryOperatorSpecifiedAssetAmountReq, opts ...grpc.CallOption) (*OperatorAssetInfo, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/exocore.assets.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueClientChainInfoByIndex(ctx context.Context, in *QueryClientChainInfo, opts ...grpc.CallOption) (*ClientChainInfo, error) {
	out := new(ClientChainInfo)
	err := c.cc.Invoke(ctx, "/exocore.assets.v1.Query/QueClientChainInfoByIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueAllClientChainInfo(ctx context.Context, in *QueryAllClientChainInfo, opts ...grpc.CallOption) (*QueryAllClientChainInfoResponse, error) {
	out := new(QueryAllClientChainInfoResponse)
	err := c.cc.Invoke(ctx, "/exocore.assets.v1.Query/QueAllClientChainInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueStakingAssetInfo(ctx context.Context, in *QueryStakingAssetInfo, opts ...grpc.CallOption) (*StakingAssetInfo, error) {
	out := new(StakingAssetInfo)
	err := c.cc.Invoke(ctx, "/exocore.assets.v1.Query/QueStakingAssetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueAllStakingAssetsInfo(ctx context.Context, in *QueryAllStakingAssetsInfo, opts ...grpc.CallOption) (*QueryAllStakingAssetsInfoResponse, error) {
	out := new(QueryAllStakingAssetsInfoResponse)
	err := c.cc.Invoke(ctx, "/exocore.assets.v1.Query/QueAllStakingAssetsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueStakerAssetInfos(ctx context.Context, in *QueryStakerAssetInfo, opts ...grpc.CallOption) (*QueryAssetInfoResponse, error) {
	out := new(QueryAssetInfoResponse)
	err := c.cc.Invoke(ctx, "/exocore.assets.v1.Query/QueStakerAssetInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueStakerSpecifiedAssetAmount(ctx context.Context, in *QuerySpecifiedAssetAmountReq, opts ...grpc.CallOption) (*StakerAssetInfo, error) {
	out := new(StakerAssetInfo)
	err := c.cc.Invoke(ctx, "/exocore.assets.v1.Query/QueStakerSpecifiedAssetAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueOperatorAssetInfos(ctx context.Context, in *QueryOperatorAssetInfos, opts ...grpc.CallOption) (*QueryOperatorAssetInfosResponse, error) {
	out := new(QueryOperatorAssetInfosResponse)
	err := c.cc.Invoke(ctx, "/exocore.assets.v1.Query/QueOperatorAssetInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueOperatorSpecifiedAssetAmount(ctx context.Context, in *QueryOperatorSpecifiedAssetAmountReq, opts ...grpc.CallOption) (*OperatorAssetInfo, error) {
	out := new(OperatorAssetInfo)
	err := c.cc.Invoke(ctx, "/exocore.assets.v1.Query/QueOperatorSpecifiedAssetAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params retrieves the assets module params
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// ClientChainInfoByIndex queries the client chain info by index.
	QueClientChainInfoByIndex(context.Context, *QueryClientChainInfo) (*ClientChainInfo, error)
	// AllClientChainInfo queries all client chain info.
	QueAllClientChainInfo(context.Context, *QueryAllClientChainInfo) (*QueryAllClientChainInfoResponse, error)
	// StakingAssetInfo queries the staking asset info.
	QueStakingAssetInfo(context.Context, *QueryStakingAssetInfo) (*StakingAssetInfo, error)
	// AllStakingAssetsInfo queries all staking assets info.
	QueAllStakingAssetsInfo(context.Context, *QueryAllStakingAssetsInfo) (*QueryAllStakingAssetsInfoResponse, error)
	// StakerAssetInfos queries the staker asset info.
	QueStakerAssetInfos(context.Context, *QueryStakerAssetInfo) (*QueryAssetInfoResponse, error)
	// StakerSpecifiedAssetAmount queries the staker specified asset amount.
	QueStakerSpecifiedAssetAmount(context.Context, *QuerySpecifiedAssetAmountReq) (*StakerAssetInfo, error)
	// OperatorAssetInfos queries the operator asset info.
	QueOperatorAssetInfos(context.Context, *QueryOperatorAssetInfos) (*QueryOperatorAssetInfosResponse, error)
	// OperatorSpecifiedAssetAmount queries the operator specified asset amount.
	QueOperatorSpecifiedAssetAmount(context.Context, *QueryOperatorSpecifiedAssetAmountReq) (*OperatorAssetInfo, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) QueClientChainInfoByIndex(ctx context.Context, req *QueryClientChainInfo) (*ClientChainInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueClientChainInfoByIndex not implemented")
}
func (*UnimplementedQueryServer) QueAllClientChainInfo(ctx context.Context, req *QueryAllClientChainInfo) (*QueryAllClientChainInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueAllClientChainInfo not implemented")
}
func (*UnimplementedQueryServer) QueStakingAssetInfo(ctx context.Context, req *QueryStakingAssetInfo) (*StakingAssetInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueStakingAssetInfo not implemented")
}
func (*UnimplementedQueryServer) QueAllStakingAssetsInfo(ctx context.Context, req *QueryAllStakingAssetsInfo) (*QueryAllStakingAssetsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueAllStakingAssetsInfo not implemented")
}
func (*UnimplementedQueryServer) QueStakerAssetInfos(ctx context.Context, req *QueryStakerAssetInfo) (*QueryAssetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueStakerAssetInfos not implemented")
}
func (*UnimplementedQueryServer) QueStakerSpecifiedAssetAmount(ctx context.Context, req *QuerySpecifiedAssetAmountReq) (*StakerAssetInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueStakerSpecifiedAssetAmount not implemented")
}
func (*UnimplementedQueryServer) QueOperatorAssetInfos(ctx context.Context, req *QueryOperatorAssetInfos) (*QueryOperatorAssetInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueOperatorAssetInfos not implemented")
}
func (*UnimplementedQueryServer) QueOperatorSpecifiedAssetAmount(ctx context.Context, req *QueryOperatorSpecifiedAssetAmountReq) (*OperatorAssetInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueOperatorSpecifiedAssetAmount not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.assets.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueClientChainInfoByIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClientChainInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueClientChainInfoByIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.assets.v1.Query/QueClientChainInfoByIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueClientChainInfoByIndex(ctx, req.(*QueryClientChainInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueAllClientChainInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllClientChainInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueAllClientChainInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.assets.v1.Query/QueAllClientChainInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueAllClientChainInfo(ctx, req.(*QueryAllClientChainInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueStakingAssetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakingAssetInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueStakingAssetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.assets.v1.Query/QueStakingAssetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueStakingAssetInfo(ctx, req.(*QueryStakingAssetInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueAllStakingAssetsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStakingAssetsInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueAllStakingAssetsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.assets.v1.Query/QueAllStakingAssetsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueAllStakingAssetsInfo(ctx, req.(*QueryAllStakingAssetsInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueStakerAssetInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakerAssetInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueStakerAssetInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.assets.v1.Query/QueStakerAssetInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueStakerAssetInfos(ctx, req.(*QueryStakerAssetInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueStakerSpecifiedAssetAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpecifiedAssetAmountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueStakerSpecifiedAssetAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.assets.v1.Query/QueStakerSpecifiedAssetAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueStakerSpecifiedAssetAmount(ctx, req.(*QuerySpecifiedAssetAmountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueOperatorAssetInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorAssetInfos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueOperatorAssetInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.assets.v1.Query/QueOperatorAssetInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueOperatorAssetInfos(ctx, req.(*QueryOperatorAssetInfos))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueOperatorSpecifiedAssetAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorSpecifiedAssetAmountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueOperatorSpecifiedAssetAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.assets.v1.Query/QueOperatorSpecifiedAssetAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueOperatorSpecifiedAssetAmount(ctx, req.(*QueryOperatorSpecifiedAssetAmountReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "exocore.assets.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "QueClientChainInfoByIndex",
			Handler:    _Query_QueClientChainInfoByIndex_Handler,
		},
		{
			MethodName: "QueAllClientChainInfo",
			Handler:    _Query_QueAllClientChainInfo_Handler,
		},
		{
			MethodName: "QueStakingAssetInfo",
			Handler:    _Query_QueStakingAssetInfo_Handler,
		},
		{
			MethodName: "QueAllStakingAssetsInfo",
			Handler:    _Query_QueAllStakingAssetsInfo_Handler,
		},
		{
			MethodName: "QueStakerAssetInfos",
			Handler:    _Query_QueStakerAssetInfos_Handler,
		},
		{
			MethodName: "QueStakerSpecifiedAssetAmount",
			Handler:    _Query_QueStakerSpecifiedAssetAmount_Handler,
		},
		{
			MethodName: "QueOperatorAssetInfos",
			Handler:    _Query_QueOperatorAssetInfos_Handler,
		},
		{
			MethodName: "QueOperatorSpecifiedAssetAmount",
			Handler:    _Query_QueOperatorSpecifiedAssetAmount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exocore/assets/v1/query.proto",
}

func (m *QueryClientChainInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClientChainInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClientChainInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllClientChainInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllClientChainInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllClientChainInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllClientChainInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllClientChainInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllClientChainInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AllClientChainInfos) > 0 {
		for iNdEx := len(m.AllClientChainInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllClientChainInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakingAssetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakingAssetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakingAssetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetId) > 0 {
		i -= len(m.AssetId)
		copy(dAtA[i:], m.AssetId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AssetId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStakingAssetsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStakingAssetsInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStakingAssetsInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllStakingAssetsInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStakingAssetsInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStakingAssetsInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AllStakingAssetsInfo) > 0 {
		for iNdEx := len(m.AllStakingAssetsInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllStakingAssetsInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakerAssetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakerAssetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakerAssetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakerId) > 0 {
		i -= len(m.StakerId)
		copy(dAtA[i:], m.StakerId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAssetInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssetInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssetInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetInfos) > 0 {
		for iNdEx := len(m.AssetInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AssetInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpecifiedAssetAmountReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpecifiedAssetAmountReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpecifiedAssetAmountReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetId) > 0 {
		i -= len(m.AssetId)
		copy(dAtA[i:], m.AssetId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AssetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StakerId) > 0 {
		i -= len(m.StakerId)
		copy(dAtA[i:], m.StakerId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOperatorAssetInfos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorAssetInfos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorAssetInfos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorAddr) > 0 {
		i -= len(m.OperatorAddr)
		copy(dAtA[i:], m.OperatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OperatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOperatorAssetInfosResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorAssetInfosResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorAssetInfosResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetInfos) > 0 {
		for iNdEx := len(m.AssetInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AssetInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOperatorSpecifiedAssetAmountReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorSpecifiedAssetAmountReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorSpecifiedAssetAmountReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetId) > 0 {
		i -= len(m.AssetId)
		copy(dAtA[i:], m.AssetId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AssetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAddr) > 0 {
		i -= len(m.OperatorAddr)
		copy(dAtA[i:], m.OperatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OperatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakerExCoreAddr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakerExCoreAddr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakerExCoreAddr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Staker) > 0 {
		i -= len(m.Staker)
		copy(dAtA[i:], m.Staker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Staker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakerExCoreAddrResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakerExCoreAddrResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakerExCoreAddrResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExoCoreAddr) > 0 {
		i -= len(m.ExoCoreAddr)
		copy(dAtA[i:], m.ExoCoreAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ExoCoreAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryClientChainInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainIndex != 0 {
		n += 1 + sovQuery(uint64(m.ChainIndex))
	}
	return n
}

func (m *QueryAllClientChainInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllClientChainInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AllClientChainInfos) > 0 {
		for _, e := range m.AllClientChainInfos {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakingAssetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssetId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStakingAssetsInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllStakingAssetsInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AllStakingAssetsInfo) > 0 {
		for _, e := range m.AllStakingAssetsInfo {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryStakerAssetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakerId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAssetInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AssetInfos) > 0 {
		for _, e := range m.AssetInfos {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QuerySpecifiedAssetAmountReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakerId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AssetId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOperatorAssetInfos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOperatorAssetInfosResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AssetInfos) > 0 {
		for _, e := range m.AssetInfos {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryOperatorSpecifiedAssetAmountReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AssetId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakerExCoreAddr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Staker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakerExCoreAddrResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExoCoreAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryClientChainInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClientChainInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClientChainInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainIndex", wireType)
			}
			m.ChainIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllClientChainInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllClientChainInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllClientChainInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllClientChainInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllClientChainInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllClientChainInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllClientChainInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllClientChainInfos = append(m.AllClientChainInfos, &ClientChainInfo{})
			if err := m.AllClientChainInfos[len(m.AllClientChainInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakingAssetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakingAssetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakingAssetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStakingAssetsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStakingAssetsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStakingAssetsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStakingAssetsInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStakingAssetsInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStakingAssetsInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllStakingAssetsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllStakingAssetsInfo = append(m.AllStakingAssetsInfo, StakingAssetInfo{})
			if err := m.AllStakingAssetsInfo[len(m.AllStakingAssetsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakerAssetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakerAssetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakerAssetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssetInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssetInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssetInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetInfos = append(m.AssetInfos, DepositByAsset{})
			if err := m.AssetInfos[len(m.AssetInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpecifiedAssetAmountReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpecifiedAssetAmountReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpecifiedAssetAmountReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorAssetInfos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorAssetInfos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorAssetInfos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorAssetInfosResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorAssetInfosResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorAssetInfosResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetInfos = append(m.AssetInfos, AssetByID{})
			if err := m.AssetInfos[len(m.AssetInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorSpecifiedAssetAmountReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorSpecifiedAssetAmountReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorSpecifiedAssetAmountReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakerExCoreAddr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakerExCoreAddr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakerExCoreAddr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Staker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakerExCoreAddrResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakerExCoreAddrResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakerExCoreAddrResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExoCoreAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExoCoreAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
