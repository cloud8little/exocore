// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exocore/avs/v1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the avs module's state. It needs to encompass
// all of the state that is required to start the chain from the genesis
// or in the event of a restart.
type GenesisState struct {
	// avs_infos is the list of registered avs infos,
	// that are supported at chain genesis (or restart).
	AvsInfos []AVSInfo `protobuf:"bytes,1,rep,name=avs_infos,json=avsInfos,proto3" json:"avs_infos"`
	// task_infos is the tasks issued by avs owner, indexed by
	// task address and task id
	// that are supported at chain genesis (or restart).
	TaskInfos []TaskInfo `protobuf:"bytes,2,rep,name=task_infos,json=taskInfos,proto3" json:"task_infos"`
	// bls_pub_keys is the list of operator pubKey info, indexed by operator address
	// The struct is the `BlsPubKeyInfo`
	// which contains blsPubKey,  operator address.
	BlsPubKeys []BlsPubKeyInfo `protobuf:"bytes,3,rep,name=bls_pub_keys,json=blsPubKeys,proto3" json:"bls_pub_keys"`
	// task_result_infos is the task result  informations, indexed
	// by the operator address ,task address and the task id. The struct is the `TaskResultInfo`
	TaskResultInfos []TaskResultInfo `protobuf:"bytes,4,rep,name=task_result_infos,json=taskResultInfos,proto3" json:"task_result_infos"`
	// challenge_infos is the task challenge  informations, indexed
	// by the operator address ,task address and the task id. The struct is the `ChallengeInfo`
	ChallengeInfos []ChallengeInfo `protobuf:"bytes,5,rep,name=challenge_infos,json=challengeInfos,proto3" json:"challenge_infos"`
	// task_nums is the task id, indexed
	// by the task address. The struct is the `TaskID`
	TaskNums []TaskID `protobuf:"bytes,6,rep,name=task_nums,json=taskNums,proto3" json:"task_nums"`
	// chain_id_infos is the dogfood chain id  informations, indexed
	// by the avs address. The struct is the `ChainIDInfo`
	ChainIdInfos []ChainIDInfo `protobuf:"bytes,7,rep,name=chain_id_infos,json=chainIdInfos,proto3" json:"chain_id_infos"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc32a0542b70c3d1, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetAvsInfos() []AVSInfo {
	if m != nil {
		return m.AvsInfos
	}
	return nil
}

func (m *GenesisState) GetTaskInfos() []TaskInfo {
	if m != nil {
		return m.TaskInfos
	}
	return nil
}

func (m *GenesisState) GetBlsPubKeys() []BlsPubKeyInfo {
	if m != nil {
		return m.BlsPubKeys
	}
	return nil
}

func (m *GenesisState) GetTaskResultInfos() []TaskResultInfo {
	if m != nil {
		return m.TaskResultInfos
	}
	return nil
}

func (m *GenesisState) GetChallengeInfos() []ChallengeInfo {
	if m != nil {
		return m.ChallengeInfos
	}
	return nil
}

func (m *GenesisState) GetTaskNums() []TaskID {
	if m != nil {
		return m.TaskNums
	}
	return nil
}

func (m *GenesisState) GetChainIdInfos() []ChainIDInfo {
	if m != nil {
		return m.ChainIdInfos
	}
	return nil
}

// TaskID is helper structure to store the task id information for the genesis state.
type TaskID struct {
	// task_address is the address of task as a hex string
	TaskAddress string `protobuf:"bytes,1,opt,name=task_address,json=taskAddress,proto3" json:"task_address,omitempty"`
	// id of task.
	TaskId uint64 `protobuf:"varint,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (m *TaskID) Reset()         { *m = TaskID{} }
func (m *TaskID) String() string { return proto.CompactTextString(m) }
func (*TaskID) ProtoMessage()    {}
func (*TaskID) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc32a0542b70c3d1, []int{1}
}
func (m *TaskID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TaskID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TaskID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TaskID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskID.Merge(m, src)
}
func (m *TaskID) XXX_Size() int {
	return m.Size()
}
func (m *TaskID) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskID.DiscardUnknown(m)
}

var xxx_messageInfo_TaskID proto.InternalMessageInfo

func (m *TaskID) GetTaskAddress() string {
	if m != nil {
		return m.TaskAddress
	}
	return ""
}

func (m *TaskID) GetTaskId() uint64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

// ChallengeInfo is helper structure to store the task challenge information for the genesis state.
type ChallengeInfo struct {
	// key is used for storing the ChallengeInfos,
	// which is a combination of the operator address ,task address and task id.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// challenge_address is the address of the challenger
	ChallengeAddress string `protobuf:"bytes,2,opt,name=challenge_address,json=challengeAddress,proto3" json:"challenge_address,omitempty"`
}

func (m *ChallengeInfo) Reset()         { *m = ChallengeInfo{} }
func (m *ChallengeInfo) String() string { return proto.CompactTextString(m) }
func (*ChallengeInfo) ProtoMessage()    {}
func (*ChallengeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc32a0542b70c3d1, []int{2}
}
func (m *ChallengeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChallengeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChallengeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChallengeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChallengeInfo.Merge(m, src)
}
func (m *ChallengeInfo) XXX_Size() int {
	return m.Size()
}
func (m *ChallengeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChallengeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChallengeInfo proto.InternalMessageInfo

func (m *ChallengeInfo) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ChallengeInfo) GetChallengeAddress() string {
	if m != nil {
		return m.ChallengeAddress
	}
	return ""
}

// ChainIDInfo is helper structure to store the dogfood ChainID information for the genesis state.
type ChainIDInfo struct {
	// avs_address is the address of avs as a hex string.
	AvsAddress string `protobuf:"bytes,1,opt,name=avs_address,json=avsAddress,proto3" json:"avs_address,omitempty"`
	// chain_id is an optional parameter to specify the chain_id of the AVS, if any
	ChainId string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *ChainIDInfo) Reset()         { *m = ChainIDInfo{} }
func (m *ChainIDInfo) String() string { return proto.CompactTextString(m) }
func (*ChainIDInfo) ProtoMessage()    {}
func (*ChainIDInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc32a0542b70c3d1, []int{3}
}
func (m *ChainIDInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainIDInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainIDInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainIDInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainIDInfo.Merge(m, src)
}
func (m *ChainIDInfo) XXX_Size() int {
	return m.Size()
}
func (m *ChainIDInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainIDInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChainIDInfo proto.InternalMessageInfo

func (m *ChainIDInfo) GetAvsAddress() string {
	if m != nil {
		return m.AvsAddress
	}
	return ""
}

func (m *ChainIDInfo) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "exocore.avs.v1.GenesisState")
	proto.RegisterType((*TaskID)(nil), "exocore.avs.v1.TaskID")
	proto.RegisterType((*ChallengeInfo)(nil), "exocore.avs.v1.ChallengeInfo")
	proto.RegisterType((*ChainIDInfo)(nil), "exocore.avs.v1.ChainIDInfo")
}

func init() { proto.RegisterFile("exocore/avs/v1/genesis.proto", fileDescriptor_cc32a0542b70c3d1) }

var fileDescriptor_cc32a0542b70c3d1 = []byte{
	// 493 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0xcf, 0x6e, 0xd3, 0x4c,
	0x10, 0xc0, 0xe3, 0x24, 0x5f, 0xd2, 0x4c, 0xf2, 0xf5, 0xcf, 0x0a, 0x11, 0x53, 0xc0, 0x2d, 0x39,
	0x45, 0x42, 0xd8, 0x2a, 0x9c, 0x40, 0xe2, 0xd0, 0x90, 0x2a, 0x8a, 0x40, 0x51, 0x95, 0x22, 0x0e,
	0x5c, 0xac, 0x75, 0xbc, 0x75, 0x2d, 0x3b, 0xde, 0xc8, 0xb3, 0x36, 0xc9, 0x5b, 0xf0, 0x58, 0x3d,
	0xf6, 0xc8, 0x09, 0xa1, 0xe4, 0x15, 0x78, 0x00, 0xe4, 0xf5, 0x1a, 0x9c, 0x28, 0xb7, 0xf5, 0xec,
	0xcc, 0x6f, 0x7e, 0x3b, 0xeb, 0x85, 0x67, 0x6c, 0xc9, 0x67, 0x3c, 0x66, 0x16, 0x4d, 0xd1, 0x4a,
	0x2f, 0x2c, 0x8f, 0x45, 0x0c, 0x7d, 0x34, 0x17, 0x31, 0x17, 0x9c, 0x1c, 0xaa, 0x5d, 0x93, 0xa6,
	0x68, 0xa6, 0x17, 0xa7, 0xdd, 0x9d, 0x6c, 0xb1, 0xcc, 0x13, 0x4f, 0x1f, 0x79, 0xdc, 0xe3, 0x72,
	0x69, 0x65, 0xab, 0x3c, 0xda, 0xfb, 0x5d, 0x83, 0xce, 0x28, 0x07, 0xde, 0x08, 0x2a, 0x18, 0x79,
	0x07, 0x2d, 0x9a, 0xa2, 0xed, 0x47, 0xb7, 0x1c, 0x75, 0xed, 0xbc, 0xd6, 0x6f, 0xbf, 0xee, 0x9a,
	0xdb, 0x3d, 0xcc, 0xcb, 0x2f, 0x37, 0xe3, 0xe8, 0x96, 0x0f, 0xea, 0xf7, 0x3f, 0xcf, 0x2a, 0xd3,
	0x03, 0x9a, 0x62, 0xf6, 0x89, 0xe4, 0x3d, 0x80, 0xa0, 0x18, 0xa8, 0xe2, 0xaa, 0x2c, 0xd6, 0x77,
	0x8b, 0x3f, 0x53, 0x0c, 0x4a, 0xd5, 0x2d, 0xa1, 0xbe, 0x91, 0x5c, 0x41, 0xc7, 0x09, 0xd1, 0x5e,
	0x24, 0x8e, 0x1d, 0xb0, 0x15, 0xea, 0x35, 0x09, 0x78, 0xbe, 0x0b, 0x18, 0x84, 0x78, 0x9d, 0x38,
	0x1f, 0xd9, 0xaa, 0x44, 0x01, 0xa7, 0x08, 0x22, 0xb9, 0x86, 0x13, 0x69, 0x11, 0x33, 0x4c, 0x42,
	0xa1, 0x64, 0xea, 0x92, 0x65, 0xec, 0x93, 0x99, 0xca, 0xbc, 0x12, 0xec, 0x48, 0x6c, 0x45, 0x91,
	0x7c, 0x82, 0xa3, 0xd9, 0x1d, 0x0d, 0x43, 0x16, 0x79, 0x4c, 0xf1, 0xfe, 0xdb, 0xef, 0xf6, 0xa1,
	0x48, 0x2b, 0xe1, 0x0e, 0x67, 0xe5, 0x20, 0x92, 0xb7, 0x20, 0xcf, 0x6c, 0x47, 0xc9, 0x1c, 0xf5,
	0x86, 0xe4, 0x3c, 0xde, 0x3b, 0xa4, 0x61, 0x31, 0xe0, 0x2c, 0x7d, 0x92, 0xcc, 0x91, 0x8c, 0x20,
	0x83, 0xf9, 0x91, 0xed, 0xbb, 0xca, 0xa3, 0x29, 0xeb, 0x9f, 0xee, 0xf1, 0xf0, 0xa3, 0xf1, 0xb0,
	0x64, 0xd1, 0x91, 0x85, 0x63, 0x57, 0x3a, 0xf4, 0x86, 0xd0, 0xc8, 0x5b, 0x90, 0x17, 0xd0, 0x91,
	0x36, 0xd4, 0x75, 0x63, 0x86, 0xd9, 0x95, 0x6b, 0xfd, 0xd6, 0xb4, 0x9d, 0xc5, 0x2e, 0xf3, 0x10,
	0xe9, 0x42, 0x33, 0xbf, 0x56, 0x57, 0xaf, 0x9e, 0x6b, 0xfd, 0xfa, 0xb4, 0x21, 0xef, 0xcc, 0xed,
	0x4d, 0xe0, 0xff, 0xad, 0x03, 0x93, 0x63, 0xa8, 0x05, 0x6c, 0xa5, 0x18, 0xd9, 0x92, 0xbc, 0x84,
	0x93, 0x7f, 0xa3, 0x2b, 0x7a, 0x54, 0xe5, 0xfe, 0xf1, 0xdf, 0x0d, 0xd5, 0xa8, 0x37, 0x86, 0x76,
	0x49, 0x9c, 0x9c, 0x41, 0x3b, 0xfb, 0x15, 0xb7, 0xcd, 0x80, 0xa6, 0x58, 0x88, 0x3d, 0x81, 0x83,
	0x62, 0x1c, 0x8a, 0xd9, 0x54, 0xa7, 0x1c, 0x8c, 0xee, 0xd7, 0x86, 0xf6, 0xb0, 0x36, 0xb4, 0x5f,
	0x6b, 0x43, 0xfb, 0xbe, 0x31, 0x2a, 0x0f, 0x1b, 0xa3, 0xf2, 0x63, 0x63, 0x54, 0xbe, 0xbe, 0xf2,
	0x7c, 0x71, 0x97, 0x38, 0xe6, 0x8c, 0xcf, 0xad, 0xab, 0x7c, 0x6a, 0x13, 0x26, 0xbe, 0xf1, 0x38,
	0xb0, 0x8a, 0xa7, 0xb3, 0x94, 0x8f, 0x47, 0xac, 0x16, 0x0c, 0x9d, 0x86, 0x7c, 0x27, 0x6f, 0xfe,
	0x04, 0x00, 0x00, 0xff, 0xff, 0x97, 0x72, 0xf1, 0x07, 0x86, 0x03, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainIdInfos) > 0 {
		for iNdEx := len(m.ChainIdInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChainIdInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.TaskNums) > 0 {
		for iNdEx := len(m.TaskNums) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TaskNums[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ChallengeInfos) > 0 {
		for iNdEx := len(m.ChallengeInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChallengeInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.TaskResultInfos) > 0 {
		for iNdEx := len(m.TaskResultInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TaskResultInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.BlsPubKeys) > 0 {
		for iNdEx := len(m.BlsPubKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlsPubKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TaskInfos) > 0 {
		for iNdEx := len(m.TaskInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TaskInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.AvsInfos) > 0 {
		for iNdEx := len(m.AvsInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AvsInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TaskID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TaskID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TaskId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.TaskId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TaskAddress) > 0 {
		i -= len(m.TaskAddress)
		copy(dAtA[i:], m.TaskAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.TaskAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChallengeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChallengeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChallengeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChallengeAddress) > 0 {
		i -= len(m.ChallengeAddress)
		copy(dAtA[i:], m.ChallengeAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ChallengeAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChainIDInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainIDInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainIDInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AvsAddress) > 0 {
		i -= len(m.AvsAddress)
		copy(dAtA[i:], m.AvsAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.AvsAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AvsInfos) > 0 {
		for _, e := range m.AvsInfos {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.TaskInfos) > 0 {
		for _, e := range m.TaskInfos {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BlsPubKeys) > 0 {
		for _, e := range m.BlsPubKeys {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.TaskResultInfos) > 0 {
		for _, e := range m.TaskResultInfos {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ChallengeInfos) > 0 {
		for _, e := range m.ChallengeInfos {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.TaskNums) > 0 {
		for _, e := range m.TaskNums {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ChainIdInfos) > 0 {
		for _, e := range m.ChainIdInfos {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *TaskID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TaskAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.TaskId != 0 {
		n += 1 + sovGenesis(uint64(m.TaskId))
	}
	return n
}

func (m *ChallengeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.ChallengeAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *ChainIDInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AvsAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvsInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvsInfos = append(m.AvsInfos, AVSInfo{})
			if err := m.AvsInfos[len(m.AvsInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskInfos = append(m.TaskInfos, TaskInfo{})
			if err := m.TaskInfos[len(m.TaskInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlsPubKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlsPubKeys = append(m.BlsPubKeys, BlsPubKeyInfo{})
			if err := m.BlsPubKeys[len(m.BlsPubKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskResultInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskResultInfos = append(m.TaskResultInfos, TaskResultInfo{})
			if err := m.TaskResultInfos[len(m.TaskResultInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeInfos = append(m.ChallengeInfos, ChallengeInfo{})
			if err := m.ChallengeInfos[len(m.ChallengeInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskNums", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskNums = append(m.TaskNums, TaskID{})
			if err := m.TaskNums[len(m.TaskNums)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainIdInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainIdInfos = append(m.ChainIdInfos, ChainIDInfo{})
			if err := m.ChainIdInfos[len(m.ChainIdInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChallengeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChallengeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChallengeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainIDInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainIDInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainIDInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvsAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvsAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
