// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exocore/operator/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	crypto "github.com/cometbft/cometbft/proto/tendermint/crypto"
	_ "github.com/cosmos/cosmos-proto"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryOperatorInfoReq is the request to obtain the operator information.
type GetOperatorInfoReq struct {
	// operator_addr is the operator address,its type should be a sdk.AccAddress
	OperatorAddr string `protobuf:"bytes,1,opt,name=operator_addr,json=operatorAddr,proto3" json:"operator_addr,omitempty"`
}

func (m *GetOperatorInfoReq) Reset()         { *m = GetOperatorInfoReq{} }
func (m *GetOperatorInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetOperatorInfoReq) ProtoMessage()    {}
func (*GetOperatorInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{0}
}
func (m *GetOperatorInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOperatorInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOperatorInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOperatorInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOperatorInfoReq.Merge(m, src)
}
func (m *GetOperatorInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *GetOperatorInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOperatorInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetOperatorInfoReq proto.InternalMessageInfo

func (m *GetOperatorInfoReq) GetOperatorAddr() string {
	if m != nil {
		return m.OperatorAddr
	}
	return ""
}

// QueryAllOperatorsRequest is the request to obtain all operators.
type QueryAllOperatorsRequest struct {
	// pagination related options.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOperatorsRequest) Reset()         { *m = QueryAllOperatorsRequest{} }
func (m *QueryAllOperatorsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllOperatorsRequest) ProtoMessage()    {}
func (*QueryAllOperatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{1}
}
func (m *QueryAllOperatorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOperatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOperatorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOperatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOperatorsRequest.Merge(m, src)
}
func (m *QueryAllOperatorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOperatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOperatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOperatorsRequest proto.InternalMessageInfo

func (m *QueryAllOperatorsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllOperatorsResponse is the response containing all operator account addresses.
type QueryAllOperatorsResponse struct {
	// operators is a list of all operators.
	OperatorAccAddrs []string `protobuf:"bytes,1,rep,name=operator_acc_addrs,json=operatorAccAddrs,proto3" json:"operator_acc_addrs,omitempty"`
	// pagination related response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOperatorsResponse) Reset()         { *m = QueryAllOperatorsResponse{} }
func (m *QueryAllOperatorsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllOperatorsResponse) ProtoMessage()    {}
func (*QueryAllOperatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{2}
}
func (m *QueryAllOperatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOperatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOperatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOperatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOperatorsResponse.Merge(m, src)
}
func (m *QueryAllOperatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOperatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOperatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOperatorsResponse proto.InternalMessageInfo

func (m *QueryAllOperatorsResponse) GetOperatorAccAddrs() []string {
	if m != nil {
		return m.OperatorAccAddrs
	}
	return nil
}

func (m *QueryAllOperatorsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// OperatorAVSAddress includes the address of operator and AVS
type OperatorAVSAddress struct {
	// operator_addr should be the string type of sdk.AccAddress
	OperatorAddr string `protobuf:"bytes,1,opt,name=operator_addr,json=operatorAddr,proto3" json:"operator_addr,omitempty"`
	// avs_address is the address of the AVS - either an 0x address or a chainID.
	AvsAddress string `protobuf:"bytes,2,opt,name=avs_address,json=avsAddress,proto3" json:"avs_address,omitempty"`
}

func (m *OperatorAVSAddress) Reset()         { *m = OperatorAVSAddress{} }
func (m *OperatorAVSAddress) String() string { return proto.CompactTextString(m) }
func (*OperatorAVSAddress) ProtoMessage()    {}
func (*OperatorAVSAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{3}
}
func (m *OperatorAVSAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorAVSAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorAVSAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorAVSAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorAVSAddress.Merge(m, src)
}
func (m *OperatorAVSAddress) XXX_Size() int {
	return m.Size()
}
func (m *OperatorAVSAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorAVSAddress.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorAVSAddress proto.InternalMessageInfo

func (m *OperatorAVSAddress) GetOperatorAddr() string {
	if m != nil {
		return m.OperatorAddr
	}
	return ""
}

func (m *OperatorAVSAddress) GetAvsAddress() string {
	if m != nil {
		return m.AvsAddress
	}
	return ""
}

// QueryOperatorUSDValueRequest is the request to obtain the USD value for operator.
type QueryOperatorUSDValueRequest struct {
	// operator_and_avs is the operator and AVS address
	*OperatorAVSAddress `protobuf:"bytes,1,opt,name=operator_and_avs,json=operatorAndAvs,proto3,embedded=operator_and_avs" json:"operator_and_avs,omitempty"`
}

func (m *QueryOperatorUSDValueRequest) Reset()         { *m = QueryOperatorUSDValueRequest{} }
func (m *QueryOperatorUSDValueRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorUSDValueRequest) ProtoMessage()    {}
func (*QueryOperatorUSDValueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{4}
}
func (m *QueryOperatorUSDValueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorUSDValueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorUSDValueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorUSDValueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorUSDValueRequest.Merge(m, src)
}
func (m *QueryOperatorUSDValueRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorUSDValueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorUSDValueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorUSDValueRequest proto.InternalMessageInfo

// QueryOperatorUSDValueResponse is the response to obtain the USD value for operator.
type QueryOperatorUSDValueResponse struct {
	// usd_info includes the self and total staking for the operator and AVS
	USDValues *OperatorOptedUSDValue `protobuf:"bytes,1,opt,name=usd_values,json=usdValues,proto3" json:"usd_values,omitempty"`
}

func (m *QueryOperatorUSDValueResponse) Reset()         { *m = QueryOperatorUSDValueResponse{} }
func (m *QueryOperatorUSDValueResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorUSDValueResponse) ProtoMessage()    {}
func (*QueryOperatorUSDValueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{5}
}
func (m *QueryOperatorUSDValueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorUSDValueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorUSDValueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorUSDValueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorUSDValueResponse.Merge(m, src)
}
func (m *QueryOperatorUSDValueResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorUSDValueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorUSDValueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorUSDValueResponse proto.InternalMessageInfo

func (m *QueryOperatorUSDValueResponse) GetUSDValues() *OperatorOptedUSDValue {
	if m != nil {
		return m.USDValues
	}
	return nil
}

// QueryAVSUSDValueRequest is the request to obtain the USD value for AVS.
type QueryAVSUSDValueRequest struct {
	// avs_address is the AVS address opted-in by the operator
	AVSAddress string `protobuf:"bytes,1,opt,name=avs_address,json=avsAddress,proto3" json:"avs_address,omitempty"`
}

func (m *QueryAVSUSDValueRequest) Reset()         { *m = QueryAVSUSDValueRequest{} }
func (m *QueryAVSUSDValueRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAVSUSDValueRequest) ProtoMessage()    {}
func (*QueryAVSUSDValueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{6}
}
func (m *QueryAVSUSDValueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAVSUSDValueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAVSUSDValueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAVSUSDValueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAVSUSDValueRequest.Merge(m, src)
}
func (m *QueryAVSUSDValueRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAVSUSDValueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAVSUSDValueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAVSUSDValueRequest proto.InternalMessageInfo

func (m *QueryAVSUSDValueRequest) GetAVSAddress() string {
	if m != nil {
		return m.AVSAddress
	}
	return ""
}

// QueryOperatorSlashInfoRequest is the request to obtain the slash information for the specified
// operator and AVS
type QueryOperatorSlashInfoRequest struct {
	// operator_and_avs is the operator and AVS address
	*OperatorAVSAddress `protobuf:"bytes,1,opt,name=operator_and_avs,json=operatorAndAvs,proto3,embedded=operator_and_avs" json:"operator_and_avs,omitempty"`
	// pagination related options.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryOperatorSlashInfoRequest) Reset()         { *m = QueryOperatorSlashInfoRequest{} }
func (m *QueryOperatorSlashInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorSlashInfoRequest) ProtoMessage()    {}
func (*QueryOperatorSlashInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{7}
}
func (m *QueryOperatorSlashInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorSlashInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorSlashInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorSlashInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorSlashInfoRequest.Merge(m, src)
}
func (m *QueryOperatorSlashInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorSlashInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorSlashInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorSlashInfoRequest proto.InternalMessageInfo

func (m *QueryOperatorSlashInfoRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// OperatorSlashInfoByID includes the slash information and the slashID
type OperatorSlashInfoByID struct {
	// slash_id is stored as the key of the slash information,
	// so it will be parsed and padding here.
	SlashID string `protobuf:"bytes,1,opt,name=slash_id,json=slashId,proto3" json:"slash_id,omitempty"`
	// info is the specified detailed information for the slashing event.
	Info *OperatorSlashInfo `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *OperatorSlashInfoByID) Reset()         { *m = OperatorSlashInfoByID{} }
func (m *OperatorSlashInfoByID) String() string { return proto.CompactTextString(m) }
func (*OperatorSlashInfoByID) ProtoMessage()    {}
func (*OperatorSlashInfoByID) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{8}
}
func (m *OperatorSlashInfoByID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorSlashInfoByID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorSlashInfoByID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorSlashInfoByID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorSlashInfoByID.Merge(m, src)
}
func (m *OperatorSlashInfoByID) XXX_Size() int {
	return m.Size()
}
func (m *OperatorSlashInfoByID) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorSlashInfoByID.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorSlashInfoByID proto.InternalMessageInfo

func (m *OperatorSlashInfoByID) GetSlashID() string {
	if m != nil {
		return m.SlashID
	}
	return ""
}

func (m *OperatorSlashInfoByID) GetInfo() *OperatorSlashInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

// QueryOperatorSlashInfoResponse is the response for GetOperatorSlashInfoRequest
type QueryOperatorSlashInfoResponse struct {
	// all_slash_info is a list of the slash information for the specified operator and AVS
	AllSlashInfo []*OperatorSlashInfoByID `protobuf:"bytes,1,rep,name=all_slash_info,json=allSlashInfo,proto3" json:"all_slash_info,omitempty"`
	// pagination related response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryOperatorSlashInfoResponse) Reset()         { *m = QueryOperatorSlashInfoResponse{} }
func (m *QueryOperatorSlashInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorSlashInfoResponse) ProtoMessage()    {}
func (*QueryOperatorSlashInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{9}
}
func (m *QueryOperatorSlashInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorSlashInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorSlashInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorSlashInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorSlashInfoResponse.Merge(m, src)
}
func (m *QueryOperatorSlashInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorSlashInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorSlashInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorSlashInfoResponse proto.InternalMessageInfo

func (m *QueryOperatorSlashInfoResponse) GetAllSlashInfo() []*OperatorSlashInfoByID {
	if m != nil {
		return m.AllSlashInfo
	}
	return nil
}

func (m *QueryOperatorSlashInfoResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryOperatorConsKeyRequest is the request to obtain the consensus public key of the operator
type QueryOperatorConsKeyRequest struct {
	// operator_acc_addr is the operator account address.
	OperatorAccAddr string `protobuf:"bytes,1,opt,name=operator_acc_addr,json=operatorAccAddr,proto3" json:"operator_acc_addr,omitempty"`
	// chain is the id of the chain served by the operator. here chain_id is not used since the
	// Linter complains about capitalization, which can be set with a gogoproto.custom_name but
	// that is not compatible with google.api.http.get in the Query service below.
	Chain string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
}

func (m *QueryOperatorConsKeyRequest) Reset()         { *m = QueryOperatorConsKeyRequest{} }
func (m *QueryOperatorConsKeyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorConsKeyRequest) ProtoMessage()    {}
func (*QueryOperatorConsKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{10}
}
func (m *QueryOperatorConsKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorConsKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorConsKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorConsKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorConsKeyRequest.Merge(m, src)
}
func (m *QueryOperatorConsKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorConsKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorConsKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorConsKeyRequest proto.InternalMessageInfo

func (m *QueryOperatorConsKeyRequest) GetOperatorAccAddr() string {
	if m != nil {
		return m.OperatorAccAddr
	}
	return ""
}

func (m *QueryOperatorConsKeyRequest) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

// QueryOperatorConsKeyResponse is the response for QueryOperatorConsKeyRequest.
type QueryOperatorConsKeyResponse struct {
	// public_key is the consensus public key of the operator.
	PublicKey crypto.PublicKey `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key"`
	// opting_out is a flag to indicate if the operator is opting out of consensus.
	OptingOut bool `protobuf:"varint,2,opt,name=opting_out,json=optingOut,proto3" json:"opting_out,omitempty"`
}

func (m *QueryOperatorConsKeyResponse) Reset()         { *m = QueryOperatorConsKeyResponse{} }
func (m *QueryOperatorConsKeyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorConsKeyResponse) ProtoMessage()    {}
func (*QueryOperatorConsKeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{11}
}
func (m *QueryOperatorConsKeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorConsKeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorConsKeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorConsKeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorConsKeyResponse.Merge(m, src)
}
func (m *QueryOperatorConsKeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorConsKeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorConsKeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorConsKeyResponse proto.InternalMessageInfo

func (m *QueryOperatorConsKeyResponse) GetPublicKey() crypto.PublicKey {
	if m != nil {
		return m.PublicKey
	}
	return crypto.PublicKey{}
}

func (m *QueryOperatorConsKeyResponse) GetOptingOut() bool {
	if m != nil {
		return m.OptingOut
	}
	return false
}

// QueryOperatorConsAddressRequest is the request to obtain the consensus address of the operator
// for a specific chain ID.
type QueryOperatorConsAddressRequest struct {
	// operator_acc_addr is the operator account address.
	OperatorAccAddr string `protobuf:"bytes,1,opt,name=operator_acc_addr,json=operatorAccAddr,proto3" json:"operator_acc_addr,omitempty"`
	// chain is the id of the chain served by the operator. here chain_id is not used since the
	// Linter complains about capitalization, which can be set with a gogoproto.custom_name but
	// that is not compatible with google.api.http.get in the Query service below.
	Chain string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
}

func (m *QueryOperatorConsAddressRequest) Reset()         { *m = QueryOperatorConsAddressRequest{} }
func (m *QueryOperatorConsAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorConsAddressRequest) ProtoMessage()    {}
func (*QueryOperatorConsAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{12}
}
func (m *QueryOperatorConsAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorConsAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorConsAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorConsAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorConsAddressRequest.Merge(m, src)
}
func (m *QueryOperatorConsAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorConsAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorConsAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorConsAddressRequest proto.InternalMessageInfo

func (m *QueryOperatorConsAddressRequest) GetOperatorAccAddr() string {
	if m != nil {
		return m.OperatorAccAddr
	}
	return ""
}

func (m *QueryOperatorConsAddressRequest) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

// QueryOperatorConsAddressResponse is the response for QueryOperatorConsAddressRequest.
type QueryOperatorConsAddressResponse struct {
	// cons_addr is the consensus address corresponding to the consensus public key
	// currently in use by the operator.
	ConsAddr string `protobuf:"bytes,1,opt,name=cons_addr,json=consAddr,proto3" json:"cons_addr,omitempty"`
	// opting_out is a flag to indicate if the operator is opting out of consensus.
	OptingOut bool `protobuf:"varint,2,opt,name=opting_out,json=optingOut,proto3" json:"opting_out,omitempty"`
}

func (m *QueryOperatorConsAddressResponse) Reset()         { *m = QueryOperatorConsAddressResponse{} }
func (m *QueryOperatorConsAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorConsAddressResponse) ProtoMessage()    {}
func (*QueryOperatorConsAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{13}
}
func (m *QueryOperatorConsAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorConsAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorConsAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorConsAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorConsAddressResponse.Merge(m, src)
}
func (m *QueryOperatorConsAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorConsAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorConsAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorConsAddressResponse proto.InternalMessageInfo

func (m *QueryOperatorConsAddressResponse) GetConsAddr() string {
	if m != nil {
		return m.ConsAddr
	}
	return ""
}

func (m *QueryOperatorConsAddressResponse) GetOptingOut() bool {
	if m != nil {
		return m.OptingOut
	}
	return false
}

// QueryAllOperatorConsKeysByChainIDRequest is the request to obtain all operator addresses
// and consensus keys for a specific chain ID, with pagination.
type QueryAllOperatorConsKeysByChainIDRequest struct {
	// chain for which the cons keys are being queried. here chain_id is not used since the
	// Linter complains about capitalization, which can be set with a gogoproto.custom_name but
	// that is not compatible with google.api.http.get in the Query service below.
	Chain string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	// pagination related options.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOperatorConsKeysByChainIDRequest) Reset() {
	*m = QueryAllOperatorConsKeysByChainIDRequest{}
}
func (m *QueryAllOperatorConsKeysByChainIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllOperatorConsKeysByChainIDRequest) ProtoMessage()    {}
func (*QueryAllOperatorConsKeysByChainIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{14}
}
func (m *QueryAllOperatorConsKeysByChainIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOperatorConsKeysByChainIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOperatorConsKeysByChainIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOperatorConsKeysByChainIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOperatorConsKeysByChainIDRequest.Merge(m, src)
}
func (m *QueryAllOperatorConsKeysByChainIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOperatorConsKeysByChainIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOperatorConsKeysByChainIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOperatorConsKeysByChainIDRequest proto.InternalMessageInfo

func (m *QueryAllOperatorConsKeysByChainIDRequest) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *QueryAllOperatorConsKeysByChainIDRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllOperatorConsKeysByChainIDResponse is the response that includes a list of all operators
// and their consensus keys for a specified chain ID.
type QueryAllOperatorConsKeysByChainIDResponse struct {
	// operator_cons_keys is a list of operator addresses and their consensus public keys.
	OperatorConsKeys []*OperatorConsKeyPair `protobuf:"bytes,1,rep,name=operator_cons_keys,json=operatorConsKeys,proto3" json:"operator_cons_keys,omitempty"`
	// pagination related response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOperatorConsKeysByChainIDResponse) Reset() {
	*m = QueryAllOperatorConsKeysByChainIDResponse{}
}
func (m *QueryAllOperatorConsKeysByChainIDResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllOperatorConsKeysByChainIDResponse) ProtoMessage() {}
func (*QueryAllOperatorConsKeysByChainIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{15}
}
func (m *QueryAllOperatorConsKeysByChainIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOperatorConsKeysByChainIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOperatorConsKeysByChainIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOperatorConsKeysByChainIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOperatorConsKeysByChainIDResponse.Merge(m, src)
}
func (m *QueryAllOperatorConsKeysByChainIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOperatorConsKeysByChainIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOperatorConsKeysByChainIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOperatorConsKeysByChainIDResponse proto.InternalMessageInfo

func (m *QueryAllOperatorConsKeysByChainIDResponse) GetOperatorConsKeys() []*OperatorConsKeyPair {
	if m != nil {
		return m.OperatorConsKeys
	}
	return nil
}

func (m *QueryAllOperatorConsKeysByChainIDResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// OperatorConsKeyPair holds the operator address and the consensus public key currently in
// use by the operator.
type OperatorConsKeyPair struct {
	// operator_acc_addr is the operator account address.
	OperatorAccAddr string `protobuf:"bytes,1,opt,name=operator_acc_addr,json=operatorAccAddr,proto3" json:"operator_acc_addr,omitempty"`
	// public_key is the consensus public key of the operator.
	PublicKey *crypto.PublicKey `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// opting_out is a flag to indicate if the operator is opting out of consensus.
	OptingOut bool `protobuf:"varint,3,opt,name=opting_out,json=optingOut,proto3" json:"opting_out,omitempty"`
}

func (m *OperatorConsKeyPair) Reset()         { *m = OperatorConsKeyPair{} }
func (m *OperatorConsKeyPair) String() string { return proto.CompactTextString(m) }
func (*OperatorConsKeyPair) ProtoMessage()    {}
func (*OperatorConsKeyPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{16}
}
func (m *OperatorConsKeyPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorConsKeyPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorConsKeyPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorConsKeyPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorConsKeyPair.Merge(m, src)
}
func (m *OperatorConsKeyPair) XXX_Size() int {
	return m.Size()
}
func (m *OperatorConsKeyPair) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorConsKeyPair.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorConsKeyPair proto.InternalMessageInfo

func (m *OperatorConsKeyPair) GetOperatorAccAddr() string {
	if m != nil {
		return m.OperatorAccAddr
	}
	return ""
}

func (m *OperatorConsKeyPair) GetPublicKey() *crypto.PublicKey {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *OperatorConsKeyPair) GetOptingOut() bool {
	if m != nil {
		return m.OptingOut
	}
	return false
}

// QueryAllOperatorConsAddrsByChainIDRequest is the request to obtain all operator addresses
// and consensus addresses for a specific chain ID, with pagination.
type QueryAllOperatorConsAddrsByChainIDRequest struct {
	// chain for which the cons addrs are being queried. here chain_id is not used since the
	// Linter complains about capitalization, which can be set with a gogoproto.custom_name but
	// that is not compatible with google.api.http.get in the Query service below.
	Chain string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	// pagination related options.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOperatorConsAddrsByChainIDRequest) Reset() {
	*m = QueryAllOperatorConsAddrsByChainIDRequest{}
}
func (m *QueryAllOperatorConsAddrsByChainIDRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllOperatorConsAddrsByChainIDRequest) ProtoMessage() {}
func (*QueryAllOperatorConsAddrsByChainIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{17}
}
func (m *QueryAllOperatorConsAddrsByChainIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOperatorConsAddrsByChainIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOperatorConsAddrsByChainIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOperatorConsAddrsByChainIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOperatorConsAddrsByChainIDRequest.Merge(m, src)
}
func (m *QueryAllOperatorConsAddrsByChainIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOperatorConsAddrsByChainIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOperatorConsAddrsByChainIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOperatorConsAddrsByChainIDRequest proto.InternalMessageInfo

func (m *QueryAllOperatorConsAddrsByChainIDRequest) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *QueryAllOperatorConsAddrsByChainIDRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllOperatorConsAddrsByChainIDResponse is the response that includes a list of all operators
// and their consensus addresses for a specified chain ID.
type QueryAllOperatorConsAddrsByChainIDResponse struct {
	// operator_cons_addrs is a list of operator account addresses and the consensus addresses.
	OperatorConsAddrs []*OperatorConsAddrPair `protobuf:"bytes,1,rep,name=operator_cons_addrs,json=operatorConsAddrs,proto3" json:"operator_cons_addrs,omitempty"`
	// pagination related response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllOperatorConsAddrsByChainIDResponse) Reset() {
	*m = QueryAllOperatorConsAddrsByChainIDResponse{}
}
func (m *QueryAllOperatorConsAddrsByChainIDResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllOperatorConsAddrsByChainIDResponse) ProtoMessage() {}
func (*QueryAllOperatorConsAddrsByChainIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{18}
}
func (m *QueryAllOperatorConsAddrsByChainIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOperatorConsAddrsByChainIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOperatorConsAddrsByChainIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOperatorConsAddrsByChainIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOperatorConsAddrsByChainIDResponse.Merge(m, src)
}
func (m *QueryAllOperatorConsAddrsByChainIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOperatorConsAddrsByChainIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOperatorConsAddrsByChainIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOperatorConsAddrsByChainIDResponse proto.InternalMessageInfo

func (m *QueryAllOperatorConsAddrsByChainIDResponse) GetOperatorConsAddrs() []*OperatorConsAddrPair {
	if m != nil {
		return m.OperatorConsAddrs
	}
	return nil
}

func (m *QueryAllOperatorConsAddrsByChainIDResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// OperatorConsAddrPair holds the operator address and the corresponding consensus address.
type OperatorConsAddrPair struct {
	// operator_acc_addr is the operator account address.
	OperatorAccAddr string `protobuf:"bytes,1,opt,name=operator_acc_addr,json=operatorAccAddr,proto3" json:"operator_acc_addr,omitempty"`
	// cons_addr is the consensus address corresponding to the consensus public key
	// currently in use by the operator.
	ConsAddr string `protobuf:"bytes,2,opt,name=cons_addr,json=consAddr,proto3" json:"cons_addr,omitempty"`
	// opting_out is a flag to indicate if the operator is opting out of consensus.
	OptingOut bool `protobuf:"varint,3,opt,name=opting_out,json=optingOut,proto3" json:"opting_out,omitempty"`
}

func (m *OperatorConsAddrPair) Reset()         { *m = OperatorConsAddrPair{} }
func (m *OperatorConsAddrPair) String() string { return proto.CompactTextString(m) }
func (*OperatorConsAddrPair) ProtoMessage()    {}
func (*OperatorConsAddrPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{19}
}
func (m *OperatorConsAddrPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorConsAddrPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorConsAddrPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorConsAddrPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorConsAddrPair.Merge(m, src)
}
func (m *OperatorConsAddrPair) XXX_Size() int {
	return m.Size()
}
func (m *OperatorConsAddrPair) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorConsAddrPair.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorConsAddrPair proto.InternalMessageInfo

func (m *OperatorConsAddrPair) GetOperatorAccAddr() string {
	if m != nil {
		return m.OperatorAccAddr
	}
	return ""
}

func (m *OperatorConsAddrPair) GetConsAddr() string {
	if m != nil {
		return m.ConsAddr
	}
	return ""
}

func (m *OperatorConsAddrPair) GetOptingOut() bool {
	if m != nil {
		return m.OptingOut
	}
	return false
}

// QueryAllOperatorsWithOptInAVSRequest is the request to obtain all opt-in operator addresses
//
//	for a specific avs with pagination.
type QueryAllOperatorsByOptInAVSRequest struct {
	// avs address
	Avs string `protobuf:"bytes,1,opt,name=avs,proto3" json:"avs,omitempty"`
}

func (m *QueryAllOperatorsByOptInAVSRequest) Reset()         { *m = QueryAllOperatorsByOptInAVSRequest{} }
func (m *QueryAllOperatorsByOptInAVSRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllOperatorsByOptInAVSRequest) ProtoMessage()    {}
func (*QueryAllOperatorsByOptInAVSRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{20}
}
func (m *QueryAllOperatorsByOptInAVSRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOperatorsByOptInAVSRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOperatorsByOptInAVSRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOperatorsByOptInAVSRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOperatorsByOptInAVSRequest.Merge(m, src)
}
func (m *QueryAllOperatorsByOptInAVSRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOperatorsByOptInAVSRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOperatorsByOptInAVSRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOperatorsByOptInAVSRequest proto.InternalMessageInfo

func (m *QueryAllOperatorsByOptInAVSRequest) GetAvs() string {
	if m != nil {
		return m.Avs
	}
	return ""
}

// QueryAllOperatorsWithOptInAVSResponse is the response that includes a list of all avs
//
//	for a specified operator address.
type QueryAllOperatorsByOptInAVSResponse struct {
	// operator_list is a list of operator addresses.
	OperatorList []string `protobuf:"bytes,1,rep,name=operator_list,json=operatorList,proto3" json:"operator_list,omitempty"`
}

func (m *QueryAllOperatorsByOptInAVSResponse) Reset()         { *m = QueryAllOperatorsByOptInAVSResponse{} }
func (m *QueryAllOperatorsByOptInAVSResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllOperatorsByOptInAVSResponse) ProtoMessage()    {}
func (*QueryAllOperatorsByOptInAVSResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{21}
}
func (m *QueryAllOperatorsByOptInAVSResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOperatorsByOptInAVSResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOperatorsByOptInAVSResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOperatorsByOptInAVSResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOperatorsByOptInAVSResponse.Merge(m, src)
}
func (m *QueryAllOperatorsByOptInAVSResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOperatorsByOptInAVSResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOperatorsByOptInAVSResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOperatorsByOptInAVSResponse proto.InternalMessageInfo

func (m *QueryAllOperatorsByOptInAVSResponse) GetOperatorList() []string {
	if m != nil {
		return m.OperatorList
	}
	return nil
}

// QueryAllAVSsByOperatorRequest is the request to obtain all operator addresses
// and consensus keys for a specific chain ID, with pagination.
type QueryAllAVSsByOperatorRequest struct {
	// operator address.
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (m *QueryAllAVSsByOperatorRequest) Reset()         { *m = QueryAllAVSsByOperatorRequest{} }
func (m *QueryAllAVSsByOperatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAVSsByOperatorRequest) ProtoMessage()    {}
func (*QueryAllAVSsByOperatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{22}
}
func (m *QueryAllAVSsByOperatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAVSsByOperatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAVSsByOperatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAVSsByOperatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAVSsByOperatorRequest.Merge(m, src)
}
func (m *QueryAllAVSsByOperatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAVSsByOperatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAVSsByOperatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAVSsByOperatorRequest proto.InternalMessageInfo

func (m *QueryAllAVSsByOperatorRequest) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

// QueryAllAVSsByOperatorResponse is the response that includes a list of all operators
// and their consensus keys for a specified chain ID.
type QueryAllAVSsByOperatorResponse struct {
	// avs_list is a list of avs addresses  .
	AvsList []string `protobuf:"bytes,1,rep,name=avs_list,json=avsList,proto3" json:"avs_list,omitempty"`
}

func (m *QueryAllAVSsByOperatorResponse) Reset()         { *m = QueryAllAVSsByOperatorResponse{} }
func (m *QueryAllAVSsByOperatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAVSsByOperatorResponse) ProtoMessage()    {}
func (*QueryAllAVSsByOperatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{23}
}
func (m *QueryAllAVSsByOperatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAVSsByOperatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAVSsByOperatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAVSsByOperatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAVSsByOperatorResponse.Merge(m, src)
}
func (m *QueryAllAVSsByOperatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAVSsByOperatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAVSsByOperatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAVSsByOperatorResponse proto.InternalMessageInfo

func (m *QueryAllAVSsByOperatorResponse) GetAvsList() []string {
	if m != nil {
		return m.AvsList
	}
	return nil
}

// QueryOptInfoRequest is the request to obtain the opted information of specified operator
// and AVS
type QueryOptInfoRequest struct {
	// operator_and_avs is the operator and AVS address
	*OperatorAVSAddress `protobuf:"bytes,1,opt,name=operator_and_avs,json=operatorAndAvs,proto3,embedded=operator_and_avs" json:"operator_and_avs,omitempty"`
}

func (m *QueryOptInfoRequest) Reset()         { *m = QueryOptInfoRequest{} }
func (m *QueryOptInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOptInfoRequest) ProtoMessage()    {}
func (*QueryOptInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{24}
}
func (m *QueryOptInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOptInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOptInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOptInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOptInfoRequest.Merge(m, src)
}
func (m *QueryOptInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOptInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOptInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOptInfoRequest proto.InternalMessageInfo

// QuerySnapshotHelperRequest is the request to obtain the voting power snapshot
// helper information.
type QuerySnapshotHelperRequest struct {
	// avs address
	Avs string `protobuf:"bytes,1,opt,name=avs,proto3" json:"avs,omitempty"`
}

func (m *QuerySnapshotHelperRequest) Reset()         { *m = QuerySnapshotHelperRequest{} }
func (m *QuerySnapshotHelperRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySnapshotHelperRequest) ProtoMessage()    {}
func (*QuerySnapshotHelperRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{25}
}
func (m *QuerySnapshotHelperRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySnapshotHelperRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySnapshotHelperRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySnapshotHelperRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySnapshotHelperRequest.Merge(m, src)
}
func (m *QuerySnapshotHelperRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySnapshotHelperRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySnapshotHelperRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySnapshotHelperRequest proto.InternalMessageInfo

func (m *QuerySnapshotHelperRequest) GetAvs() string {
	if m != nil {
		return m.Avs
	}
	return ""
}

// QuerySpecifiedSnapshotRequest is the request to obtain the voting power snapshot
// at the specified height.
type QuerySpecifiedSnapshotRequest struct {
	// avs address
	Avs string `protobuf:"bytes,1,opt,name=avs,proto3" json:"avs,omitempty"`
	// height is used to specify the snapshot height you want to query.
	Height int64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QuerySpecifiedSnapshotRequest) Reset()         { *m = QuerySpecifiedSnapshotRequest{} }
func (m *QuerySpecifiedSnapshotRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySpecifiedSnapshotRequest) ProtoMessage()    {}
func (*QuerySpecifiedSnapshotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{26}
}
func (m *QuerySpecifiedSnapshotRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpecifiedSnapshotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpecifiedSnapshotRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpecifiedSnapshotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpecifiedSnapshotRequest.Merge(m, src)
}
func (m *QuerySpecifiedSnapshotRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpecifiedSnapshotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpecifiedSnapshotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpecifiedSnapshotRequest proto.InternalMessageInfo

func (m *QuerySpecifiedSnapshotRequest) GetAvs() string {
	if m != nil {
		return m.Avs
	}
	return ""
}

func (m *QuerySpecifiedSnapshotRequest) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

// VotingPowerSnapshotKeyHeight is used in the response of QuerySpecifiedSnapshot
// and QueryAllSnapshot
type VotingPowerSnapshotKeyHeight struct {
	// snapshot_key_height when it is used in QuerySpecifiedSnapshot, it's the latest
	// height with a snapshot key found based on the input height; this height is typically
	// the start height of the epoch in which the input height is located.
	// when it is used in QueryAllSnapshot, it's the height in the current snapshot key.
	SnapshotKeyHeight int64 `protobuf:"varint,1,opt,name=snapshot_key_height,json=snapshotKeyHeight,proto3" json:"snapshot_key_height,omitempty"`
	// snapshot when it is used in QuerySpecifiedSnapshot, it is the final retrieved information
	// containing the voting power set.
	// when it is used in QueryAllSnapshot, It is the snapshot stored under `snapshot_key_height`,
	// and its voting power set may be nil.
	Snapshot *VotingPowerSnapshot `protobuf:"bytes,2,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (m *VotingPowerSnapshotKeyHeight) Reset()         { *m = VotingPowerSnapshotKeyHeight{} }
func (m *VotingPowerSnapshotKeyHeight) String() string { return proto.CompactTextString(m) }
func (*VotingPowerSnapshotKeyHeight) ProtoMessage()    {}
func (*VotingPowerSnapshotKeyHeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{27}
}
func (m *VotingPowerSnapshotKeyHeight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VotingPowerSnapshotKeyHeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VotingPowerSnapshotKeyHeight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VotingPowerSnapshotKeyHeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VotingPowerSnapshotKeyHeight.Merge(m, src)
}
func (m *VotingPowerSnapshotKeyHeight) XXX_Size() int {
	return m.Size()
}
func (m *VotingPowerSnapshotKeyHeight) XXX_DiscardUnknown() {
	xxx_messageInfo_VotingPowerSnapshotKeyHeight.DiscardUnknown(m)
}

var xxx_messageInfo_VotingPowerSnapshotKeyHeight proto.InternalMessageInfo

func (m *VotingPowerSnapshotKeyHeight) GetSnapshotKeyHeight() int64 {
	if m != nil {
		return m.SnapshotKeyHeight
	}
	return 0
}

func (m *VotingPowerSnapshotKeyHeight) GetSnapshot() *VotingPowerSnapshot {
	if m != nil {
		return m.Snapshot
	}
	return nil
}

// QueryAllSnapshotRequest is the request to obtain all voting power snapshot
// for the specified AVS
type QueryAllSnapshotRequest struct {
	// avs address
	Avs string `protobuf:"bytes,1,opt,name=avs,proto3" json:"avs,omitempty"`
	// pagination related options.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSnapshotRequest) Reset()         { *m = QueryAllSnapshotRequest{} }
func (m *QueryAllSnapshotRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSnapshotRequest) ProtoMessage()    {}
func (*QueryAllSnapshotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{28}
}
func (m *QueryAllSnapshotRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSnapshotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSnapshotRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSnapshotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSnapshotRequest.Merge(m, src)
}
func (m *QueryAllSnapshotRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSnapshotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSnapshotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSnapshotRequest proto.InternalMessageInfo

func (m *QueryAllSnapshotRequest) GetAvs() string {
	if m != nil {
		return m.Avs
	}
	return ""
}

func (m *QueryAllSnapshotRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllSnapshotResponse is the response to obtain all voting power snapshot
// for the specified AVS
type QueryAllSnapshotResponse struct {
	// snapshots is a list of all snapshots for the specified AVS.
	Snapshots []*VotingPowerSnapshotKeyHeight `protobuf:"bytes,1,rep,name=snapshots,proto3" json:"snapshots,omitempty"`
	// pagination related response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSnapshotResponse) Reset()         { *m = QueryAllSnapshotResponse{} }
func (m *QueryAllSnapshotResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSnapshotResponse) ProtoMessage()    {}
func (*QueryAllSnapshotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{29}
}
func (m *QueryAllSnapshotResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSnapshotResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSnapshotResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSnapshotResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSnapshotResponse.Merge(m, src)
}
func (m *QueryAllSnapshotResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSnapshotResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSnapshotResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSnapshotResponse proto.InternalMessageInfo

func (m *QueryAllSnapshotResponse) GetSnapshots() []*VotingPowerSnapshotKeyHeight {
	if m != nil {
		return m.Snapshots
	}
	return nil
}

func (m *QueryAllSnapshotResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryValidatorsRequest is request type for Query/Validators RPC method.
type QueryValidatorsRequest struct {
	// chain is the id of the chain served by the operator. here chain_id is not used since the
	// Linter complains about capitalization, which can be set with a gogoproto.custom_name but
	// that is not compatible with google.api.http.get in the Query service below.
	Chain string `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryValidatorsRequest) Reset()         { *m = QueryValidatorsRequest{} }
func (m *QueryValidatorsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorsRequest) ProtoMessage()    {}
func (*QueryValidatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{30}
}
func (m *QueryValidatorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorsRequest.Merge(m, src)
}
func (m *QueryValidatorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorsRequest proto.InternalMessageInfo

func (m *QueryValidatorsRequest) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *QueryValidatorsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryValidatorsResponse is response type for the Query/Validators RPC method
type QueryValidatorsResponse struct {
	// validators contains all the queried validators.
	Validators []Validator `protobuf:"bytes,1,rep,name=validators,proto3" json:"validators"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryValidatorsResponse) Reset()         { *m = QueryValidatorsResponse{} }
func (m *QueryValidatorsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorsResponse) ProtoMessage()    {}
func (*QueryValidatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{31}
}
func (m *QueryValidatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorsResponse.Merge(m, src)
}
func (m *QueryValidatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorsResponse proto.InternalMessageInfo

func (m *QueryValidatorsResponse) GetValidators() []Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *QueryValidatorsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryValidatorRequest is response type for the Query/Validator RPC method
type QueryValidatorRequest struct {
	// validator_acc_addr defines the validator address to query for.
	ValidatorAccAddr string `protobuf:"bytes,1,opt,name=validator_acc_addr,json=validatorAccAddr,proto3" json:"validator_acc_addr,omitempty"`
	// chain is the id of the chain served by the operator. here chain_id is not used since the
	// Linter complains about capitalization, which can be set with a gogoproto.custom_name but
	// that is not compatible with google.api.http.get in the Query service below.
	Chain string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
}

func (m *QueryValidatorRequest) Reset()         { *m = QueryValidatorRequest{} }
func (m *QueryValidatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorRequest) ProtoMessage()    {}
func (*QueryValidatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{32}
}
func (m *QueryValidatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorRequest.Merge(m, src)
}
func (m *QueryValidatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorRequest proto.InternalMessageInfo

func (m *QueryValidatorRequest) GetValidatorAccAddr() string {
	if m != nil {
		return m.ValidatorAccAddr
	}
	return ""
}

func (m *QueryValidatorRequest) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

// QueryValidatorResponse is response type for the Query/Validator RPC method
type QueryValidatorResponse struct {
	// validator defines the validator info.
	Validator Validator `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator"`
}

func (m *QueryValidatorResponse) Reset()         { *m = QueryValidatorResponse{} }
func (m *QueryValidatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryValidatorResponse) ProtoMessage()    {}
func (*QueryValidatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f91e795a3cecbdbf, []int{33}
}
func (m *QueryValidatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryValidatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryValidatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryValidatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryValidatorResponse.Merge(m, src)
}
func (m *QueryValidatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryValidatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryValidatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryValidatorResponse proto.InternalMessageInfo

func (m *QueryValidatorResponse) GetValidator() Validator {
	if m != nil {
		return m.Validator
	}
	return Validator{}
}

func init() {
	proto.RegisterType((*GetOperatorInfoReq)(nil), "exocore.operator.v1.GetOperatorInfoReq")
	proto.RegisterType((*QueryAllOperatorsRequest)(nil), "exocore.operator.v1.QueryAllOperatorsRequest")
	proto.RegisterType((*QueryAllOperatorsResponse)(nil), "exocore.operator.v1.QueryAllOperatorsResponse")
	proto.RegisterType((*OperatorAVSAddress)(nil), "exocore.operator.v1.OperatorAVSAddress")
	proto.RegisterType((*QueryOperatorUSDValueRequest)(nil), "exocore.operator.v1.QueryOperatorUSDValueRequest")
	proto.RegisterType((*QueryOperatorUSDValueResponse)(nil), "exocore.operator.v1.QueryOperatorUSDValueResponse")
	proto.RegisterType((*QueryAVSUSDValueRequest)(nil), "exocore.operator.v1.QueryAVSUSDValueRequest")
	proto.RegisterType((*QueryOperatorSlashInfoRequest)(nil), "exocore.operator.v1.QueryOperatorSlashInfoRequest")
	proto.RegisterType((*OperatorSlashInfoByID)(nil), "exocore.operator.v1.OperatorSlashInfoByID")
	proto.RegisterType((*QueryOperatorSlashInfoResponse)(nil), "exocore.operator.v1.QueryOperatorSlashInfoResponse")
	proto.RegisterType((*QueryOperatorConsKeyRequest)(nil), "exocore.operator.v1.QueryOperatorConsKeyRequest")
	proto.RegisterType((*QueryOperatorConsKeyResponse)(nil), "exocore.operator.v1.QueryOperatorConsKeyResponse")
	proto.RegisterType((*QueryOperatorConsAddressRequest)(nil), "exocore.operator.v1.QueryOperatorConsAddressRequest")
	proto.RegisterType((*QueryOperatorConsAddressResponse)(nil), "exocore.operator.v1.QueryOperatorConsAddressResponse")
	proto.RegisterType((*QueryAllOperatorConsKeysByChainIDRequest)(nil), "exocore.operator.v1.QueryAllOperatorConsKeysByChainIDRequest")
	proto.RegisterType((*QueryAllOperatorConsKeysByChainIDResponse)(nil), "exocore.operator.v1.QueryAllOperatorConsKeysByChainIDResponse")
	proto.RegisterType((*OperatorConsKeyPair)(nil), "exocore.operator.v1.OperatorConsKeyPair")
	proto.RegisterType((*QueryAllOperatorConsAddrsByChainIDRequest)(nil), "exocore.operator.v1.QueryAllOperatorConsAddrsByChainIDRequest")
	proto.RegisterType((*QueryAllOperatorConsAddrsByChainIDResponse)(nil), "exocore.operator.v1.QueryAllOperatorConsAddrsByChainIDResponse")
	proto.RegisterType((*OperatorConsAddrPair)(nil), "exocore.operator.v1.OperatorConsAddrPair")
	proto.RegisterType((*QueryAllOperatorsByOptInAVSRequest)(nil), "exocore.operator.v1.QueryAllOperatorsByOptInAVSRequest")
	proto.RegisterType((*QueryAllOperatorsByOptInAVSResponse)(nil), "exocore.operator.v1.QueryAllOperatorsByOptInAVSResponse")
	proto.RegisterType((*QueryAllAVSsByOperatorRequest)(nil), "exocore.operator.v1.QueryAllAVSsByOperatorRequest")
	proto.RegisterType((*QueryAllAVSsByOperatorResponse)(nil), "exocore.operator.v1.QueryAllAVSsByOperatorResponse")
	proto.RegisterType((*QueryOptInfoRequest)(nil), "exocore.operator.v1.QueryOptInfoRequest")
	proto.RegisterType((*QuerySnapshotHelperRequest)(nil), "exocore.operator.v1.QuerySnapshotHelperRequest")
	proto.RegisterType((*QuerySpecifiedSnapshotRequest)(nil), "exocore.operator.v1.QuerySpecifiedSnapshotRequest")
	proto.RegisterType((*VotingPowerSnapshotKeyHeight)(nil), "exocore.operator.v1.VotingPowerSnapshotKeyHeight")
	proto.RegisterType((*QueryAllSnapshotRequest)(nil), "exocore.operator.v1.QueryAllSnapshotRequest")
	proto.RegisterType((*QueryAllSnapshotResponse)(nil), "exocore.operator.v1.QueryAllSnapshotResponse")
	proto.RegisterType((*QueryValidatorsRequest)(nil), "exocore.operator.v1.QueryValidatorsRequest")
	proto.RegisterType((*QueryValidatorsResponse)(nil), "exocore.operator.v1.QueryValidatorsResponse")
	proto.RegisterType((*QueryValidatorRequest)(nil), "exocore.operator.v1.QueryValidatorRequest")
	proto.RegisterType((*QueryValidatorResponse)(nil), "exocore.operator.v1.QueryValidatorResponse")
}

func init() { proto.RegisterFile("exocore/operator/v1/query.proto", fileDescriptor_f91e795a3cecbdbf) }

var fileDescriptor_f91e795a3cecbdbf = []byte{
	// 1902 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0xcd, 0x73, 0x1c, 0x47,
	0x15, 0x77, 0xcb, 0x4e, 0xac, 0x7d, 0x76, 0x8c, 0xd4, 0x72, 0x82, 0x3d, 0x76, 0x56, 0xce, 0x98,
	0x8a, 0x65, 0x45, 0x9e, 0x41, 0xb2, 0x13, 0xa8, 0x08, 0x43, 0x69, 0xad, 0xd8, 0x96, 0x9d, 0x42,
	0x62, 0xb6, 0xd8, 0x00, 0x55, 0xb0, 0x35, 0xda, 0x6d, 0xef, 0x0e, 0x1e, 0x4f, 0x8f, 0xb7, 0x67,
	0xd7, 0xde, 0x52, 0x89, 0xa2, 0x38, 0x85, 0x5b, 0x0a, 0xb8, 0x51, 0x01, 0x8e, 0x5c, 0xa0, 0x38,
	0x84, 0xe2, 0xc0, 0x01, 0x8e, 0x3e, 0x70, 0x30, 0xe4, 0xc2, 0x49, 0x50, 0x32, 0x55, 0x1c, 0x39,
	0xf0, 0x0f, 0x50, 0xd3, 0xd3, 0x3d, 0x1f, 0x3b, 0x1f, 0x3b, 0xeb, 0x2c, 0xbe, 0xa8, 0x76, 0x66,
	0xde, 0xeb, 0xf7, 0x7b, 0x9f, 0xdd, 0xbf, 0x16, 0x2c, 0x92, 0xc7, 0xb4, 0x45, 0x7b, 0x44, 0xa7,
	0x2e, 0xe9, 0x99, 0x1e, 0xed, 0xe9, 0x83, 0x55, 0xfd, 0x61, 0x9f, 0xf4, 0x86, 0x9a, 0xdb, 0xa3,
	0x1e, 0xc5, 0x0b, 0x42, 0x40, 0x93, 0x02, 0xda, 0x60, 0x55, 0x99, 0x37, 0x1f, 0x58, 0x0e, 0xd5,
	0xf9, 0xdf, 0x40, 0x4e, 0x59, 0x6e, 0x51, 0xf6, 0x80, 0x32, 0x7d, 0xd7, 0x64, 0x24, 0x58, 0x40,
	0x1f, 0xac, 0xee, 0x12, 0xcf, 0x5c, 0xd5, 0x5d, 0xb3, 0x63, 0x39, 0xa6, 0x67, 0x51, 0x47, 0xc8,
	0x9e, 0x13, 0xb2, 0x52, 0x2c, 0x6e, 0x50, 0x39, 0x1b, 0x7c, 0x6c, 0xf2, 0x27, 0x3d, 0x78, 0x10,
	0x9f, 0xce, 0x67, 0x81, 0xf5, 0x1e, 0x8b, 0xaf, 0x17, 0xb3, 0xbe, 0x0e, 0x4c, 0xdb, 0x6a, 0x73,
	0xd8, 0x81, 0xd0, 0xe9, 0x0e, 0xed, 0xd0, 0x60, 0x69, 0xff, 0x97, 0x5c, 0xb8, 0x43, 0x69, 0xc7,
	0x26, 0xba, 0xe9, 0x5a, 0xba, 0xe9, 0x38, 0xd4, 0xe3, 0x68, 0x43, 0xb3, 0x1e, 0x71, 0xda, 0xa4,
	0xf7, 0xc0, 0x72, 0x3c, 0xbd, 0xd5, 0x1b, 0xba, 0x1e, 0xd5, 0xef, 0x93, 0xa1, 0xf8, 0xaa, 0xd6,
	0x01, 0xdf, 0x22, 0xde, 0xb6, 0xb0, 0xb9, 0xe5, 0xdc, 0xa3, 0x06, 0x79, 0x88, 0xaf, 0xc3, 0x2b,
	0x12, 0x46, 0xd3, 0x6c, 0xb7, 0x7b, 0x67, 0xd0, 0x05, 0xb4, 0x54, 0xa9, 0x9d, 0xf9, 0xdb, 0x27,
	0x57, 0x4e, 0x0b, 0x9f, 0x36, 0xda, 0xed, 0x1e, 0x61, 0xac, 0xee, 0xf5, 0x2c, 0xa7, 0x63, 0x9c,
	0x94, 0xe2, 0xfe, 0x6b, 0x75, 0x17, 0xce, 0x7c, 0xc3, 0x8f, 0xc9, 0x86, 0x6d, 0xcb, 0x95, 0x99,
	0x41, 0x1e, 0xf6, 0x09, 0xf3, 0xf0, 0x4d, 0x80, 0x28, 0xa2, 0x7c, 0xdd, 0x13, 0x6b, 0x6f, 0x6a,
	0x62, 0x51, 0x3f, 0xfc, 0x5a, 0x10, 0x4e, 0x11, 0x7e, 0x6d, 0xc7, 0xec, 0x10, 0xa1, 0x6b, 0xc4,
	0x34, 0xd5, 0x9f, 0x20, 0x38, 0x9b, 0x61, 0x84, 0xb9, 0xd4, 0x61, 0x04, 0xaf, 0x00, 0x8e, 0x1c,
	0x68, 0xb5, 0xb8, 0x13, 0xec, 0x0c, 0xba, 0x70, 0x74, 0xa9, 0x62, 0xcc, 0x85, 0x58, 0x5b, 0x2d,
	0x1f, 0x2e, 0xc3, 0xb7, 0x12, 0x98, 0x66, 0x38, 0xa6, 0x4b, 0x63, 0x31, 0x05, 0xa6, 0x12, 0xa0,
	0x3c, 0xc0, 0x12, 0xcb, 0x46, 0xa3, 0x2e, 0x42, 0xf4, 0x19, 0xa3, 0x89, 0x17, 0xe1, 0x84, 0x39,
	0x60, 0x5c, 0x93, 0x30, 0xc6, 0xe1, 0x55, 0x0c, 0x30, 0x07, 0x4c, 0x28, 0xa9, 0x8f, 0xe0, 0x3c,
	0x8f, 0x84, 0x34, 0xfd, 0xcd, 0xfa, 0x66, 0xc3, 0xb4, 0xfb, 0x32, 0x6c, 0xf8, 0x03, 0x98, 0x8b,
	0xec, 0x3b, 0xed, 0xa6, 0x39, 0x60, 0x22, 0xf0, 0x97, 0xb4, 0x8c, 0xfe, 0xd0, 0xd2, 0x2e, 0xd4,
	0x8e, 0x3d, 0x3d, 0x58, 0x44, 0xc6, 0xa9, 0x10, 0x97, 0xd3, 0xde, 0x18, 0x30, 0x75, 0x08, 0xaf,
	0xe7, 0x18, 0x16, 0x69, 0xf8, 0x16, 0x40, 0x9f, 0xb5, 0x9b, 0x03, 0xff, 0xa5, 0xb4, 0xb9, 0x5c,
	0x68, 0x73, 0xdb, 0xf5, 0x48, 0x5b, 0xae, 0x53, 0x7b, 0xe5, 0xf0, 0x60, 0xb1, 0x22, 0x9f, 0x98,
	0x51, 0xe9, 0xb3, 0x76, 0xf0, 0x53, 0xbd, 0x03, 0x9f, 0x0f, 0xb2, 0xdf, 0xa8, 0x8f, 0xba, 0xab,
	0x27, 0xe3, 0x15, 0x04, 0xfb, 0xd4, 0xe1, 0xc1, 0x22, 0x44, 0x0e, 0x25, 0xe2, 0xf7, 0x67, 0x34,
	0xe2, 0x47, 0xdd, 0x36, 0x59, 0x57, 0xf4, 0xc2, 0xff, 0x35, 0x82, 0x23, 0xdd, 0x30, 0xf3, 0xdc,
	0xdd, 0xb0, 0x07, 0xaf, 0xa6, 0xc0, 0xd7, 0x86, 0x5b, 0x9b, 0xf8, 0x4d, 0x98, 0x65, 0xfe, 0x8b,
	0xa6, 0xd5, 0x16, 0x91, 0x38, 0x71, 0x78, 0xb0, 0x78, 0x3c, 0x10, 0xda, 0x34, 0x8e, 0xf3, 0x8f,
	0x5b, 0x6d, 0xfc, 0x2e, 0x1c, 0xb3, 0x9c, 0x7b, 0x34, 0x84, 0x50, 0xe4, 0x55, 0x14, 0x1e, 0xae,
	0xa3, 0xfe, 0x11, 0x41, 0x35, 0x2f, 0x7e, 0xa2, 0x10, 0x76, 0xe0, 0x94, 0x69, 0xdb, 0x4d, 0x01,
	0xc5, 0x37, 0xe4, 0xf7, 0xe2, 0xb8, 0x62, 0x48, 0xb8, 0x62, 0x9c, 0x34, 0x6d, 0x3b, 0x7c, 0x33,
	0xbd, 0x9e, 0x6d, 0xc2, 0xb9, 0x04, 0xf8, 0x1b, 0xd4, 0x61, 0x77, 0xc9, 0x50, 0xa6, 0x7e, 0x19,
	0xe6, 0x53, 0x93, 0x24, 0x88, 0xa4, 0xf1, 0xb9, 0x91, 0x41, 0x82, 0x4f, 0xc3, 0x4b, 0xad, 0xae,
	0x69, 0x39, 0xa2, 0x47, 0x83, 0x07, 0xf5, 0x87, 0x68, 0xa4, 0x3f, 0x43, 0x0b, 0x22, 0x38, 0x1b,
	0x00, 0x6e, 0x7f, 0xd7, 0xb6, 0x5a, 0xcd, 0xfb, 0x64, 0x28, 0xea, 0xea, 0xbc, 0x16, 0x8d, 0x6d,
	0x2d, 0x18, 0xdb, 0xda, 0x0e, 0x17, 0xba, 0x4b, 0x86, 0xb5, 0x63, 0x4f, 0x0e, 0x16, 0x8f, 0x18,
	0x15, 0x57, 0xbe, 0xc0, 0xaf, 0x03, 0x50, 0xd7, 0xb3, 0x9c, 0x4e, 0x93, 0xf6, 0x3d, 0x6e, 0x7e,
	0xd6, 0xa8, 0x04, 0x6f, 0xb6, 0xfb, 0x9e, 0xda, 0x82, 0xc5, 0x14, 0x02, 0xd9, 0x09, 0x53, 0xf3,
	0xf3, 0x7b, 0x70, 0x21, 0xdf, 0x88, 0x70, 0xf5, 0x1c, 0x54, 0x5a, 0xd4, 0x61, 0xf1, 0xd5, 0x67,
	0x5b, 0x42, 0x6e, 0x9c, 0x13, 0x1f, 0x22, 0x58, 0x1a, 0x9d, 0xf8, 0x22, 0x94, 0xac, 0x36, 0xbc,
	0xe1, 0x63, 0xd8, 0xda, 0x94, 0xee, 0x84, 0x10, 0x51, 0x0c, 0xe2, 0xd4, 0xda, 0xed, 0x2f, 0x08,
	0x2e, 0x97, 0x80, 0x22, 0x9c, 0x6e, 0xc4, 0x36, 0x23, 0xee, 0xbd, 0xbf, 0xff, 0x8a, 0x06, 0x58,
	0x2a, 0x6c, 0x00, 0xb1, 0xe6, 0x8e, 0x69, 0xf5, 0xa2, 0x6d, 0x4b, 0x1a, 0x9a, 0x5e, 0x0b, 0x7c,
	0x8c, 0x60, 0x21, 0xc3, 0xe4, 0x44, 0x35, 0xb1, 0x9e, 0x28, 0xe2, 0x99, 0xf1, 0x45, 0x9c, 0x5f,
	0xbe, 0x47, 0x47, 0x33, 0xff, 0xe3, 0x9c, 0x70, 0xf3, 0xdd, 0xfb, 0x05, 0xa7, 0xfe, 0x29, 0x82,
	0xe5, 0x32, 0x58, 0x44, 0xee, 0xbf, 0x0d, 0x0b, 0xc9, 0xdc, 0x47, 0x27, 0x91, 0x13, 0x6b, 0x97,
	0xc7, 0x26, 0xdf, 0x5f, 0x95, 0x67, 0x7f, 0x9e, 0x8e, 0xda, 0x9a, 0x5e, 0xfa, 0x7f, 0x00, 0xa7,
	0xb3, 0x6c, 0x4e, 0x94, 0xfe, 0x44, 0x63, 0xcf, 0x14, 0x36, 0x76, 0x2a, 0xbd, 0xef, 0x80, 0x9a,
	0x3a, 0xc9, 0xd5, 0x86, 0xdb, 0xae, 0xb7, 0xe5, 0x6c, 0x34, 0xea, 0x32, 0xad, 0x73, 0x70, 0x54,
	0x6e, 0xbb, 0x15, 0xc3, 0xff, 0xa9, 0xde, 0x81, 0x8b, 0x85, 0x7a, 0x22, 0x05, 0x17, 0x63, 0xc7,
	0x2f, 0xdb, 0x62, 0x9e, 0x38, 0x06, 0x86, 0x87, 0xac, 0xf7, 0x2d, 0xe6, 0xa9, 0xeb, 0xe2, 0x08,
	0xb0, 0x61, 0xdb, 0x1b, 0x8d, 0x3a, 0x5f, 0x26, 0xf8, 0x2a, 0xcd, 0x2b, 0x30, 0x2b, 0x15, 0xe4,
	0xe0, 0x92, 0xcf, 0xea, 0xba, 0xd8, 0xff, 0x32, 0x94, 0x05, 0x86, 0xb3, 0x30, 0xeb, 0x9f, 0x49,
	0x62, 0xe6, 0x8f, 0x9b, 0x03, 0xc6, 0x2d, 0x3b, 0xb0, 0x20, 0xc6, 0xa6, 0xf7, 0x22, 0x8e, 0x1c,
	0xaa, 0x06, 0x0a, 0xb7, 0x57, 0x77, 0x4c, 0x97, 0x75, 0xa9, 0x77, 0x9b, 0xd8, 0x2e, 0xe9, 0xe5,
	0x47, 0x79, 0x4b, 0x44, 0xa6, 0xee, 0x92, 0x96, 0x75, 0xcf, 0x22, 0x6d, 0xa9, 0x98, 0xab, 0x82,
	0x5f, 0x83, 0x97, 0xbb, 0xc4, 0xea, 0x74, 0x83, 0x21, 0x7e, 0xd4, 0x10, 0x4f, 0xea, 0xcf, 0x10,
	0x9c, 0x6f, 0x50, 0x3f, 0xed, 0x3b, 0xf4, 0x11, 0xe9, 0xc9, 0x85, 0xee, 0x92, 0xe1, 0x6d, 0x2e,
	0x80, 0x35, 0x58, 0x60, 0xe2, 0xa5, 0x3f, 0x46, 0x9a, 0x62, 0x15, 0xc4, 0x57, 0x99, 0x67, 0x29,
	0xf9, 0x4d, 0x98, 0x95, 0x2f, 0x45, 0x03, 0x64, 0xcf, 0xd3, 0x0c, 0xa3, 0x46, 0xa8, 0xa9, 0x32,
	0x79, 0x96, 0xb4, 0xed, 0xf1, 0xbe, 0x4d, 0x6b, 0x8e, 0x7c, 0x82, 0x22, 0x92, 0x14, 0x59, 0x15,
	0xe5, 0xb2, 0x0d, 0x15, 0x89, 0x4e, 0xce, 0x8a, 0xd5, 0xb2, 0x8e, 0x85, 0xd1, 0x31, 0xa2, 0x35,
	0xa6, 0x37, 0x2b, 0x06, 0xf0, 0x1a, 0x47, 0xdd, 0x90, 0xcc, 0x94, 0xbd, 0x98, 0xb1, 0xfb, 0x1b,
	0x24, 0x92, 0x14, 0x37, 0x2c, 0xa2, 0xb5, 0x05, 0x10, 0x12, 0x65, 0x19, 0xae, 0x6a, 0x76, 0xb8,
	0xa4, 0x58, 0xad, 0xe2, 0x9f, 0xa0, 0x7e, 0xfd, 0xef, 0xdf, 0x2d, 0x23, 0x23, 0xa6, 0x3c, 0xbd,
	0x38, 0xf5, 0xe1, 0xd5, 0x24, 0xdc, 0x88, 0xff, 0xe2, 0xd0, 0xde, 0xc8, 0x54, 0x2d, 0x60, 0x84,
	0x73, 0xa1, 0x4e, 0xf1, 0x19, 0xcc, 0x1c, 0x4d, 0x4f, 0x18, 0xa4, 0x5b, 0x50, 0x09, 0xd7, 0x10,
	0x83, 0x64, 0x82, 0x18, 0x45, 0xba, 0x6b, 0x9f, 0x9e, 0x85, 0x97, 0xb8, 0x0d, 0xfc, 0x73, 0x04,
	0xf3, 0x89, 0x13, 0x1f, 0x3f, 0x98, 0x67, 0x8f, 0xa7, 0xf4, 0x25, 0x83, 0xf2, 0x46, 0xe1, 0x1c,
	0xf3, 0xa5, 0xd4, 0x77, 0x7f, 0xf4, 0xe9, 0xbf, 0x7e, 0x3a, 0x73, 0x0d, 0xaf, 0xe9, 0x59, 0xb7,
	0x23, 0xe1, 0x7c, 0xf4, 0x09, 0x85, 0xbe, 0x97, 0xe0, 0xd8, 0xfb, 0xf8, 0x17, 0x12, 0x5d, 0x7c,
	0x7b, 0xc0, 0x57, 0x32, 0x8d, 0xe6, 0xdd, 0x56, 0x28, 0x5a, 0x59, 0xf1, 0x20, 0xca, 0xea, 0x32,
	0x07, 0xfc, 0x05, 0xac, 0x66, 0x02, 0xf6, 0x29, 0x10, 0x0d, 0xa1, 0xfc, 0x75, 0x94, 0x36, 0x89,
	0xa3, 0xd7, 0x4d, 0xda, 0x13, 0xa7, 0x08, 0xfc, 0xc5, 0x7c, 0xf3, 0xd9, 0x74, 0x45, 0x59, 0x9d,
	0x40, 0x43, 0x60, 0xbe, 0xc3, 0x31, 0x6f, 0xe2, 0x5a, 0x71, 0x90, 0xe5, 0xc9, 0x35, 0x1e, 0x68,
	0x51, 0xbe, 0xfb, 0xfa, 0x1e, 0x2f, 0xbf, 0x7d, 0x7c, 0x80, 0xc4, 0x5e, 0x9e, 0x41, 0x02, 0x62,
	0x7e, 0x5d, 0x2b, 0x87, 0x32, 0x49, 0x51, 0x94, 0xb7, 0x27, 0xd4, 0x12, 0xfe, 0xdd, 0xe5, 0xfe,
	0xbd, 0x87, 0x6f, 0x94, 0xf0, 0xcf, 0xf7, 0xa6, 0xd0, 0xc1, 0x7f, 0x20, 0x78, 0x63, 0xec, 0xc9,
	0x1f, 0x5f, 0x2f, 0x55, 0x36, 0x79, 0xe4, 0x45, 0xf9, 0xea, 0xf3, 0xaa, 0x0b, 0x8f, 0xd7, 0xb9,
	0xc7, 0x6f, 0xe3, 0xab, 0x63, 0xab, 0x30, 0xe2, 0x23, 0xa1, 0x87, 0xff, 0x41, 0x62, 0x74, 0x8d,
	0xde, 0xea, 0xe0, 0x12, 0xb5, 0x35, 0x72, 0x17, 0xa3, 0xac, 0x4d, 0xa2, 0x22, 0xd0, 0x53, 0x8e,
	0xde, 0xc2, 0x9d, 0xe2, 0x7c, 0x85, 0x17, 0x4b, 0xf1, 0x7c, 0x05, 0x07, 0x25, 0x2d, 0x39, 0x0a,
	0x32, 0x04, 0x62, 0x17, 0x44, 0xfb, 0xf8, 0x23, 0x04, 0x73, 0xa3, 0x97, 0x49, 0x78, 0xa5, 0x20,
	0x07, 0xa9, 0x3b, 0x27, 0x45, 0xcd, 0x94, 0xde, 0x24, 0x2d, 0x2e, 0x75, 0xd3, 0x22, 0x76, 0x7b,
	0xdc, 0x6c, 0x18, 0xb0, 0xc8, 0x25, 0xfc, 0x5f, 0x24, 0x06, 0x79, 0xea, 0x2a, 0x04, 0x97, 0x08,
	0xe9, 0xe8, 0xfd, 0x95, 0x72, 0x75, 0x22, 0x1d, 0x91, 0x07, 0x97, 0xe3, 0xfd, 0x3e, 0xee, 0x16,
	0xe7, 0x21, 0xba, 0xd3, 0xf9, 0xcc, 0x89, 0x78, 0x86, 0xd2, 0x4c, 0x20, 0xcd, 0xad, 0x70, 0xf9,
	0xf6, 0xc8, 0x24, 0x88, 0xca, 0xd7, 0x9e, 0x5b, 0x5f, 0x44, 0xe6, 0x2b, 0x3c, 0x32, 0xef, 0xe0,
	0x6b, 0x25, 0xfb, 0x8b, 0x73, 0xbe, 0xb0, 0xc1, 0x9e, 0xa0, 0x88, 0x6b, 0x84, 0x3b, 0xc8, 0x07,
	0x96, 0xd7, 0x95, 0xcc, 0x05, 0x7f, 0xa9, 0xdc, 0xae, 0x93, 0xe2, 0x48, 0xca, 0x97, 0x27, 0x57,
	0x14, 0x2e, 0x5d, 0xe3, 0x2e, 0x69, 0x78, 0x25, 0x27, 0xd9, 0x9e, 0x9e, 0xe0, 0x50, 0xfa, 0x9e,
	0x39, 0x60, 0xfb, 0xf8, 0x0f, 0xb2, 0x4c, 0x53, 0xcc, 0xa7, 0xa8, 0x4c, 0xf3, 0x38, 0x56, 0x51,
	0x99, 0xe6, 0x52, 0xab, 0x12, 0xc8, 0x25, 0xf3, 0x8a, 0xca, 0x6f, 0x1f, 0xff, 0x09, 0xc1, 0xc9,
	0x38, 0xed, 0xc2, 0x4b, 0x45, 0x2d, 0x12, 0x67, 0x66, 0x4a, 0x35, 0xe7, 0xdc, 0xe2, 0x91, 0x36,
	0x3f, 0xb4, 0x10, 0x0e, 0xa8, 0x89, 0xbf, 0x9b, 0x07, 0x68, 0x3a, 0xcd, 0xf2, 0x4b, 0x24, 0x88,
	0x63, 0x92, 0xc8, 0x61, 0x3d, 0xdf, 0x91, 0x4c, 0xca, 0xa7, 0x5c, 0xcc, 0x54, 0x48, 0xca, 0xaa,
	0x6b, 0xdc, 0xa9, 0x15, 0xbc, 0x9c, 0xe9, 0x54, 0x48, 0xda, 0xba, 0x5c, 0x5a, 0x54, 0xc7, 0xef,
	0x65, 0x75, 0xa4, 0xa8, 0x63, 0x51, 0x75, 0xe4, 0xf1, 0x4c, 0x65, 0x72, 0x06, 0x34, 0xa6, 0x36,
	0x24, 0xea, 0x00, 0xae, 0xbe, 0x17, 0xb0, 0xcd, 0x7d, 0xfc, 0xab, 0x70, 0x3f, 0x88, 0xa8, 0x59,
	0xe1, 0x7e, 0x90, 0xe2, 0x8d, 0xca, 0x95, 0x92, 0xd2, 0xa2, 0x86, 0x75, 0x8e, 0xf3, 0x32, 0xbe,
	0x94, 0x3b, 0x50, 0x92, 0x58, 0xf1, 0xc7, 0x08, 0x20, 0x62, 0x42, 0xf8, 0xad, 0x7c, 0x73, 0x29,
	0xa2, 0xa6, 0xac, 0x94, 0x13, 0x96, 0xed, 0xf5, 0xa1, 0x4f, 0x00, 0x0a, 0xf1, 0x45, 0xfc, 0x29,
	0x9c, 0x71, 0xbf, 0x45, 0x50, 0x09, 0x17, 0xc3, 0xcb, 0x25, 0x2c, 0x4a, 0x74, 0x6f, 0x95, 0x92,
	0x15, 0xe0, 0x6e, 0x47, 0xe0, 0xae, 0xe3, 0xf5, 0x62, 0x70, 0xfa, 0x5e, 0x9a, 0x77, 0x85, 0xe7,
	0xba, 0xda, 0xfb, 0x4f, 0x0e, 0xab, 0xe8, 0xe9, 0x61, 0x15, 0xfd, 0xf3, 0xb0, 0x8a, 0x3e, 0x7a,
	0x56, 0x3d, 0xf2, 0xf4, 0x59, 0xf5, 0xc8, 0xdf, 0x9f, 0x55, 0x8f, 0x7c, 0x67, 0xad, 0x63, 0x79,
	0xdd, 0xfe, 0xae, 0xd6, 0xa2, 0x0f, 0xf4, 0xf7, 0x02, 0x03, 0x5f, 0x27, 0xde, 0x23, 0xda, 0xbb,
	0x1f, 0xda, 0x7b, 0x1c, 0x59, 0xf4, 0x86, 0x2e, 0x61, 0xbb, 0x2f, 0xf3, 0x7f, 0xae, 0x5e, 0xfd,
	0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2e, 0xbe, 0xb3, 0x4f, 0xa0, 0x1e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// QueryOperatorInfo queries the operator information.
	QueryOperatorInfo(ctx context.Context, in *GetOperatorInfoReq, opts ...grpc.CallOption) (*OperatorInfo, error)
	// QueryAllOperators queries all operators.
	QueryAllOperators(ctx context.Context, in *QueryAllOperatorsRequest, opts ...grpc.CallOption) (*QueryAllOperatorsResponse, error)
	// QueryOperatorConsKeyForChainID queries the consensus public key for the operator
	QueryOperatorConsKeyForChainID(ctx context.Context, in *QueryOperatorConsKeyRequest, opts ...grpc.CallOption) (*QueryOperatorConsKeyResponse, error)
	// QueryOperatorConsAddressForChainID queries the consensus address for the operator.
	QueryOperatorConsAddressForChainID(ctx context.Context, in *QueryOperatorConsAddressRequest, opts ...grpc.CallOption) (*QueryOperatorConsAddressResponse, error)
	// QueryAllOperatorConsKeysByChainID queries all operators and their consensus public keys
	// for a specific chain ID
	QueryAllOperatorConsKeysByChainID(ctx context.Context, in *QueryAllOperatorConsKeysByChainIDRequest, opts ...grpc.CallOption) (*QueryAllOperatorConsKeysByChainIDResponse, error)
	// QueryOperatorUSDValue queries the opted-in USD value for the operator
	QueryOperatorUSDValue(ctx context.Context, in *QueryOperatorUSDValueRequest, opts ...grpc.CallOption) (*QueryOperatorUSDValueResponse, error)
	// QueryAVSUSDValue queries the USD value for the AVS
	QueryAVSUSDValue(ctx context.Context, in *QueryAVSUSDValueRequest, opts ...grpc.CallOption) (*DecValueField, error)
	// QueryOperatorSlashInfo queries the slash information for the specified operator and AVS
	QueryOperatorSlashInfo(ctx context.Context, in *QueryOperatorSlashInfoRequest, opts ...grpc.CallOption) (*QueryOperatorSlashInfoResponse, error)
	// QueryAllOperatorConsAddrsByChainID queries all operators and their consensus addresses
	// for a specific chain ID
	QueryAllOperatorConsAddrsByChainID(ctx context.Context, in *QueryAllOperatorConsAddrsByChainIDRequest, opts ...grpc.CallOption) (*QueryAllOperatorConsAddrsByChainIDResponse, error)
	// QueryAllOperatorsWithOptInAVS queries  operator list by avs.
	QueryAllOperatorsWithOptInAVS(ctx context.Context, in *QueryAllOperatorsByOptInAVSRequest, opts ...grpc.CallOption) (*QueryAllOperatorsByOptInAVSResponse, error)
	// QueryAllAVSsByOperator queries avs list.
	QueryAllAVSsByOperator(ctx context.Context, in *QueryAllAVSsByOperatorRequest, opts ...grpc.CallOption) (*QueryAllAVSsByOperatorResponse, error)
	// QueryOptInfo queries specified opted information.
	QueryOptInfo(ctx context.Context, in *QueryOptInfoRequest, opts ...grpc.CallOption) (*OptedInfo, error)
	// QuerySnapshotHelper queries the snapshot helper of the AVS
	QuerySnapshotHelper(ctx context.Context, in *QuerySnapshotHelperRequest, opts ...grpc.CallOption) (*SnapshotHelper, error)
	// QuerySpecifiedSnapshot queries the voting power snapshot of specified AVS and height
	QuerySpecifiedSnapshot(ctx context.Context, in *QuerySpecifiedSnapshotRequest, opts ...grpc.CallOption) (*VotingPowerSnapshotKeyHeight, error)
	// QueryAllSnapshot queries all voting power snapshot for the specified AVS
	QueryAllSnapshot(ctx context.Context, in *QueryAllSnapshotRequest, opts ...grpc.CallOption) (*QueryAllSnapshotResponse, error)
	// Validators queries all validators that match the given status.
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	Validators(ctx context.Context, in *QueryValidatorsRequest, opts ...grpc.CallOption) (*QueryValidatorsResponse, error)
	// Validator queries validator info for given validator address.
	Validator(ctx context.Context, in *QueryValidatorRequest, opts ...grpc.CallOption) (*QueryValidatorResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryOperatorInfo(ctx context.Context, in *GetOperatorInfoReq, opts ...grpc.CallOption) (*OperatorInfo, error) {
	out := new(OperatorInfo)
	err := c.cc.Invoke(ctx, "/exocore.operator.v1.Query/QueryOperatorInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllOperators(ctx context.Context, in *QueryAllOperatorsRequest, opts ...grpc.CallOption) (*QueryAllOperatorsResponse, error) {
	out := new(QueryAllOperatorsResponse)
	err := c.cc.Invoke(ctx, "/exocore.operator.v1.Query/QueryAllOperators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryOperatorConsKeyForChainID(ctx context.Context, in *QueryOperatorConsKeyRequest, opts ...grpc.CallOption) (*QueryOperatorConsKeyResponse, error) {
	out := new(QueryOperatorConsKeyResponse)
	err := c.cc.Invoke(ctx, "/exocore.operator.v1.Query/QueryOperatorConsKeyForChainID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryOperatorConsAddressForChainID(ctx context.Context, in *QueryOperatorConsAddressRequest, opts ...grpc.CallOption) (*QueryOperatorConsAddressResponse, error) {
	out := new(QueryOperatorConsAddressResponse)
	err := c.cc.Invoke(ctx, "/exocore.operator.v1.Query/QueryOperatorConsAddressForChainID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllOperatorConsKeysByChainID(ctx context.Context, in *QueryAllOperatorConsKeysByChainIDRequest, opts ...grpc.CallOption) (*QueryAllOperatorConsKeysByChainIDResponse, error) {
	out := new(QueryAllOperatorConsKeysByChainIDResponse)
	err := c.cc.Invoke(ctx, "/exocore.operator.v1.Query/QueryAllOperatorConsKeysByChainID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryOperatorUSDValue(ctx context.Context, in *QueryOperatorUSDValueRequest, opts ...grpc.CallOption) (*QueryOperatorUSDValueResponse, error) {
	out := new(QueryOperatorUSDValueResponse)
	err := c.cc.Invoke(ctx, "/exocore.operator.v1.Query/QueryOperatorUSDValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAVSUSDValue(ctx context.Context, in *QueryAVSUSDValueRequest, opts ...grpc.CallOption) (*DecValueField, error) {
	out := new(DecValueField)
	err := c.cc.Invoke(ctx, "/exocore.operator.v1.Query/QueryAVSUSDValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryOperatorSlashInfo(ctx context.Context, in *QueryOperatorSlashInfoRequest, opts ...grpc.CallOption) (*QueryOperatorSlashInfoResponse, error) {
	out := new(QueryOperatorSlashInfoResponse)
	err := c.cc.Invoke(ctx, "/exocore.operator.v1.Query/QueryOperatorSlashInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllOperatorConsAddrsByChainID(ctx context.Context, in *QueryAllOperatorConsAddrsByChainIDRequest, opts ...grpc.CallOption) (*QueryAllOperatorConsAddrsByChainIDResponse, error) {
	out := new(QueryAllOperatorConsAddrsByChainIDResponse)
	err := c.cc.Invoke(ctx, "/exocore.operator.v1.Query/QueryAllOperatorConsAddrsByChainID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllOperatorsWithOptInAVS(ctx context.Context, in *QueryAllOperatorsByOptInAVSRequest, opts ...grpc.CallOption) (*QueryAllOperatorsByOptInAVSResponse, error) {
	out := new(QueryAllOperatorsByOptInAVSResponse)
	err := c.cc.Invoke(ctx, "/exocore.operator.v1.Query/QueryAllOperatorsWithOptInAVS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllAVSsByOperator(ctx context.Context, in *QueryAllAVSsByOperatorRequest, opts ...grpc.CallOption) (*QueryAllAVSsByOperatorResponse, error) {
	out := new(QueryAllAVSsByOperatorResponse)
	err := c.cc.Invoke(ctx, "/exocore.operator.v1.Query/QueryAllAVSsByOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryOptInfo(ctx context.Context, in *QueryOptInfoRequest, opts ...grpc.CallOption) (*OptedInfo, error) {
	out := new(OptedInfo)
	err := c.cc.Invoke(ctx, "/exocore.operator.v1.Query/QueryOptInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuerySnapshotHelper(ctx context.Context, in *QuerySnapshotHelperRequest, opts ...grpc.CallOption) (*SnapshotHelper, error) {
	out := new(SnapshotHelper)
	err := c.cc.Invoke(ctx, "/exocore.operator.v1.Query/QuerySnapshotHelper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuerySpecifiedSnapshot(ctx context.Context, in *QuerySpecifiedSnapshotRequest, opts ...grpc.CallOption) (*VotingPowerSnapshotKeyHeight, error) {
	out := new(VotingPowerSnapshotKeyHeight)
	err := c.cc.Invoke(ctx, "/exocore.operator.v1.Query/QuerySpecifiedSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAllSnapshot(ctx context.Context, in *QueryAllSnapshotRequest, opts ...grpc.CallOption) (*QueryAllSnapshotResponse, error) {
	out := new(QueryAllSnapshotResponse)
	err := c.cc.Invoke(ctx, "/exocore.operator.v1.Query/QueryAllSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Validators(ctx context.Context, in *QueryValidatorsRequest, opts ...grpc.CallOption) (*QueryValidatorsResponse, error) {
	out := new(QueryValidatorsResponse)
	err := c.cc.Invoke(ctx, "/exocore.operator.v1.Query/Validators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Validator(ctx context.Context, in *QueryValidatorRequest, opts ...grpc.CallOption) (*QueryValidatorResponse, error) {
	out := new(QueryValidatorResponse)
	err := c.cc.Invoke(ctx, "/exocore.operator.v1.Query/Validator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// QueryOperatorInfo queries the operator information.
	QueryOperatorInfo(context.Context, *GetOperatorInfoReq) (*OperatorInfo, error)
	// QueryAllOperators queries all operators.
	QueryAllOperators(context.Context, *QueryAllOperatorsRequest) (*QueryAllOperatorsResponse, error)
	// QueryOperatorConsKeyForChainID queries the consensus public key for the operator
	QueryOperatorConsKeyForChainID(context.Context, *QueryOperatorConsKeyRequest) (*QueryOperatorConsKeyResponse, error)
	// QueryOperatorConsAddressForChainID queries the consensus address for the operator.
	QueryOperatorConsAddressForChainID(context.Context, *QueryOperatorConsAddressRequest) (*QueryOperatorConsAddressResponse, error)
	// QueryAllOperatorConsKeysByChainID queries all operators and their consensus public keys
	// for a specific chain ID
	QueryAllOperatorConsKeysByChainID(context.Context, *QueryAllOperatorConsKeysByChainIDRequest) (*QueryAllOperatorConsKeysByChainIDResponse, error)
	// QueryOperatorUSDValue queries the opted-in USD value for the operator
	QueryOperatorUSDValue(context.Context, *QueryOperatorUSDValueRequest) (*QueryOperatorUSDValueResponse, error)
	// QueryAVSUSDValue queries the USD value for the AVS
	QueryAVSUSDValue(context.Context, *QueryAVSUSDValueRequest) (*DecValueField, error)
	// QueryOperatorSlashInfo queries the slash information for the specified operator and AVS
	QueryOperatorSlashInfo(context.Context, *QueryOperatorSlashInfoRequest) (*QueryOperatorSlashInfoResponse, error)
	// QueryAllOperatorConsAddrsByChainID queries all operators and their consensus addresses
	// for a specific chain ID
	QueryAllOperatorConsAddrsByChainID(context.Context, *QueryAllOperatorConsAddrsByChainIDRequest) (*QueryAllOperatorConsAddrsByChainIDResponse, error)
	// QueryAllOperatorsWithOptInAVS queries  operator list by avs.
	QueryAllOperatorsWithOptInAVS(context.Context, *QueryAllOperatorsByOptInAVSRequest) (*QueryAllOperatorsByOptInAVSResponse, error)
	// QueryAllAVSsByOperator queries avs list.
	QueryAllAVSsByOperator(context.Context, *QueryAllAVSsByOperatorRequest) (*QueryAllAVSsByOperatorResponse, error)
	// QueryOptInfo queries specified opted information.
	QueryOptInfo(context.Context, *QueryOptInfoRequest) (*OptedInfo, error)
	// QuerySnapshotHelper queries the snapshot helper of the AVS
	QuerySnapshotHelper(context.Context, *QuerySnapshotHelperRequest) (*SnapshotHelper, error)
	// QuerySpecifiedSnapshot queries the voting power snapshot of specified AVS and height
	QuerySpecifiedSnapshot(context.Context, *QuerySpecifiedSnapshotRequest) (*VotingPowerSnapshotKeyHeight, error)
	// QueryAllSnapshot queries all voting power snapshot for the specified AVS
	QueryAllSnapshot(context.Context, *QueryAllSnapshotRequest) (*QueryAllSnapshotResponse, error)
	// Validators queries all validators that match the given status.
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	Validators(context.Context, *QueryValidatorsRequest) (*QueryValidatorsResponse, error)
	// Validator queries validator info for given validator address.
	Validator(context.Context, *QueryValidatorRequest) (*QueryValidatorResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) QueryOperatorInfo(ctx context.Context, req *GetOperatorInfoReq) (*OperatorInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOperatorInfo not implemented")
}
func (*UnimplementedQueryServer) QueryAllOperators(ctx context.Context, req *QueryAllOperatorsRequest) (*QueryAllOperatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllOperators not implemented")
}
func (*UnimplementedQueryServer) QueryOperatorConsKeyForChainID(ctx context.Context, req *QueryOperatorConsKeyRequest) (*QueryOperatorConsKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOperatorConsKeyForChainID not implemented")
}
func (*UnimplementedQueryServer) QueryOperatorConsAddressForChainID(ctx context.Context, req *QueryOperatorConsAddressRequest) (*QueryOperatorConsAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOperatorConsAddressForChainID not implemented")
}
func (*UnimplementedQueryServer) QueryAllOperatorConsKeysByChainID(ctx context.Context, req *QueryAllOperatorConsKeysByChainIDRequest) (*QueryAllOperatorConsKeysByChainIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllOperatorConsKeysByChainID not implemented")
}
func (*UnimplementedQueryServer) QueryOperatorUSDValue(ctx context.Context, req *QueryOperatorUSDValueRequest) (*QueryOperatorUSDValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOperatorUSDValue not implemented")
}
func (*UnimplementedQueryServer) QueryAVSUSDValue(ctx context.Context, req *QueryAVSUSDValueRequest) (*DecValueField, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAVSUSDValue not implemented")
}
func (*UnimplementedQueryServer) QueryOperatorSlashInfo(ctx context.Context, req *QueryOperatorSlashInfoRequest) (*QueryOperatorSlashInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOperatorSlashInfo not implemented")
}
func (*UnimplementedQueryServer) QueryAllOperatorConsAddrsByChainID(ctx context.Context, req *QueryAllOperatorConsAddrsByChainIDRequest) (*QueryAllOperatorConsAddrsByChainIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllOperatorConsAddrsByChainID not implemented")
}
func (*UnimplementedQueryServer) QueryAllOperatorsWithOptInAVS(ctx context.Context, req *QueryAllOperatorsByOptInAVSRequest) (*QueryAllOperatorsByOptInAVSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllOperatorsWithOptInAVS not implemented")
}
func (*UnimplementedQueryServer) QueryAllAVSsByOperator(ctx context.Context, req *QueryAllAVSsByOperatorRequest) (*QueryAllAVSsByOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllAVSsByOperator not implemented")
}
func (*UnimplementedQueryServer) QueryOptInfo(ctx context.Context, req *QueryOptInfoRequest) (*OptedInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOptInfo not implemented")
}
func (*UnimplementedQueryServer) QuerySnapshotHelper(ctx context.Context, req *QuerySnapshotHelperRequest) (*SnapshotHelper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySnapshotHelper not implemented")
}
func (*UnimplementedQueryServer) QuerySpecifiedSnapshot(ctx context.Context, req *QuerySpecifiedSnapshotRequest) (*VotingPowerSnapshotKeyHeight, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySpecifiedSnapshot not implemented")
}
func (*UnimplementedQueryServer) QueryAllSnapshot(ctx context.Context, req *QueryAllSnapshotRequest) (*QueryAllSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllSnapshot not implemented")
}
func (*UnimplementedQueryServer) Validators(ctx context.Context, req *QueryValidatorsRequest) (*QueryValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validators not implemented")
}
func (*UnimplementedQueryServer) Validator(ctx context.Context, req *QueryValidatorRequest) (*QueryValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validator not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueryOperatorInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperatorInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryOperatorInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.operator.v1.Query/QueryOperatorInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOperatorInfo(ctx, req.(*GetOperatorInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllOperators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllOperatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllOperators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.operator.v1.Query/QueryAllOperators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllOperators(ctx, req.(*QueryAllOperatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryOperatorConsKeyForChainID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorConsKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryOperatorConsKeyForChainID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.operator.v1.Query/QueryOperatorConsKeyForChainID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOperatorConsKeyForChainID(ctx, req.(*QueryOperatorConsKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryOperatorConsAddressForChainID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorConsAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryOperatorConsAddressForChainID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.operator.v1.Query/QueryOperatorConsAddressForChainID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOperatorConsAddressForChainID(ctx, req.(*QueryOperatorConsAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllOperatorConsKeysByChainID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllOperatorConsKeysByChainIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllOperatorConsKeysByChainID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.operator.v1.Query/QueryAllOperatorConsKeysByChainID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllOperatorConsKeysByChainID(ctx, req.(*QueryAllOperatorConsKeysByChainIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryOperatorUSDValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorUSDValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryOperatorUSDValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.operator.v1.Query/QueryOperatorUSDValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOperatorUSDValue(ctx, req.(*QueryOperatorUSDValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAVSUSDValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAVSUSDValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAVSUSDValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.operator.v1.Query/QueryAVSUSDValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAVSUSDValue(ctx, req.(*QueryAVSUSDValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryOperatorSlashInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorSlashInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryOperatorSlashInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.operator.v1.Query/QueryOperatorSlashInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOperatorSlashInfo(ctx, req.(*QueryOperatorSlashInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllOperatorConsAddrsByChainID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllOperatorConsAddrsByChainIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllOperatorConsAddrsByChainID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.operator.v1.Query/QueryAllOperatorConsAddrsByChainID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllOperatorConsAddrsByChainID(ctx, req.(*QueryAllOperatorConsAddrsByChainIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllOperatorsWithOptInAVS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllOperatorsByOptInAVSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllOperatorsWithOptInAVS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.operator.v1.Query/QueryAllOperatorsWithOptInAVS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllOperatorsWithOptInAVS(ctx, req.(*QueryAllOperatorsByOptInAVSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllAVSsByOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAVSsByOperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllAVSsByOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.operator.v1.Query/QueryAllAVSsByOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllAVSsByOperator(ctx, req.(*QueryAllAVSsByOperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryOptInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOptInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryOptInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.operator.v1.Query/QueryOptInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryOptInfo(ctx, req.(*QueryOptInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuerySnapshotHelper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySnapshotHelperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuerySnapshotHelper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.operator.v1.Query/QuerySnapshotHelper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuerySnapshotHelper(ctx, req.(*QuerySnapshotHelperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuerySpecifiedSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpecifiedSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuerySpecifiedSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.operator.v1.Query/QuerySpecifiedSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuerySpecifiedSnapshot(ctx, req.(*QuerySpecifiedSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAllSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAllSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.operator.v1.Query/QueryAllSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAllSnapshot(ctx, req.(*QueryAllSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Validators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Validators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.operator.v1.Query/Validators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Validators(ctx, req.(*QueryValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Validator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Validator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.operator.v1.Query/Validator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Validator(ctx, req.(*QueryValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "exocore.operator.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryOperatorInfo",
			Handler:    _Query_QueryOperatorInfo_Handler,
		},
		{
			MethodName: "QueryAllOperators",
			Handler:    _Query_QueryAllOperators_Handler,
		},
		{
			MethodName: "QueryOperatorConsKeyForChainID",
			Handler:    _Query_QueryOperatorConsKeyForChainID_Handler,
		},
		{
			MethodName: "QueryOperatorConsAddressForChainID",
			Handler:    _Query_QueryOperatorConsAddressForChainID_Handler,
		},
		{
			MethodName: "QueryAllOperatorConsKeysByChainID",
			Handler:    _Query_QueryAllOperatorConsKeysByChainID_Handler,
		},
		{
			MethodName: "QueryOperatorUSDValue",
			Handler:    _Query_QueryOperatorUSDValue_Handler,
		},
		{
			MethodName: "QueryAVSUSDValue",
			Handler:    _Query_QueryAVSUSDValue_Handler,
		},
		{
			MethodName: "QueryOperatorSlashInfo",
			Handler:    _Query_QueryOperatorSlashInfo_Handler,
		},
		{
			MethodName: "QueryAllOperatorConsAddrsByChainID",
			Handler:    _Query_QueryAllOperatorConsAddrsByChainID_Handler,
		},
		{
			MethodName: "QueryAllOperatorsWithOptInAVS",
			Handler:    _Query_QueryAllOperatorsWithOptInAVS_Handler,
		},
		{
			MethodName: "QueryAllAVSsByOperator",
			Handler:    _Query_QueryAllAVSsByOperator_Handler,
		},
		{
			MethodName: "QueryOptInfo",
			Handler:    _Query_QueryOptInfo_Handler,
		},
		{
			MethodName: "QuerySnapshotHelper",
			Handler:    _Query_QuerySnapshotHelper_Handler,
		},
		{
			MethodName: "QuerySpecifiedSnapshot",
			Handler:    _Query_QuerySpecifiedSnapshot_Handler,
		},
		{
			MethodName: "QueryAllSnapshot",
			Handler:    _Query_QueryAllSnapshot_Handler,
		},
		{
			MethodName: "Validators",
			Handler:    _Query_Validators_Handler,
		},
		{
			MethodName: "Validator",
			Handler:    _Query_Validator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exocore/operator/v1/query.proto",
}

func (m *GetOperatorInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOperatorInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOperatorInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorAddr) > 0 {
		i -= len(m.OperatorAddr)
		copy(dAtA[i:], m.OperatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OperatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOperatorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOperatorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOperatorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOperatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOperatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOperatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAccAddrs) > 0 {
		for iNdEx := len(m.OperatorAccAddrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OperatorAccAddrs[iNdEx])
			copy(dAtA[i:], m.OperatorAccAddrs[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.OperatorAccAddrs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OperatorAVSAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorAVSAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorAVSAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AvsAddress) > 0 {
		i -= len(m.AvsAddress)
		copy(dAtA[i:], m.AvsAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AvsAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAddr) > 0 {
		i -= len(m.OperatorAddr)
		copy(dAtA[i:], m.OperatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OperatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOperatorUSDValueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorUSDValueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorUSDValueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OperatorAVSAddress != nil {
		{
			size, err := m.OperatorAVSAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOperatorUSDValueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorUSDValueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorUSDValueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.USDValues != nil {
		{
			size, err := m.USDValues.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAVSUSDValueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAVSUSDValueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAVSUSDValueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AVSAddress) > 0 {
		i -= len(m.AVSAddress)
		copy(dAtA[i:], m.AVSAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AVSAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOperatorSlashInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorSlashInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorSlashInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.OperatorAVSAddress != nil {
		{
			size, err := m.OperatorAVSAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OperatorSlashInfoByID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorSlashInfoByID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorSlashInfoByID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SlashID) > 0 {
		i -= len(m.SlashID)
		copy(dAtA[i:], m.SlashID)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SlashID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOperatorSlashInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorSlashInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorSlashInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AllSlashInfo) > 0 {
		for iNdEx := len(m.AllSlashInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllSlashInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOperatorConsKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorConsKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorConsKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAccAddr) > 0 {
		i -= len(m.OperatorAccAddr)
		copy(dAtA[i:], m.OperatorAccAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OperatorAccAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOperatorConsKeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorConsKeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorConsKeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OptingOut {
		i--
		if m.OptingOut {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.PublicKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryOperatorConsAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorConsAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorConsAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAccAddr) > 0 {
		i -= len(m.OperatorAccAddr)
		copy(dAtA[i:], m.OperatorAccAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OperatorAccAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOperatorConsAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorConsAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorConsAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OptingOut {
		i--
		if m.OptingOut {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.ConsAddr) > 0 {
		i -= len(m.ConsAddr)
		copy(dAtA[i:], m.ConsAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ConsAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOperatorConsKeysByChainIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOperatorConsKeysByChainIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOperatorConsKeysByChainIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOperatorConsKeysByChainIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOperatorConsKeysByChainIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOperatorConsKeysByChainIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorConsKeys) > 0 {
		for iNdEx := len(m.OperatorConsKeys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OperatorConsKeys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OperatorConsKeyPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorConsKeyPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorConsKeyPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OptingOut {
		i--
		if m.OptingOut {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.PublicKey != nil {
		{
			size, err := m.PublicKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAccAddr) > 0 {
		i -= len(m.OperatorAccAddr)
		copy(dAtA[i:], m.OperatorAccAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OperatorAccAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOperatorConsAddrsByChainIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOperatorConsAddrsByChainIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOperatorConsAddrsByChainIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOperatorConsAddrsByChainIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOperatorConsAddrsByChainIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOperatorConsAddrsByChainIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorConsAddrs) > 0 {
		for iNdEx := len(m.OperatorConsAddrs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OperatorConsAddrs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OperatorConsAddrPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorConsAddrPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorConsAddrPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OptingOut {
		i--
		if m.OptingOut {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.ConsAddr) > 0 {
		i -= len(m.ConsAddr)
		copy(dAtA[i:], m.ConsAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ConsAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAccAddr) > 0 {
		i -= len(m.OperatorAccAddr)
		copy(dAtA[i:], m.OperatorAccAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OperatorAccAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOperatorsByOptInAVSRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOperatorsByOptInAVSRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOperatorsByOptInAVSRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Avs) > 0 {
		i -= len(m.Avs)
		copy(dAtA[i:], m.Avs)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Avs)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOperatorsByOptInAVSResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOperatorsByOptInAVSResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOperatorsByOptInAVSResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorList) > 0 {
		for iNdEx := len(m.OperatorList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OperatorList[iNdEx])
			copy(dAtA[i:], m.OperatorList[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.OperatorList[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAVSsByOperatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAVSsByOperatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAVSsByOperatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAVSsByOperatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAVSsByOperatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAVSsByOperatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AvsList) > 0 {
		for iNdEx := len(m.AvsList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AvsList[iNdEx])
			copy(dAtA[i:], m.AvsList[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.AvsList[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOptInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOptInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOptInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OperatorAVSAddress != nil {
		{
			size, err := m.OperatorAVSAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySnapshotHelperRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySnapshotHelperRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySnapshotHelperRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Avs) > 0 {
		i -= len(m.Avs)
		copy(dAtA[i:], m.Avs)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Avs)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpecifiedSnapshotRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpecifiedSnapshotRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpecifiedSnapshotRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Avs) > 0 {
		i -= len(m.Avs)
		copy(dAtA[i:], m.Avs)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Avs)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VotingPowerSnapshotKeyHeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VotingPowerSnapshotKeyHeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VotingPowerSnapshotKeyHeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Snapshot != nil {
		{
			size, err := m.Snapshot.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.SnapshotKeyHeight != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SnapshotKeyHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSnapshotRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSnapshotRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSnapshotRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Avs) > 0 {
		i -= len(m.Avs)
		copy(dAtA[i:], m.Avs)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Avs)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSnapshotResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSnapshotResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSnapshotResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Snapshots) > 0 {
		for iNdEx := len(m.Snapshots) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Snapshots[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidatorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAccAddr) > 0 {
		i -= len(m.ValidatorAccAddr)
		copy(dAtA[i:], m.ValidatorAccAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAccAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryValidatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryValidatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryValidatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Validator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetOperatorInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllOperatorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllOperatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OperatorAccAddrs) > 0 {
		for _, s := range m.OperatorAccAddrs {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OperatorAVSAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AvsAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOperatorUSDValueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperatorAVSAddress != nil {
		l = m.OperatorAVSAddress.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOperatorUSDValueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.USDValues != nil {
		l = m.USDValues.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAVSUSDValueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AVSAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOperatorSlashInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperatorAVSAddress != nil {
		l = m.OperatorAVSAddress.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OperatorSlashInfoByID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SlashID)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOperatorSlashInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AllSlashInfo) > 0 {
		for _, e := range m.AllSlashInfo {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOperatorConsKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAccAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOperatorConsKeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PublicKey.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.OptingOut {
		n += 2
	}
	return n
}

func (m *QueryOperatorConsAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAccAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOperatorConsAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConsAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.OptingOut {
		n += 2
	}
	return n
}

func (m *QueryAllOperatorConsKeysByChainIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllOperatorConsKeysByChainIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OperatorConsKeys) > 0 {
		for _, e := range m.OperatorConsKeys {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OperatorConsKeyPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAccAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.PublicKey != nil {
		l = m.PublicKey.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.OptingOut {
		n += 2
	}
	return n
}

func (m *QueryAllOperatorConsAddrsByChainIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllOperatorConsAddrsByChainIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OperatorConsAddrs) > 0 {
		for _, e := range m.OperatorConsAddrs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *OperatorConsAddrPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAccAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ConsAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.OptingOut {
		n += 2
	}
	return n
}

func (m *QueryAllOperatorsByOptInAVSRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Avs)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllOperatorsByOptInAVSResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OperatorList) > 0 {
		for _, s := range m.OperatorList {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllAVSsByOperatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAVSsByOperatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AvsList) > 0 {
		for _, s := range m.AvsList {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryOptInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperatorAVSAddress != nil {
		l = m.OperatorAVSAddress.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySnapshotHelperRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Avs)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySpecifiedSnapshotRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Avs)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *VotingPowerSnapshotKeyHeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SnapshotKeyHeight != 0 {
		n += 1 + sovQuery(uint64(m.SnapshotKeyHeight))
	}
	if m.Snapshot != nil {
		l = m.Snapshot.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSnapshotRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Avs)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSnapshotResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Snapshots) > 0 {
		for _, e := range m.Snapshots {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValidatorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValidatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValidatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAccAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryValidatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Validator.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetOperatorInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOperatorInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOperatorInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOperatorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOperatorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOperatorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOperatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOperatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOperatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAccAddrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAccAddrs = append(m.OperatorAccAddrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorAVSAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorAVSAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorAVSAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvsAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvsAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorUSDValueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorUSDValueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorUSDValueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAVSAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OperatorAVSAddress == nil {
				m.OperatorAVSAddress = &OperatorAVSAddress{}
			}
			if err := m.OperatorAVSAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorUSDValueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorUSDValueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorUSDValueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field USDValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.USDValues == nil {
				m.USDValues = &OperatorOptedUSDValue{}
			}
			if err := m.USDValues.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAVSUSDValueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAVSUSDValueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAVSUSDValueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AVSAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AVSAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorSlashInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorSlashInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorSlashInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAVSAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OperatorAVSAddress == nil {
				m.OperatorAVSAddress = &OperatorAVSAddress{}
			}
			if err := m.OperatorAVSAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorSlashInfoByID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorSlashInfoByID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorSlashInfoByID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlashID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &OperatorSlashInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorSlashInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorSlashInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorSlashInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllSlashInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllSlashInfo = append(m.AllSlashInfo, &OperatorSlashInfoByID{})
			if err := m.AllSlashInfo[len(m.AllSlashInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorConsKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorConsKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorConsKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAccAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAccAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorConsKeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorConsKeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorConsKeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PublicKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptingOut", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptingOut = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorConsAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorConsAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorConsAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAccAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAccAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorConsAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorConsAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorConsAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptingOut", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptingOut = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOperatorConsKeysByChainIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOperatorConsKeysByChainIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOperatorConsKeysByChainIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOperatorConsKeysByChainIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOperatorConsKeysByChainIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOperatorConsKeysByChainIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorConsKeys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorConsKeys = append(m.OperatorConsKeys, &OperatorConsKeyPair{})
			if err := m.OperatorConsKeys[len(m.OperatorConsKeys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorConsKeyPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorConsKeyPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorConsKeyPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAccAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAccAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublicKey == nil {
				m.PublicKey = &crypto.PublicKey{}
			}
			if err := m.PublicKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptingOut", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptingOut = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOperatorConsAddrsByChainIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOperatorConsAddrsByChainIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOperatorConsAddrsByChainIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOperatorConsAddrsByChainIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOperatorConsAddrsByChainIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOperatorConsAddrsByChainIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorConsAddrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorConsAddrs = append(m.OperatorConsAddrs, &OperatorConsAddrPair{})
			if err := m.OperatorConsAddrs[len(m.OperatorConsAddrs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorConsAddrPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorConsAddrPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorConsAddrPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAccAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAccAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConsAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OptingOut", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OptingOut = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOperatorsByOptInAVSRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOperatorsByOptInAVSRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOperatorsByOptInAVSRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOperatorsByOptInAVSResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOperatorsByOptInAVSResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOperatorsByOptInAVSResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorList = append(m.OperatorList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAVSsByOperatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAVSsByOperatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAVSsByOperatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAVSsByOperatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAVSsByOperatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAVSsByOperatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvsList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvsList = append(m.AvsList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOptInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOptInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOptInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAVSAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OperatorAVSAddress == nil {
				m.OperatorAVSAddress = &OperatorAVSAddress{}
			}
			if err := m.OperatorAVSAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySnapshotHelperRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySnapshotHelperRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySnapshotHelperRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpecifiedSnapshotRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpecifiedSnapshotRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpecifiedSnapshotRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VotingPowerSnapshotKeyHeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VotingPowerSnapshotKeyHeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VotingPowerSnapshotKeyHeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotKeyHeight", wireType)
			}
			m.SnapshotKeyHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SnapshotKeyHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapshot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Snapshot == nil {
				m.Snapshot = &VotingPowerSnapshot{}
			}
			if err := m.Snapshot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSnapshotRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSnapshotRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSnapshotRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSnapshotResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSnapshotResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSnapshotResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapshots", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Snapshots = append(m.Snapshots, &VotingPowerSnapshotKeyHeight{})
			if err := m.Snapshots[len(m.Snapshots)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, Validator{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAccAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAccAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryValidatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryValidatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryValidatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Validator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
