// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exocore/delegation/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DelegationInfoReq is the request to obtain the delegation information
// by staker id and asset id.
type DelegationInfoReq struct {
	// staker_id is the staker id.
	StakerId string `protobuf:"bytes,1,opt,name=staker_id,json=stakerId,proto3" json:"staker_id,omitempty"`
	// asset_id is the asset id.
	AssetId string `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (m *DelegationInfoReq) Reset()         { *m = DelegationInfoReq{} }
func (m *DelegationInfoReq) String() string { return proto.CompactTextString(m) }
func (*DelegationInfoReq) ProtoMessage()    {}
func (*DelegationInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab345e1cf20490c, []int{0}
}
func (m *DelegationInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationInfoReq.Merge(m, src)
}
func (m *DelegationInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *DelegationInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationInfoReq proto.InternalMessageInfo

func (m *DelegationInfoReq) GetStakerId() string {
	if m != nil {
		return m.StakerId
	}
	return ""
}

func (m *DelegationInfoReq) GetAssetId() string {
	if m != nil {
		return m.AssetId
	}
	return ""
}

// StakerList is a list to save a batch of stakers
type StakerList struct {
	// stakers is a list of stakers. the caller is responsible for ensuring
	// uniqueness of the stakers, since dumping this into a map could lead
	// to non-deterministic behavior.
	Stakers []string `protobuf:"bytes,1,rep,name=stakers,proto3" json:"stakers,omitempty"`
}

func (m *StakerList) Reset()         { *m = StakerList{} }
func (m *StakerList) String() string { return proto.CompactTextString(m) }
func (*StakerList) ProtoMessage()    {}
func (*StakerList) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab345e1cf20490c, []int{1}
}
func (m *StakerList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakerList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakerList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakerList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakerList.Merge(m, src)
}
func (m *StakerList) XXX_Size() int {
	return m.Size()
}
func (m *StakerList) XXX_DiscardUnknown() {
	xxx_messageInfo_StakerList.DiscardUnknown(m)
}

var xxx_messageInfo_StakerList proto.InternalMessageInfo

func (m *StakerList) GetStakers() []string {
	if m != nil {
		return m.Stakers
	}
	return nil
}

// DelegationAmounts is the delegation amount response for a single delegation.
type DelegationAmounts struct {
	// undelegatable_share is the share that can be undelegated.
	// It's to reduce the state updating when slash occurs.
	// S_j = S * T_j / T, `S` and `T` is the current asset share and amount of operator,
	// and the T_j represents the change in staker's asset amount when some external
	// operations occur, such as: delegation, undelegation and slashing.
	// S_j represents the change in the staker's asset share,
	// so the updated share should be added by it.
	// A special case is the initial delegation, when T = 0 and S = 0, so T_j / T is undefined.
	// For the initial delegation, delegator j who delegates T_j tokens receive S_j = T_j shares.
	UndelegatableShare github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=undelegatable_share,json=undelegatableShare,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"undelegatable_share"`
	// wait_undelegation_amount is the amount that is waiting to be unbonded.
	WaitUndelegationAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=wait_undelegation_amount,json=waitUndelegationAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"wait_undelegation_amount"`
}

func (m *DelegationAmounts) Reset()         { *m = DelegationAmounts{} }
func (m *DelegationAmounts) String() string { return proto.CompactTextString(m) }
func (*DelegationAmounts) ProtoMessage()    {}
func (*DelegationAmounts) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab345e1cf20490c, []int{2}
}
func (m *DelegationAmounts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationAmounts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationAmounts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationAmounts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationAmounts.Merge(m, src)
}
func (m *DelegationAmounts) XXX_Size() int {
	return m.Size()
}
func (m *DelegationAmounts) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationAmounts.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationAmounts proto.InternalMessageInfo

// QueryDelegationInfoResponse is the response for delegations by staker id and
// asset id.
type QueryDelegationInfoResponse struct {
	// delegation_infos is the delegation information for each operator.
	DelegationInfos map[string]*DelegationAmounts `protobuf:"bytes,1,rep,name=delegation_infos,json=delegationInfos,proto3" json:"delegation_infos,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *QueryDelegationInfoResponse) Reset()         { *m = QueryDelegationInfoResponse{} }
func (m *QueryDelegationInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegationInfoResponse) ProtoMessage()    {}
func (*QueryDelegationInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab345e1cf20490c, []int{3}
}
func (m *QueryDelegationInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegationInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegationInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegationInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegationInfoResponse.Merge(m, src)
}
func (m *QueryDelegationInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegationInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegationInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegationInfoResponse proto.InternalMessageInfo

func (m *QueryDelegationInfoResponse) GetDelegationInfos() map[string]*DelegationAmounts {
	if m != nil {
		return m.DelegationInfos
	}
	return nil
}

// SingleDelegationInfoReq is the request to obtain the single delegation information
// and the maximum undelegatable amount of specific delegation.
type SingleDelegationInfoReq struct {
	// staker_id is the staker id.
	StakerId string `protobuf:"bytes,1,opt,name=staker_id,json=stakerId,proto3" json:"staker_id,omitempty"`
	// operator_addr is the operator address.
	OperatorAddr string `protobuf:"bytes,2,opt,name=operator_addr,json=operatorAddr,proto3" json:"operator_addr,omitempty"`
	// asset_id is the asset id.
	AssetId string `protobuf:"bytes,3,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (m *SingleDelegationInfoReq) Reset()         { *m = SingleDelegationInfoReq{} }
func (m *SingleDelegationInfoReq) String() string { return proto.CompactTextString(m) }
func (*SingleDelegationInfoReq) ProtoMessage()    {}
func (*SingleDelegationInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab345e1cf20490c, []int{4}
}
func (m *SingleDelegationInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SingleDelegationInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SingleDelegationInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SingleDelegationInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleDelegationInfoReq.Merge(m, src)
}
func (m *SingleDelegationInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *SingleDelegationInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleDelegationInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_SingleDelegationInfoReq proto.InternalMessageInfo

func (m *SingleDelegationInfoReq) GetStakerId() string {
	if m != nil {
		return m.StakerId
	}
	return ""
}

func (m *SingleDelegationInfoReq) GetOperatorAddr() string {
	if m != nil {
		return m.OperatorAddr
	}
	return ""
}

func (m *SingleDelegationInfoReq) GetAssetId() string {
	if m != nil {
		return m.AssetId
	}
	return ""
}

// SingleDelegationInfoResponse is the response to QuerySingleDelegationInfo
type SingleDelegationInfoResponse struct {
	// delegation_amounts is the delegation info recorded in the KVStore
	DelegationAmounts *DelegationAmounts `protobuf:"bytes,1,opt,name=delegation_amounts,json=delegationAmounts,proto3" json:"delegation_amounts,omitempty"`
	// max_undelegatable_amount is the maximum amount that can be undelegated
	MaxUndelegatableAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=max_undelegatable_amount,json=maxUndelegatableAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"max_undelegatable_amount"`
}

func (m *SingleDelegationInfoResponse) Reset()         { *m = SingleDelegationInfoResponse{} }
func (m *SingleDelegationInfoResponse) String() string { return proto.CompactTextString(m) }
func (*SingleDelegationInfoResponse) ProtoMessage()    {}
func (*SingleDelegationInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab345e1cf20490c, []int{5}
}
func (m *SingleDelegationInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SingleDelegationInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SingleDelegationInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SingleDelegationInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleDelegationInfoResponse.Merge(m, src)
}
func (m *SingleDelegationInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *SingleDelegationInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleDelegationInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SingleDelegationInfoResponse proto.InternalMessageInfo

func (m *SingleDelegationInfoResponse) GetDelegationAmounts() *DelegationAmounts {
	if m != nil {
		return m.DelegationAmounts
	}
	return nil
}

// UndelegationHoldCountReq is the request to obtain the undelegation hold count.
type UndelegationHoldCountReq struct {
	// staker_id is the staker id.
	StakerId string `protobuf:"bytes,1,opt,name=staker_id,json=stakerId,proto3" json:"staker_id,omitempty"`
	// asset_id is the asset id.
	AssetId string `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// undelegation_id is the undelegation id
	UndelegationId uint64 `protobuf:"varint,3,opt,name=undelegation_id,json=undelegationId,proto3" json:"undelegation_id,omitempty"`
}

func (m *UndelegationHoldCountReq) Reset()         { *m = UndelegationHoldCountReq{} }
func (m *UndelegationHoldCountReq) String() string { return proto.CompactTextString(m) }
func (*UndelegationHoldCountReq) ProtoMessage()    {}
func (*UndelegationHoldCountReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab345e1cf20490c, []int{6}
}
func (m *UndelegationHoldCountReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UndelegationHoldCountReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UndelegationHoldCountReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UndelegationHoldCountReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndelegationHoldCountReq.Merge(m, src)
}
func (m *UndelegationHoldCountReq) XXX_Size() int {
	return m.Size()
}
func (m *UndelegationHoldCountReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UndelegationHoldCountReq.DiscardUnknown(m)
}

var xxx_messageInfo_UndelegationHoldCountReq proto.InternalMessageInfo

func (m *UndelegationHoldCountReq) GetStakerId() string {
	if m != nil {
		return m.StakerId
	}
	return ""
}

func (m *UndelegationHoldCountReq) GetAssetId() string {
	if m != nil {
		return m.AssetId
	}
	return ""
}

func (m *UndelegationHoldCountReq) GetUndelegationId() uint64 {
	if m != nil {
		return m.UndelegationId
	}
	return 0
}

// UndelegationHoldCountResponse is the response for the undelegation hold count.
type UndelegationHoldCountResponse struct {
	// hold_count is the number of undelegations that are on hold.
	HoldCount uint64 `protobuf:"varint,1,opt,name=hold_count,json=holdCount,proto3" json:"hold_count,omitempty"`
}

func (m *UndelegationHoldCountResponse) Reset()         { *m = UndelegationHoldCountResponse{} }
func (m *UndelegationHoldCountResponse) String() string { return proto.CompactTextString(m) }
func (*UndelegationHoldCountResponse) ProtoMessage()    {}
func (*UndelegationHoldCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab345e1cf20490c, []int{7}
}
func (m *UndelegationHoldCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UndelegationHoldCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UndelegationHoldCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UndelegationHoldCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndelegationHoldCountResponse.Merge(m, src)
}
func (m *UndelegationHoldCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *UndelegationHoldCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UndelegationHoldCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UndelegationHoldCountResponse proto.InternalMessageInfo

func (m *UndelegationHoldCountResponse) GetHoldCount() uint64 {
	if m != nil {
		return m.HoldCount
	}
	return 0
}

// UndelegationsReq is the request to obtain all delegations
// by staker id and asset id.
type UndelegationsReq struct {
	// staker_id is the staker id.
	StakerId string `protobuf:"bytes,1,opt,name=staker_id,json=stakerId,proto3" json:"staker_id,omitempty"`
	// asset_id is the asset id.
	AssetId string `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (m *UndelegationsReq) Reset()         { *m = UndelegationsReq{} }
func (m *UndelegationsReq) String() string { return proto.CompactTextString(m) }
func (*UndelegationsReq) ProtoMessage()    {}
func (*UndelegationsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab345e1cf20490c, []int{8}
}
func (m *UndelegationsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UndelegationsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UndelegationsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UndelegationsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndelegationsReq.Merge(m, src)
}
func (m *UndelegationsReq) XXX_Size() int {
	return m.Size()
}
func (m *UndelegationsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UndelegationsReq.DiscardUnknown(m)
}

var xxx_messageInfo_UndelegationsReq proto.InternalMessageInfo

func (m *UndelegationsReq) GetStakerId() string {
	if m != nil {
		return m.StakerId
	}
	return ""
}

func (m *UndelegationsReq) GetAssetId() string {
	if m != nil {
		return m.AssetId
	}
	return ""
}

// UndelegationsByEpochInfoReq is the request to obtain all undelegations waiting to be completed
// by epoch info.
type UndelegationsByEpochInfoReq struct {
	// epoch_identifier is the epoch identifier to query.
	EpochIdentifier string `protobuf:"bytes,1,opt,name=epoch_identifier,json=epochIdentifier,proto3" json:"epoch_identifier,omitempty"`
	// epoch_number is the epoch number to query.
	EpochNumber int64 `protobuf:"varint,2,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
}

func (m *UndelegationsByEpochInfoReq) Reset()         { *m = UndelegationsByEpochInfoReq{} }
func (m *UndelegationsByEpochInfoReq) String() string { return proto.CompactTextString(m) }
func (*UndelegationsByEpochInfoReq) ProtoMessage()    {}
func (*UndelegationsByEpochInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab345e1cf20490c, []int{9}
}
func (m *UndelegationsByEpochInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UndelegationsByEpochInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UndelegationsByEpochInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UndelegationsByEpochInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndelegationsByEpochInfoReq.Merge(m, src)
}
func (m *UndelegationsByEpochInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *UndelegationsByEpochInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UndelegationsByEpochInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_UndelegationsByEpochInfoReq proto.InternalMessageInfo

func (m *UndelegationsByEpochInfoReq) GetEpochIdentifier() string {
	if m != nil {
		return m.EpochIdentifier
	}
	return ""
}

func (m *UndelegationsByEpochInfoReq) GetEpochNumber() int64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

// UndelegationAndHoldCount includes the undelegation record and the
// hold count, which is used to construct the genesis state
type UndelegationAndHoldCount struct {
	// undelegation is the single undelegation record
	Undelegation *UndelegationRecord `protobuf:"bytes,1,opt,name=undelegation,proto3" json:"undelegation,omitempty"`
	// hold_count represents the number of holds on this undelegation
	HoldCount uint64 `protobuf:"varint,2,opt,name=hold_count,json=holdCount,proto3" json:"hold_count,omitempty"`
}

func (m *UndelegationAndHoldCount) Reset()         { *m = UndelegationAndHoldCount{} }
func (m *UndelegationAndHoldCount) String() string { return proto.CompactTextString(m) }
func (*UndelegationAndHoldCount) ProtoMessage()    {}
func (*UndelegationAndHoldCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab345e1cf20490c, []int{10}
}
func (m *UndelegationAndHoldCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UndelegationAndHoldCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UndelegationAndHoldCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UndelegationAndHoldCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndelegationAndHoldCount.Merge(m, src)
}
func (m *UndelegationAndHoldCount) XXX_Size() int {
	return m.Size()
}
func (m *UndelegationAndHoldCount) XXX_DiscardUnknown() {
	xxx_messageInfo_UndelegationAndHoldCount.DiscardUnknown(m)
}

var xxx_messageInfo_UndelegationAndHoldCount proto.InternalMessageInfo

func (m *UndelegationAndHoldCount) GetUndelegation() *UndelegationRecord {
	if m != nil {
		return m.Undelegation
	}
	return nil
}

func (m *UndelegationAndHoldCount) GetHoldCount() uint64 {
	if m != nil {
		return m.HoldCount
	}
	return 0
}

// UndelegationRecordList is the response to query undelegations.
type UndelegationRecordList struct {
	// undelegations is the returned undelegations with hold count
	Undelegations []*UndelegationAndHoldCount `protobuf:"bytes,1,rep,name=undelegations,proto3" json:"undelegations,omitempty"`
}

func (m *UndelegationRecordList) Reset()         { *m = UndelegationRecordList{} }
func (m *UndelegationRecordList) String() string { return proto.CompactTextString(m) }
func (*UndelegationRecordList) ProtoMessage()    {}
func (*UndelegationRecordList) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab345e1cf20490c, []int{11}
}
func (m *UndelegationRecordList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UndelegationRecordList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UndelegationRecordList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UndelegationRecordList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndelegationRecordList.Merge(m, src)
}
func (m *UndelegationRecordList) XXX_Size() int {
	return m.Size()
}
func (m *UndelegationRecordList) XXX_DiscardUnknown() {
	xxx_messageInfo_UndelegationRecordList.DiscardUnknown(m)
}

var xxx_messageInfo_UndelegationRecordList proto.InternalMessageInfo

func (m *UndelegationRecordList) GetUndelegations() []*UndelegationAndHoldCount {
	if m != nil {
		return m.Undelegations
	}
	return nil
}

// QueryAssociatedOperatorByStakerReq is the request to obtain the associated operator of the specified staker
type QueryAssociatedOperatorByStakerReq struct {
	// stake_id is the staker id for which the query is made.
	StakerId string `protobuf:"bytes,1,opt,name=staker_id,json=stakerId,proto3" json:"staker_id,omitempty"`
}

func (m *QueryAssociatedOperatorByStakerReq) Reset()         { *m = QueryAssociatedOperatorByStakerReq{} }
func (m *QueryAssociatedOperatorByStakerReq) String() string { return proto.CompactTextString(m) }
func (*QueryAssociatedOperatorByStakerReq) ProtoMessage()    {}
func (*QueryAssociatedOperatorByStakerReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab345e1cf20490c, []int{12}
}
func (m *QueryAssociatedOperatorByStakerReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssociatedOperatorByStakerReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssociatedOperatorByStakerReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssociatedOperatorByStakerReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssociatedOperatorByStakerReq.Merge(m, src)
}
func (m *QueryAssociatedOperatorByStakerReq) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssociatedOperatorByStakerReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssociatedOperatorByStakerReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssociatedOperatorByStakerReq proto.InternalMessageInfo

func (m *QueryAssociatedOperatorByStakerReq) GetStakerId() string {
	if m != nil {
		return m.StakerId
	}
	return ""
}

// QueryAssociatedOperatorByStakerResponse is the response to QueryAssociatedOperatorByStakerReq
type QueryAssociatedOperatorByStakerResponse struct {
	// operator is the returned operator owner of the specified staker
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (m *QueryAssociatedOperatorByStakerResponse) Reset() {
	*m = QueryAssociatedOperatorByStakerResponse{}
}
func (m *QueryAssociatedOperatorByStakerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAssociatedOperatorByStakerResponse) ProtoMessage()    {}
func (*QueryAssociatedOperatorByStakerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab345e1cf20490c, []int{13}
}
func (m *QueryAssociatedOperatorByStakerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssociatedOperatorByStakerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssociatedOperatorByStakerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssociatedOperatorByStakerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssociatedOperatorByStakerResponse.Merge(m, src)
}
func (m *QueryAssociatedOperatorByStakerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssociatedOperatorByStakerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssociatedOperatorByStakerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssociatedOperatorByStakerResponse proto.InternalMessageInfo

func (m *QueryAssociatedOperatorByStakerResponse) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

// QueryAssociatedStakersByOperatorReq is the request to obtain the associated stakers of the specified operator
type QueryAssociatedStakersByOperatorReq struct {
	// operator is the operator address for which the query is made.
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (m *QueryAssociatedStakersByOperatorReq) Reset()         { *m = QueryAssociatedStakersByOperatorReq{} }
func (m *QueryAssociatedStakersByOperatorReq) String() string { return proto.CompactTextString(m) }
func (*QueryAssociatedStakersByOperatorReq) ProtoMessage()    {}
func (*QueryAssociatedStakersByOperatorReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab345e1cf20490c, []int{14}
}
func (m *QueryAssociatedStakersByOperatorReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssociatedStakersByOperatorReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssociatedStakersByOperatorReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssociatedStakersByOperatorReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssociatedStakersByOperatorReq.Merge(m, src)
}
func (m *QueryAssociatedStakersByOperatorReq) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssociatedStakersByOperatorReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssociatedStakersByOperatorReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssociatedStakersByOperatorReq proto.InternalMessageInfo

func (m *QueryAssociatedStakersByOperatorReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

// QueryAssociatedStakersByOperatorResponse is the response to QueryAssociatedStakersByOperatorReq
type QueryAssociatedStakersByOperatorResponse struct {
	// stakers is the returned stakers associated to the specified operator
	Stakers []string `protobuf:"bytes,1,rep,name=stakers,proto3" json:"stakers,omitempty"`
}

func (m *QueryAssociatedStakersByOperatorResponse) Reset() {
	*m = QueryAssociatedStakersByOperatorResponse{}
}
func (m *QueryAssociatedStakersByOperatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAssociatedStakersByOperatorResponse) ProtoMessage()    {}
func (*QueryAssociatedStakersByOperatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab345e1cf20490c, []int{15}
}
func (m *QueryAssociatedStakersByOperatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAssociatedStakersByOperatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAssociatedStakersByOperatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAssociatedStakersByOperatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAssociatedStakersByOperatorResponse.Merge(m, src)
}
func (m *QueryAssociatedStakersByOperatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAssociatedStakersByOperatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAssociatedStakersByOperatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAssociatedStakersByOperatorResponse proto.InternalMessageInfo

func (m *QueryAssociatedStakersByOperatorResponse) GetStakers() []string {
	if m != nil {
		return m.Stakers
	}
	return nil
}

// QueryDelegatedStakersByOperatorReq is the request to obtain the delegated stakers of the specified operator
type QueryDelegatedStakersByOperatorReq struct {
	// operator is the operator address for which the query is made.
	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	// asset_id is the asset id.
	AssetId string `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (m *QueryDelegatedStakersByOperatorReq) Reset()         { *m = QueryDelegatedStakersByOperatorReq{} }
func (m *QueryDelegatedStakersByOperatorReq) String() string { return proto.CompactTextString(m) }
func (*QueryDelegatedStakersByOperatorReq) ProtoMessage()    {}
func (*QueryDelegatedStakersByOperatorReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab345e1cf20490c, []int{16}
}
func (m *QueryDelegatedStakersByOperatorReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatedStakersByOperatorReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatedStakersByOperatorReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatedStakersByOperatorReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatedStakersByOperatorReq.Merge(m, src)
}
func (m *QueryDelegatedStakersByOperatorReq) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatedStakersByOperatorReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatedStakersByOperatorReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatedStakersByOperatorReq proto.InternalMessageInfo

func (m *QueryDelegatedStakersByOperatorReq) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *QueryDelegatedStakersByOperatorReq) GetAssetId() string {
	if m != nil {
		return m.AssetId
	}
	return ""
}

// QueryDelegatedStakersByOperatorResponse is the response to QueryDelegatedStakersByOperatorReq
type QueryDelegatedStakersByOperatorResponse struct {
	// count is the number of stakers
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// stakers is the returned stakers associated to the specified operator
	Stakers []string `protobuf:"bytes,2,rep,name=stakers,proto3" json:"stakers,omitempty"`
}

func (m *QueryDelegatedStakersByOperatorResponse) Reset() {
	*m = QueryDelegatedStakersByOperatorResponse{}
}
func (m *QueryDelegatedStakersByOperatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegatedStakersByOperatorResponse) ProtoMessage()    {}
func (*QueryDelegatedStakersByOperatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aab345e1cf20490c, []int{17}
}
func (m *QueryDelegatedStakersByOperatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatedStakersByOperatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatedStakersByOperatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatedStakersByOperatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatedStakersByOperatorResponse.Merge(m, src)
}
func (m *QueryDelegatedStakersByOperatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatedStakersByOperatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatedStakersByOperatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatedStakersByOperatorResponse proto.InternalMessageInfo

func (m *QueryDelegatedStakersByOperatorResponse) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *QueryDelegatedStakersByOperatorResponse) GetStakers() []string {
	if m != nil {
		return m.Stakers
	}
	return nil
}

func init() {
	proto.RegisterType((*DelegationInfoReq)(nil), "exocore.delegation.v1.DelegationInfoReq")
	proto.RegisterType((*StakerList)(nil), "exocore.delegation.v1.StakerList")
	proto.RegisterType((*DelegationAmounts)(nil), "exocore.delegation.v1.DelegationAmounts")
	proto.RegisterType((*QueryDelegationInfoResponse)(nil), "exocore.delegation.v1.QueryDelegationInfoResponse")
	proto.RegisterMapType((map[string]*DelegationAmounts)(nil), "exocore.delegation.v1.QueryDelegationInfoResponse.DelegationInfosEntry")
	proto.RegisterType((*SingleDelegationInfoReq)(nil), "exocore.delegation.v1.SingleDelegationInfoReq")
	proto.RegisterType((*SingleDelegationInfoResponse)(nil), "exocore.delegation.v1.SingleDelegationInfoResponse")
	proto.RegisterType((*UndelegationHoldCountReq)(nil), "exocore.delegation.v1.UndelegationHoldCountReq")
	proto.RegisterType((*UndelegationHoldCountResponse)(nil), "exocore.delegation.v1.UndelegationHoldCountResponse")
	proto.RegisterType((*UndelegationsReq)(nil), "exocore.delegation.v1.UndelegationsReq")
	proto.RegisterType((*UndelegationsByEpochInfoReq)(nil), "exocore.delegation.v1.UndelegationsByEpochInfoReq")
	proto.RegisterType((*UndelegationAndHoldCount)(nil), "exocore.delegation.v1.UndelegationAndHoldCount")
	proto.RegisterType((*UndelegationRecordList)(nil), "exocore.delegation.v1.UndelegationRecordList")
	proto.RegisterType((*QueryAssociatedOperatorByStakerReq)(nil), "exocore.delegation.v1.QueryAssociatedOperatorByStakerReq")
	proto.RegisterType((*QueryAssociatedOperatorByStakerResponse)(nil), "exocore.delegation.v1.QueryAssociatedOperatorByStakerResponse")
	proto.RegisterType((*QueryAssociatedStakersByOperatorReq)(nil), "exocore.delegation.v1.QueryAssociatedStakersByOperatorReq")
	proto.RegisterType((*QueryAssociatedStakersByOperatorResponse)(nil), "exocore.delegation.v1.QueryAssociatedStakersByOperatorResponse")
	proto.RegisterType((*QueryDelegatedStakersByOperatorReq)(nil), "exocore.delegation.v1.QueryDelegatedStakersByOperatorReq")
	proto.RegisterType((*QueryDelegatedStakersByOperatorResponse)(nil), "exocore.delegation.v1.QueryDelegatedStakersByOperatorResponse")
}

func init() { proto.RegisterFile("exocore/delegation/v1/query.proto", fileDescriptor_aab345e1cf20490c) }

var fileDescriptor_aab345e1cf20490c = []byte{
	// 1183 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x4f, 0x4f, 0x1b, 0xc7,
	0x1b, 0x66, 0xe0, 0xc7, 0x2f, 0xf0, 0x02, 0x85, 0x4c, 0x68, 0x6a, 0x96, 0x60, 0xc8, 0x56, 0x0a,
	0xa4, 0x12, 0x5e, 0x85, 0xa0, 0x28, 0x7f, 0x1a, 0x5a, 0x13, 0x68, 0xe3, 0xa6, 0x25, 0xcd, 0x22,
	0x14, 0xa5, 0xa9, 0xb4, 0x5a, 0x3c, 0x83, 0x59, 0x61, 0xef, 0x38, 0x3b, 0x6b, 0x82, 0x85, 0xb8,
	0xf4, 0x94, 0x63, 0xa4, 0x7e, 0x91, 0x1e, 0xa2, 0x5e, 0xfa, 0x05, 0x72, 0x8c, 0xd2, 0x4b, 0xd5,
	0x03, 0x6d, 0xa1, 0x52, 0xd5, 0x53, 0xef, 0xbd, 0xb4, 0xda, 0xd9, 0x59, 0x7b, 0xd6, 0xf6, 0xfa,
	0x4f, 0xd2, 0x13, 0x9e, 0x77, 0x66, 0x9e, 0x79, 0x9f, 0x77, 0x9e, 0x79, 0x9f, 0x05, 0x2e, 0xd2,
	0x03, 0x96, 0x67, 0x1e, 0x35, 0x08, 0x2d, 0xd2, 0x82, 0xed, 0x3b, 0xcc, 0x35, 0xf6, 0xaf, 0x18,
	0x4f, 0x2a, 0xd4, 0xab, 0x66, 0xca, 0x1e, 0xf3, 0x19, 0x7e, 0x57, 0x2e, 0xc9, 0xd4, 0x97, 0x64,
	0xf6, 0xaf, 0x68, 0xd3, 0x79, 0xc6, 0x4b, 0x8c, 0x87, 0x4b, 0x1b, 0xf6, 0x68, 0x53, 0xe1, 0xa4,
	0x25, 0x46, 0x46, 0x38, 0x90, 0x53, 0xe9, 0xd6, 0x27, 0xfa, 0x07, 0x72, 0x7e, 0xb2, 0xc0, 0x0a,
	0x2c, 0xdc, 0x17, 0xfc, 0x92, 0xd1, 0x0b, 0x05, 0xc6, 0x0a, 0x45, 0x6a, 0xd8, 0x65, 0xc7, 0xb0,
	0x5d, 0x97, 0xf9, 0x62, 0xa3, 0xc4, 0xd4, 0xef, 0xc1, 0xd9, 0xb5, 0x1a, 0x5a, 0xce, 0xdd, 0x61,
	0x26, 0x7d, 0x82, 0xa7, 0x61, 0x98, 0xfb, 0xf6, 0x1e, 0xf5, 0x2c, 0x87, 0xa4, 0xd0, 0x1c, 0x5a,
	0x18, 0x36, 0x87, 0xc2, 0x40, 0x8e, 0xe0, 0x29, 0x18, 0xb2, 0x39, 0xa7, 0x7e, 0x30, 0xd7, 0x2f,
	0xe6, 0xce, 0x88, 0x71, 0x8e, 0xe8, 0x97, 0x00, 0x36, 0xc5, 0xb2, 0xcf, 0x1d, 0xee, 0xe3, 0x14,
	0x9c, 0x09, 0x37, 0xf1, 0x14, 0x9a, 0x1b, 0x08, 0xd6, 0xc9, 0xa1, 0xfe, 0x37, 0x52, 0x4f, 0xcd,
	0x96, 0x58, 0xc5, 0xf5, 0x39, 0x2e, 0xc1, 0xb9, 0x8a, 0x2b, 0xa9, 0xd9, 0xdb, 0x45, 0x6a, 0xf1,
	0x5d, 0xdb, 0xa3, 0xe1, 0xf9, 0xab, 0x1f, 0xbe, 0x3c, 0x9e, 0xed, 0xfb, 0xf9, 0x78, 0xf6, 0x52,
	0xc1, 0xf1, 0x77, 0x2b, 0xdb, 0x99, 0x3c, 0x2b, 0xc9, 0xe2, 0xc8, 0x3f, 0x8b, 0x9c, 0xec, 0x19,
	0x7e, 0xb5, 0x4c, 0x79, 0x66, 0x8d, 0xe6, 0x5f, 0xbf, 0x58, 0x04, 0x59, 0xbb, 0x35, 0x9a, 0x37,
	0x71, 0x0c, 0x78, 0x33, 0xc0, 0xc5, 0xfb, 0x90, 0x7a, 0x6a, 0x3b, 0xbe, 0x55, 0x9b, 0x72, 0x98,
	0x6b, 0xd9, 0x22, 0x97, 0x90, 0x57, 0x4f, 0x67, 0xe6, 0x5c, 0x5f, 0x39, 0x33, 0xe7, 0xfa, 0xe6,
	0xf9, 0x00, 0x7d, 0x4b, 0x01, 0x0f, 0x79, 0xea, 0xff, 0x20, 0x98, 0x7e, 0x10, 0x5c, 0x78, 0x63,
	0xdd, 0x79, 0x99, 0xb9, 0x9c, 0x62, 0x0f, 0x26, 0x94, 0x84, 0x1c, 0x77, 0x87, 0x85, 0xf5, 0x1b,
	0x59, 0xfa, 0x34, 0xd3, 0x52, 0x4f, 0x99, 0x36, 0x68, 0x99, 0x78, 0x98, 0xaf, 0xbb, 0xbe, 0x57,
	0x35, 0xc7, 0x49, 0x3c, 0xaa, 0x15, 0x61, 0xb2, 0xd5, 0x42, 0x3c, 0x01, 0x03, 0x7b, 0xb4, 0x2a,
	0x25, 0x10, 0xfc, 0xc4, 0x2b, 0x30, 0xb8, 0x6f, 0x17, 0x2b, 0x54, 0x94, 0x68, 0x64, 0x69, 0x21,
	0x21, 0xa5, 0xa6, 0xdb, 0x35, 0xc3, 0x6d, 0x37, 0xfb, 0xaf, 0x23, 0xfd, 0x39, 0x82, 0xf7, 0x36,
	0x1d, 0xb7, 0x50, 0xa4, 0x3d, 0x4a, 0xef, 0x36, 0x8c, 0xb1, 0x32, 0xf5, 0x6c, 0x9f, 0x79, 0x96,
	0x4d, 0x88, 0x27, 0xef, 0x29, 0xf5, 0xfa, 0xc5, 0xe2, 0xa4, 0xac, 0x7c, 0x96, 0x10, 0x8f, 0x72,
	0xbe, 0xe9, 0x7b, 0x8e, 0x5b, 0x30, 0x47, 0xa3, 0xe5, 0x41, 0x38, 0xa6, 0xdc, 0x81, 0xb8, 0x72,
	0xff, 0x42, 0x70, 0xa1, 0x75, 0x4a, 0xf2, 0x56, 0x1e, 0x02, 0x6e, 0x92, 0x09, 0x17, 0x09, 0xf6,
	0x52, 0x84, 0xb3, 0xa4, 0x49, 0xf5, 0xfb, 0x90, 0x2a, 0xd9, 0x07, 0x56, 0x5c, 0xf9, 0xff, 0xa5,
	0x0c, 0x4b, 0xf6, 0xc1, 0x96, 0x0a, 0x2e, 0x65, 0x78, 0x08, 0x29, 0x55, 0x9c, 0x77, 0x59, 0x91,
	0xdc, 0x09, 0x26, 0xde, 0xe2, 0xfd, 0xe3, 0x79, 0x18, 0x8f, 0xbd, 0x26, 0x59, 0xe7, 0xff, 0x99,
	0xef, 0xa8, 0xe1, 0x1c, 0xd1, 0x57, 0x60, 0x26, 0xe1, 0x70, 0x59, 0xee, 0x19, 0x80, 0x5d, 0x56,
	0x24, 0x56, 0x5e, 0xd4, 0x01, 0x09, 0x90, 0xe1, 0xdd, 0x68, 0x99, 0xfe, 0x19, 0x4c, 0xa8, 0xfb,
	0xf9, 0xdb, 0x34, 0xad, 0x3d, 0x98, 0x8e, 0x61, 0xad, 0x56, 0xd7, 0xcb, 0x2c, 0xbf, 0x1b, 0x09,
	0xf2, 0x32, 0x4c, 0xd0, 0x60, 0x6c, 0x39, 0x84, 0xba, 0xbe, 0xb3, 0xe3, 0x50, 0x4f, 0xa2, 0x8f,
	0x8b, 0x78, 0xae, 0x16, 0xc6, 0x17, 0x61, 0x34, 0x5c, 0xea, 0x56, 0x4a, 0xdb, 0x34, 0x54, 0xe7,
	0x80, 0x39, 0x22, 0x62, 0x1b, 0x22, 0xa4, 0x3f, 0x43, 0xf1, 0xb2, 0x67, 0x5d, 0x52, 0x23, 0x8f,
	0xbf, 0x80, 0x51, 0xb5, 0x4e, 0x52, 0x5d, 0x97, 0x13, 0xd4, 0xa5, 0xc2, 0x98, 0x34, 0xcf, 0x3c,
	0x62, 0xc6, 0xb6, 0x37, 0xd4, 0xb0, 0xbf, 0xb1, 0x86, 0x0c, 0xce, 0x37, 0x43, 0x88, 0xc6, 0xbd,
	0x05, 0x63, 0x2a, 0x50, 0xd4, 0x7e, 0x8c, 0x2e, 0x12, 0x51, 0xf9, 0x98, 0x71, 0x14, 0x3d, 0x0b,
	0xba, 0xe8, 0x54, 0x59, 0xce, 0x59, 0xde, 0xb1, 0x7d, 0x4a, 0xee, 0xcb, 0xd7, 0xb9, 0x5a, 0x0d,
	0x6d, 0xa3, 0xd3, 0x35, 0xea, 0xeb, 0x30, 0xdf, 0x11, 0x42, 0x2a, 0x48, 0x83, 0xa1, 0xe8, 0xf1,
	0x47, 0x30, 0xd1, 0x58, 0xcf, 0xc2, 0xfb, 0x0d, 0x30, 0xe1, 0x66, 0xbe, 0x5a, 0x8d, 0xf0, 0x82,
	0x54, 0xda, 0x41, 0xac, 0xc1, 0x42, 0x67, 0x08, 0x99, 0x4a, 0xb2, 0x11, 0x3e, 0x96, 0x25, 0x91,
	0x9d, 0xa2, 0xf7, 0x3c, 0xda, 0x09, 0xfb, 0x91, 0x2c, 0x56, 0x3b, 0x70, 0x99, 0xe1, 0x24, 0x0c,
	0xaa, 0x2f, 0x2d, 0x1c, 0xa8, 0x79, 0xf7, 0xc7, 0xf2, 0x5e, 0x3a, 0x19, 0x83, 0x41, 0x81, 0x8d,
	0x7f, 0x40, 0x70, 0xae, 0x85, 0xff, 0xe0, 0xce, 0x3d, 0x51, 0x3e, 0x30, 0x6d, 0xa9, 0x77, 0x57,
	0xd3, 0x3f, 0x79, 0xf6, 0xc7, 0x77, 0x1f, 0xa0, 0x6f, 0x7e, 0xfc, 0xfd, 0xdb, 0xfe, 0x5b, 0xf8,
	0x86, 0xd1, 0xfa, 0xbb, 0x48, 0xd1, 0x9e, 0x71, 0x58, 0xd3, 0xd4, 0x91, 0x71, 0x18, 0x15, 0xec,
	0x08, 0x1f, 0x23, 0x98, 0x12, 0xe7, 0xb4, 0xea, 0xfd, 0x38, 0x93, 0x90, 0x59, 0x82, 0x77, 0x69,
	0x57, 0x7b, 0x5a, 0x2f, 0xa9, 0x7c, 0x5d, 0xa7, 0xf2, 0x00, 0xdf, 0x4f, 0xa0, 0xc2, 0x05, 0x82,
	0xa5, 0x04, 0x63, 0x84, 0x62, 0xa6, 0x18, 0x23, 0xf8, 0x27, 0x02, 0x4d, 0x10, 0x6c, 0xd9, 0x6e,
	0x71, 0x37, 0x4f, 0x5a, 0x75, 0x06, 0x6d, 0xb9, 0xb7, 0x0d, 0x92, 0x23, 0xa9, 0x73, 0x7c, 0x84,
	0x1f, 0x26, 0x70, 0x8c, 0x39, 0x47, 0xbd, 0x71, 0x25, 0x5c, 0x9d, 0x71, 0xd8, 0xe0, 0x34, 0x47,
	0xf8, 0x7b, 0x04, 0xb8, 0x89, 0x2b, 0xc7, 0xf3, 0x5d, 0xa4, 0x1c, 0x18, 0x88, 0xb6, 0xd8, 0x75,
	0xa3, 0x0d, 0xba, 0xa4, 0x7e, 0xb7, 0x4e, 0xea, 0x36, 0xbe, 0xd5, 0x05, 0xa9, 0x44, 0x15, 0xfe,
	0x82, 0x60, 0xa6, 0x39, 0x71, 0xc5, 0x87, 0xf0, 0x52, 0x37, 0x1c, 0xe2, 0xc6, 0xd5, 0x2b, 0x9d,
	0xc7, 0x75, 0x3a, 0x5f, 0xe2, 0x8d, 0x04, 0x3a, 0x65, 0xea, 0x12, 0xc7, 0x2d, 0x58, 0x0d, 0xb4,
	0x1a, 0x0d, 0xf2, 0x28, 0x0a, 0x85, 0x46, 0x78, 0x84, 0x7f, 0x43, 0x30, 0xdb, 0xa1, 0x71, 0xe3,
	0x1b, 0xed, 0xfa, 0x40, 0x5b, 0xcf, 0xd0, 0x56, 0xde, 0x74, 0xab, 0xd4, 0xe7, 0x9d, 0x3a, 0xf7,
	0xeb, 0xf8, 0x5a, 0x02, 0x77, 0xbb, 0x86, 0x63, 0x45, 0xef, 0x4d, 0xbd, 0x50, 0x7c, 0x82, 0x60,
	0xae, 0x93, 0x25, 0xe0, 0x9b, 0xdd, 0x65, 0xda, 0xca, 0x06, 0xb4, 0x8f, 0xde, 0x78, 0xaf, 0xa4,
	0x99, 0xad, 0xd3, 0xbc, 0x86, 0x97, 0x3b, 0xd3, 0x94, 0xdd, 0xbe, 0xde, 0x5f, 0x44, 0x3f, 0x99,
	0xed, 0x60, 0x2a, 0xed, 0x2f, 0xb2, 0xad, 0xd3, 0xb5, 0xbf, 0xc8, 0xce, 0x3e, 0xa6, 0xdf, 0xab,
	0x33, 0xfc, 0x18, 0xaf, 0xb4, 0xf7, 0x85, 0x96, 0x04, 0x95, 0x67, 0xb9, 0xba, 0xf1, 0xf2, 0x24,
	0x8d, 0x5e, 0x9d, 0xa4, 0xd1, 0xaf, 0x27, 0x69, 0xf4, 0xfc, 0x34, 0xdd, 0xf7, 0xea, 0x34, 0xdd,
	0xf7, 0xd3, 0x69, 0xba, 0xef, 0xab, 0x65, 0xe5, 0x4b, 0x7c, 0x3d, 0x3c, 0x63, 0x83, 0xfa, 0x4f,
	0x99, 0xb7, 0x57, 0x3b, 0xf2, 0x40, 0x3d, 0x54, 0x7c, 0x9b, 0x6f, 0xff, 0x5f, 0xfc, 0xc7, 0x7d,
	0xf5, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdb, 0xee, 0xf2, 0x89, 0x39, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// DelegationInfo queries the delegation information for {stakerID, assetID}.
	QueryDelegationInfo(ctx context.Context, in *DelegationInfoReq, opts ...grpc.CallOption) (*QueryDelegationInfoResponse, error)
	// SingleDelegationInfo queries the single delegation information and the
	// maximum undelegatable amount for {staker, asset, operator}.
	QuerySingleDelegationInfo(ctx context.Context, in *SingleDelegationInfoReq, opts ...grpc.CallOption) (*SingleDelegationInfoResponse, error)
	// QueryUndelegationHoldCount queries the undelegation hold count.
	QueryUndelegationHoldCount(ctx context.Context, in *UndelegationHoldCountReq, opts ...grpc.CallOption) (*UndelegationHoldCountResponse, error)
	// QueryUndelegations queries all undelegations for
	// {staker, asset}.
	QueryUndelegations(ctx context.Context, in *UndelegationsReq, opts ...grpc.CallOption) (*UndelegationRecordList, error)
	// QueryUndelegationsByEpochInfo queries all undelegations waiting to be completed by
	// {epoch_identifier,epoch_number}.
	QueryUndelegationsByEpochInfo(ctx context.Context, in *UndelegationsByEpochInfoReq, opts ...grpc.CallOption) (*UndelegationRecordList, error)
	// QueryAssociatedOperatorByStaker queries the associated operator for the specified staker
	QueryAssociatedOperatorByStaker(ctx context.Context, in *QueryAssociatedOperatorByStakerReq, opts ...grpc.CallOption) (*QueryAssociatedOperatorByStakerResponse, error)
	// QueryAssociatedStakersByOperator queries the associated stakers for the specified operator
	QueryAssociatedStakersByOperator(ctx context.Context, in *QueryAssociatedStakersByOperatorReq, opts ...grpc.CallOption) (*QueryAssociatedStakersByOperatorResponse, error)
	// QueryDelegatedStakersByOperator queries the delegated stakers for the specified operator
	QueryDelegatedStakersByOperator(ctx context.Context, in *QueryDelegatedStakersByOperatorReq, opts ...grpc.CallOption) (*QueryDelegatedStakersByOperatorResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryDelegationInfo(ctx context.Context, in *DelegationInfoReq, opts ...grpc.CallOption) (*QueryDelegationInfoResponse, error) {
	out := new(QueryDelegationInfoResponse)
	err := c.cc.Invoke(ctx, "/exocore.delegation.v1.Query/QueryDelegationInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuerySingleDelegationInfo(ctx context.Context, in *SingleDelegationInfoReq, opts ...grpc.CallOption) (*SingleDelegationInfoResponse, error) {
	out := new(SingleDelegationInfoResponse)
	err := c.cc.Invoke(ctx, "/exocore.delegation.v1.Query/QuerySingleDelegationInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryUndelegationHoldCount(ctx context.Context, in *UndelegationHoldCountReq, opts ...grpc.CallOption) (*UndelegationHoldCountResponse, error) {
	out := new(UndelegationHoldCountResponse)
	err := c.cc.Invoke(ctx, "/exocore.delegation.v1.Query/QueryUndelegationHoldCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryUndelegations(ctx context.Context, in *UndelegationsReq, opts ...grpc.CallOption) (*UndelegationRecordList, error) {
	out := new(UndelegationRecordList)
	err := c.cc.Invoke(ctx, "/exocore.delegation.v1.Query/QueryUndelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryUndelegationsByEpochInfo(ctx context.Context, in *UndelegationsByEpochInfoReq, opts ...grpc.CallOption) (*UndelegationRecordList, error) {
	out := new(UndelegationRecordList)
	err := c.cc.Invoke(ctx, "/exocore.delegation.v1.Query/QueryUndelegationsByEpochInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAssociatedOperatorByStaker(ctx context.Context, in *QueryAssociatedOperatorByStakerReq, opts ...grpc.CallOption) (*QueryAssociatedOperatorByStakerResponse, error) {
	out := new(QueryAssociatedOperatorByStakerResponse)
	err := c.cc.Invoke(ctx, "/exocore.delegation.v1.Query/QueryAssociatedOperatorByStaker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryAssociatedStakersByOperator(ctx context.Context, in *QueryAssociatedStakersByOperatorReq, opts ...grpc.CallOption) (*QueryAssociatedStakersByOperatorResponse, error) {
	out := new(QueryAssociatedStakersByOperatorResponse)
	err := c.cc.Invoke(ctx, "/exocore.delegation.v1.Query/QueryAssociatedStakersByOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryDelegatedStakersByOperator(ctx context.Context, in *QueryDelegatedStakersByOperatorReq, opts ...grpc.CallOption) (*QueryDelegatedStakersByOperatorResponse, error) {
	out := new(QueryDelegatedStakersByOperatorResponse)
	err := c.cc.Invoke(ctx, "/exocore.delegation.v1.Query/QueryDelegatedStakersByOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// DelegationInfo queries the delegation information for {stakerID, assetID}.
	QueryDelegationInfo(context.Context, *DelegationInfoReq) (*QueryDelegationInfoResponse, error)
	// SingleDelegationInfo queries the single delegation information and the
	// maximum undelegatable amount for {staker, asset, operator}.
	QuerySingleDelegationInfo(context.Context, *SingleDelegationInfoReq) (*SingleDelegationInfoResponse, error)
	// QueryUndelegationHoldCount queries the undelegation hold count.
	QueryUndelegationHoldCount(context.Context, *UndelegationHoldCountReq) (*UndelegationHoldCountResponse, error)
	// QueryUndelegations queries all undelegations for
	// {staker, asset}.
	QueryUndelegations(context.Context, *UndelegationsReq) (*UndelegationRecordList, error)
	// QueryUndelegationsByEpochInfo queries all undelegations waiting to be completed by
	// {epoch_identifier,epoch_number}.
	QueryUndelegationsByEpochInfo(context.Context, *UndelegationsByEpochInfoReq) (*UndelegationRecordList, error)
	// QueryAssociatedOperatorByStaker queries the associated operator for the specified staker
	QueryAssociatedOperatorByStaker(context.Context, *QueryAssociatedOperatorByStakerReq) (*QueryAssociatedOperatorByStakerResponse, error)
	// QueryAssociatedStakersByOperator queries the associated stakers for the specified operator
	QueryAssociatedStakersByOperator(context.Context, *QueryAssociatedStakersByOperatorReq) (*QueryAssociatedStakersByOperatorResponse, error)
	// QueryDelegatedStakersByOperator queries the delegated stakers for the specified operator
	QueryDelegatedStakersByOperator(context.Context, *QueryDelegatedStakersByOperatorReq) (*QueryDelegatedStakersByOperatorResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) QueryDelegationInfo(ctx context.Context, req *DelegationInfoReq) (*QueryDelegationInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDelegationInfo not implemented")
}
func (*UnimplementedQueryServer) QuerySingleDelegationInfo(ctx context.Context, req *SingleDelegationInfoReq) (*SingleDelegationInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySingleDelegationInfo not implemented")
}
func (*UnimplementedQueryServer) QueryUndelegationHoldCount(ctx context.Context, req *UndelegationHoldCountReq) (*UndelegationHoldCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUndelegationHoldCount not implemented")
}
func (*UnimplementedQueryServer) QueryUndelegations(ctx context.Context, req *UndelegationsReq) (*UndelegationRecordList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUndelegations not implemented")
}
func (*UnimplementedQueryServer) QueryUndelegationsByEpochInfo(ctx context.Context, req *UndelegationsByEpochInfoReq) (*UndelegationRecordList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUndelegationsByEpochInfo not implemented")
}
func (*UnimplementedQueryServer) QueryAssociatedOperatorByStaker(ctx context.Context, req *QueryAssociatedOperatorByStakerReq) (*QueryAssociatedOperatorByStakerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAssociatedOperatorByStaker not implemented")
}
func (*UnimplementedQueryServer) QueryAssociatedStakersByOperator(ctx context.Context, req *QueryAssociatedStakersByOperatorReq) (*QueryAssociatedStakersByOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAssociatedStakersByOperator not implemented")
}
func (*UnimplementedQueryServer) QueryDelegatedStakersByOperator(ctx context.Context, req *QueryDelegatedStakersByOperatorReq) (*QueryDelegatedStakersByOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDelegatedStakersByOperator not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueryDelegationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelegationInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDelegationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.delegation.v1.Query/QueryDelegationInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDelegationInfo(ctx, req.(*DelegationInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuerySingleDelegationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleDelegationInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuerySingleDelegationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.delegation.v1.Query/QuerySingleDelegationInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuerySingleDelegationInfo(ctx, req.(*SingleDelegationInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryUndelegationHoldCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndelegationHoldCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryUndelegationHoldCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.delegation.v1.Query/QueryUndelegationHoldCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryUndelegationHoldCount(ctx, req.(*UndelegationHoldCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryUndelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndelegationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryUndelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.delegation.v1.Query/QueryUndelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryUndelegations(ctx, req.(*UndelegationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryUndelegationsByEpochInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndelegationsByEpochInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryUndelegationsByEpochInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.delegation.v1.Query/QueryUndelegationsByEpochInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryUndelegationsByEpochInfo(ctx, req.(*UndelegationsByEpochInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAssociatedOperatorByStaker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAssociatedOperatorByStakerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAssociatedOperatorByStaker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.delegation.v1.Query/QueryAssociatedOperatorByStaker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAssociatedOperatorByStaker(ctx, req.(*QueryAssociatedOperatorByStakerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryAssociatedStakersByOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAssociatedStakersByOperatorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryAssociatedStakersByOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.delegation.v1.Query/QueryAssociatedStakersByOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryAssociatedStakersByOperator(ctx, req.(*QueryAssociatedStakersByOperatorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryDelegatedStakersByOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatedStakersByOperatorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryDelegatedStakersByOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exocore.delegation.v1.Query/QueryDelegatedStakersByOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryDelegatedStakersByOperator(ctx, req.(*QueryDelegatedStakersByOperatorReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "exocore.delegation.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryDelegationInfo",
			Handler:    _Query_QueryDelegationInfo_Handler,
		},
		{
			MethodName: "QuerySingleDelegationInfo",
			Handler:    _Query_QuerySingleDelegationInfo_Handler,
		},
		{
			MethodName: "QueryUndelegationHoldCount",
			Handler:    _Query_QueryUndelegationHoldCount_Handler,
		},
		{
			MethodName: "QueryUndelegations",
			Handler:    _Query_QueryUndelegations_Handler,
		},
		{
			MethodName: "QueryUndelegationsByEpochInfo",
			Handler:    _Query_QueryUndelegationsByEpochInfo_Handler,
		},
		{
			MethodName: "QueryAssociatedOperatorByStaker",
			Handler:    _Query_QueryAssociatedOperatorByStaker_Handler,
		},
		{
			MethodName: "QueryAssociatedStakersByOperator",
			Handler:    _Query_QueryAssociatedStakersByOperator_Handler,
		},
		{
			MethodName: "QueryDelegatedStakersByOperator",
			Handler:    _Query_QueryDelegatedStakersByOperator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exocore/delegation/v1/query.proto",
}

func (m *DelegationInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetId) > 0 {
		i -= len(m.AssetId)
		copy(dAtA[i:], m.AssetId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AssetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StakerId) > 0 {
		i -= len(m.StakerId)
		copy(dAtA[i:], m.StakerId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StakerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakerList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakerList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stakers) > 0 {
		for iNdEx := len(m.Stakers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Stakers[iNdEx])
			copy(dAtA[i:], m.Stakers[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Stakers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DelegationAmounts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationAmounts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationAmounts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.WaitUndelegationAmount.Size()
		i -= size
		if _, err := m.WaitUndelegationAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.UndelegatableShare.Size()
		i -= size
		if _, err := m.UndelegatableShare.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDelegationInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegationInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegationInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegationInfos) > 0 {
		for k := range m.DelegationInfos {
			v := m.DelegationInfos[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintQuery(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SingleDelegationInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SingleDelegationInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SingleDelegationInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetId) > 0 {
		i -= len(m.AssetId)
		copy(dAtA[i:], m.AssetId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AssetId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OperatorAddr) > 0 {
		i -= len(m.OperatorAddr)
		copy(dAtA[i:], m.OperatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OperatorAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StakerId) > 0 {
		i -= len(m.StakerId)
		copy(dAtA[i:], m.StakerId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SingleDelegationInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SingleDelegationInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SingleDelegationInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MaxUndelegatableAmount.Size()
		i -= size
		if _, err := m.MaxUndelegatableAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.DelegationAmounts != nil {
		{
			size, err := m.DelegationAmounts.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UndelegationHoldCountReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UndelegationHoldCountReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UndelegationHoldCountReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UndelegationId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.UndelegationId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AssetId) > 0 {
		i -= len(m.AssetId)
		copy(dAtA[i:], m.AssetId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AssetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StakerId) > 0 {
		i -= len(m.StakerId)
		copy(dAtA[i:], m.StakerId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UndelegationHoldCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UndelegationHoldCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UndelegationHoldCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HoldCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HoldCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UndelegationsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UndelegationsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UndelegationsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetId) > 0 {
		i -= len(m.AssetId)
		copy(dAtA[i:], m.AssetId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AssetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StakerId) > 0 {
		i -= len(m.StakerId)
		copy(dAtA[i:], m.StakerId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UndelegationsByEpochInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UndelegationsByEpochInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UndelegationsByEpochInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.EpochIdentifier) > 0 {
		i -= len(m.EpochIdentifier)
		copy(dAtA[i:], m.EpochIdentifier)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EpochIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UndelegationAndHoldCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UndelegationAndHoldCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UndelegationAndHoldCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HoldCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.HoldCount))
		i--
		dAtA[i] = 0x10
	}
	if m.Undelegation != nil {
		{
			size, err := m.Undelegation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UndelegationRecordList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UndelegationRecordList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UndelegationRecordList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Undelegations) > 0 {
		for iNdEx := len(m.Undelegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Undelegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAssociatedOperatorByStakerReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssociatedOperatorByStakerReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssociatedOperatorByStakerReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StakerId) > 0 {
		i -= len(m.StakerId)
		copy(dAtA[i:], m.StakerId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StakerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAssociatedOperatorByStakerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssociatedOperatorByStakerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssociatedOperatorByStakerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAssociatedStakersByOperatorReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssociatedStakersByOperatorReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssociatedStakersByOperatorReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAssociatedStakersByOperatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAssociatedStakersByOperatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAssociatedStakersByOperatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stakers) > 0 {
		for iNdEx := len(m.Stakers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Stakers[iNdEx])
			copy(dAtA[i:], m.Stakers[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Stakers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegatedStakersByOperatorReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatedStakersByOperatorReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatedStakersByOperatorReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetId) > 0 {
		i -= len(m.AssetId)
		copy(dAtA[i:], m.AssetId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AssetId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegatedStakersByOperatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatedStakersByOperatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatedStakersByOperatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stakers) > 0 {
		for iNdEx := len(m.Stakers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Stakers[iNdEx])
			copy(dAtA[i:], m.Stakers[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Stakers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Count != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DelegationInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakerId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AssetId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *StakerList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Stakers) > 0 {
		for _, s := range m.Stakers {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *DelegationAmounts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.UndelegatableShare.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.WaitUndelegationAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDelegationInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DelegationInfos) > 0 {
		for k, v := range m.DelegationInfos {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovQuery(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *SingleDelegationInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakerId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.OperatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AssetId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *SingleDelegationInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DelegationAmounts != nil {
		l = m.DelegationAmounts.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.MaxUndelegatableAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *UndelegationHoldCountReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakerId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AssetId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.UndelegationId != 0 {
		n += 1 + sovQuery(uint64(m.UndelegationId))
	}
	return n
}

func (m *UndelegationHoldCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HoldCount != 0 {
		n += 1 + sovQuery(uint64(m.HoldCount))
	}
	return n
}

func (m *UndelegationsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakerId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AssetId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *UndelegationsByEpochInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EpochIdentifier)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.EpochNumber != 0 {
		n += 1 + sovQuery(uint64(m.EpochNumber))
	}
	return n
}

func (m *UndelegationAndHoldCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Undelegation != nil {
		l = m.Undelegation.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.HoldCount != 0 {
		n += 1 + sovQuery(uint64(m.HoldCount))
	}
	return n
}

func (m *UndelegationRecordList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Undelegations) > 0 {
		for _, e := range m.Undelegations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAssociatedOperatorByStakerReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakerId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAssociatedOperatorByStakerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAssociatedStakersByOperatorReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAssociatedStakersByOperatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Stakers) > 0 {
		for _, s := range m.Stakers {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDelegatedStakersByOperatorReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AssetId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegatedStakersByOperatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovQuery(uint64(m.Count))
	}
	if len(m.Stakers) > 0 {
		for _, s := range m.Stakers {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DelegationInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakerList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakerList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakerList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stakers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stakers = append(m.Stakers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationAmounts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationAmounts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationAmounts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UndelegatableShare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UndelegatableShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitUndelegationAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WaitUndelegationAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegationInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegationInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegationInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DelegationInfos == nil {
				m.DelegationInfos = make(map[string]*DelegationAmounts)
			}
			var mapkey string
			var mapvalue *DelegationAmounts
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthQuery
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthQuery
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &DelegationAmounts{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DelegationInfos[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SingleDelegationInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleDelegationInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleDelegationInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SingleDelegationInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleDelegationInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleDelegationInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationAmounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DelegationAmounts == nil {
				m.DelegationAmounts = &DelegationAmounts{}
			}
			if err := m.DelegationAmounts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUndelegatableAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxUndelegatableAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UndelegationHoldCountReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UndelegationHoldCountReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UndelegationHoldCountReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UndelegationId", wireType)
			}
			m.UndelegationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UndelegationId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UndelegationHoldCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UndelegationHoldCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UndelegationHoldCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoldCount", wireType)
			}
			m.HoldCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HoldCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UndelegationsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UndelegationsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UndelegationsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UndelegationsByEpochInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UndelegationsByEpochInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UndelegationsByEpochInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UndelegationAndHoldCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UndelegationAndHoldCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UndelegationAndHoldCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Undelegation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Undelegation == nil {
				m.Undelegation = &UndelegationRecord{}
			}
			if err := m.Undelegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoldCount", wireType)
			}
			m.HoldCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HoldCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UndelegationRecordList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UndelegationRecordList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UndelegationRecordList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Undelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Undelegations = append(m.Undelegations, &UndelegationAndHoldCount{})
			if err := m.Undelegations[len(m.Undelegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssociatedOperatorByStakerReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssociatedOperatorByStakerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssociatedOperatorByStakerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssociatedOperatorByStakerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssociatedOperatorByStakerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssociatedOperatorByStakerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssociatedStakersByOperatorReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssociatedStakersByOperatorReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssociatedStakersByOperatorReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAssociatedStakersByOperatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAssociatedStakersByOperatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAssociatedStakersByOperatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stakers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stakers = append(m.Stakers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatedStakersByOperatorReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatedStakersByOperatorReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatedStakersByOperatorReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatedStakersByOperatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatedStakersByOperatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatedStakersByOperatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stakers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stakers = append(m.Stakers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
