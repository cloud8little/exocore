// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exocore/delegation/v1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the delegation module's state. It needs to encompass
// all of the state that is required to start the chain from the genesis
// or in the event of a restart. At this point, it is only built with
// the former in mind. There are no params in this module.
type GenesisState struct {
	// associations represents the association between a staker and an operator.
	Associations []StakerToOperator `protobuf:"bytes,1,rep,name=associations,proto3" json:"associations"`
	// delegation_states is a list of all delegation states.
	DelegationStates []DelegationStates `protobuf:"bytes,2,rep,name=delegation_states,json=delegationStates,proto3" json:"delegation_states"`
	// stakers_by_operator is a staker list for the operators
	StakersByOperator []StakersByOperator `protobuf:"bytes,3,rep,name=stakers_by_operator,json=stakersByOperator,proto3" json:"stakers_by_operator"`
	// undelegations is a list of all undelegations
	Undelegations []UndelegationRecordWithHoldCount `protobuf:"bytes,4,rep,name=undelegations,proto3" json:"undelegations"`
	// undelegation_id is a globally incremented ID assigned to undelegations.
	UndelegationId uint64 `protobuf:"varint,5,opt,name=undelegation_id,json=undelegationId,proto3" json:"undelegation_id,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26dd0d733927603, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetAssociations() []StakerToOperator {
	if m != nil {
		return m.Associations
	}
	return nil
}

func (m *GenesisState) GetDelegationStates() []DelegationStates {
	if m != nil {
		return m.DelegationStates
	}
	return nil
}

func (m *GenesisState) GetStakersByOperator() []StakersByOperator {
	if m != nil {
		return m.StakersByOperator
	}
	return nil
}

func (m *GenesisState) GetUndelegations() []UndelegationRecordWithHoldCount {
	if m != nil {
		return m.Undelegations
	}
	return nil
}

func (m *GenesisState) GetUndelegationId() uint64 {
	if m != nil {
		return m.UndelegationId
	}
	return 0
}

// UndelegationRecordWithHoldCount includes the undelegation record and the
// hold count, which is used to construct the genesis state
type UndelegationRecordWithHoldCount struct {
	// undelegation is the single undelegation record
	Undelegation *UndelegationRecord `protobuf:"bytes,1,opt,name=undelegation,proto3" json:"undelegation,omitempty"`
	// hold_count represents the number of holds on this undelegation
	HoldCount uint64 `protobuf:"varint,2,opt,name=hold_count,json=holdCount,proto3" json:"hold_count,omitempty"`
}

func (m *UndelegationRecordWithHoldCount) Reset()         { *m = UndelegationRecordWithHoldCount{} }
func (m *UndelegationRecordWithHoldCount) String() string { return proto.CompactTextString(m) }
func (*UndelegationRecordWithHoldCount) ProtoMessage()    {}
func (*UndelegationRecordWithHoldCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26dd0d733927603, []int{1}
}
func (m *UndelegationRecordWithHoldCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UndelegationRecordWithHoldCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UndelegationRecordWithHoldCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UndelegationRecordWithHoldCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UndelegationRecordWithHoldCount.Merge(m, src)
}
func (m *UndelegationRecordWithHoldCount) XXX_Size() int {
	return m.Size()
}
func (m *UndelegationRecordWithHoldCount) XXX_DiscardUnknown() {
	xxx_messageInfo_UndelegationRecordWithHoldCount.DiscardUnknown(m)
}

var xxx_messageInfo_UndelegationRecordWithHoldCount proto.InternalMessageInfo

func (m *UndelegationRecordWithHoldCount) GetUndelegation() *UndelegationRecord {
	if m != nil {
		return m.Undelegation
	}
	return nil
}

func (m *UndelegationRecordWithHoldCount) GetHoldCount() uint64 {
	if m != nil {
		return m.HoldCount
	}
	return 0
}

// DelegationStates is a helper struct for the delegation state
// used to construct the genesis state
type DelegationStates struct {
	// key is used for storing the delegation states,
	// which is a combination of the staker ID, asset ID, and operator address.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// states is the value of undelegation state for the above key
	States DelegationAmounts `protobuf:"bytes,2,opt,name=states,proto3" json:"states"`
}

func (m *DelegationStates) Reset()         { *m = DelegationStates{} }
func (m *DelegationStates) String() string { return proto.CompactTextString(m) }
func (*DelegationStates) ProtoMessage()    {}
func (*DelegationStates) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26dd0d733927603, []int{2}
}
func (m *DelegationStates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationStates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationStates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationStates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationStates.Merge(m, src)
}
func (m *DelegationStates) XXX_Size() int {
	return m.Size()
}
func (m *DelegationStates) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationStates.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationStates proto.InternalMessageInfo

func (m *DelegationStates) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DelegationStates) GetStates() DelegationAmounts {
	if m != nil {
		return m.States
	}
	return DelegationAmounts{}
}

// StakersByOperator is a helper struct for an operator's staker list
// used to construct the genesis state
type StakersByOperator struct {
	// key is used for storing the staker list,
	// which is a combination of the operator address and the asset ID.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// stakers is the stakers list for the above key
	Stakers []string `protobuf:"bytes,2,rep,name=stakers,proto3" json:"stakers,omitempty"`
}

func (m *StakersByOperator) Reset()         { *m = StakersByOperator{} }
func (m *StakersByOperator) String() string { return proto.CompactTextString(m) }
func (*StakersByOperator) ProtoMessage()    {}
func (*StakersByOperator) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26dd0d733927603, []int{3}
}
func (m *StakersByOperator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakersByOperator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakersByOperator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakersByOperator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakersByOperator.Merge(m, src)
}
func (m *StakersByOperator) XXX_Size() int {
	return m.Size()
}
func (m *StakersByOperator) XXX_DiscardUnknown() {
	xxx_messageInfo_StakersByOperator.DiscardUnknown(m)
}

var xxx_messageInfo_StakersByOperator proto.InternalMessageInfo

func (m *StakersByOperator) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *StakersByOperator) GetStakers() []string {
	if m != nil {
		return m.Stakers
	}
	return nil
}

// DelegationsByStaker is a list of delegations for a single staker.
type DelegationsByStaker struct {
	// staker_id is the staker's account address + _ + l0 chain id (hex).â€œ
	StakerID string `protobuf:"bytes,1,opt,name=staker_id,json=stakerId,proto3" json:"staker_id,omitempty"`
	// delegations is the list of delegations for the staker, indexed by the
	// asset_id.
	Delegations []DelegatedSingleAssetInfo `protobuf:"bytes,2,rep,name=delegations,proto3" json:"delegations"`
}

func (m *DelegationsByStaker) Reset()         { *m = DelegationsByStaker{} }
func (m *DelegationsByStaker) String() string { return proto.CompactTextString(m) }
func (*DelegationsByStaker) ProtoMessage()    {}
func (*DelegationsByStaker) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26dd0d733927603, []int{4}
}
func (m *DelegationsByStaker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationsByStaker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationsByStaker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationsByStaker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationsByStaker.Merge(m, src)
}
func (m *DelegationsByStaker) XXX_Size() int {
	return m.Size()
}
func (m *DelegationsByStaker) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationsByStaker.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationsByStaker proto.InternalMessageInfo

func (m *DelegationsByStaker) GetStakerID() string {
	if m != nil {
		return m.StakerID
	}
	return ""
}

func (m *DelegationsByStaker) GetDelegations() []DelegatedSingleAssetInfo {
	if m != nil {
		return m.Delegations
	}
	return nil
}

// StakerToOperator is the association between a staker and an operator.
type StakerToOperator struct {
	// staker_id is the staker's account address + _ + l0 chain id (hex).
	StakerID string `protobuf:"bytes,1,opt,name=staker_id,json=stakerId,proto3" json:"staker_id,omitempty"`
	// operator is the bech32 address of the operator.
	Operator string `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
}

func (m *StakerToOperator) Reset()         { *m = StakerToOperator{} }
func (m *StakerToOperator) String() string { return proto.CompactTextString(m) }
func (*StakerToOperator) ProtoMessage()    {}
func (*StakerToOperator) Descriptor() ([]byte, []int) {
	return fileDescriptor_c26dd0d733927603, []int{5}
}
func (m *StakerToOperator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakerToOperator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakerToOperator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakerToOperator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakerToOperator.Merge(m, src)
}
func (m *StakerToOperator) XXX_Size() int {
	return m.Size()
}
func (m *StakerToOperator) XXX_DiscardUnknown() {
	xxx_messageInfo_StakerToOperator.DiscardUnknown(m)
}

var xxx_messageInfo_StakerToOperator proto.InternalMessageInfo

func (m *StakerToOperator) GetStakerID() string {
	if m != nil {
		return m.StakerID
	}
	return ""
}

func (m *StakerToOperator) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "exocore.delegation.v1.GenesisState")
	proto.RegisterType((*UndelegationRecordWithHoldCount)(nil), "exocore.delegation.v1.UndelegationRecordWithHoldCount")
	proto.RegisterType((*DelegationStates)(nil), "exocore.delegation.v1.DelegationStates")
	proto.RegisterType((*StakersByOperator)(nil), "exocore.delegation.v1.StakersByOperator")
	proto.RegisterType((*DelegationsByStaker)(nil), "exocore.delegation.v1.DelegationsByStaker")
	proto.RegisterType((*StakerToOperator)(nil), "exocore.delegation.v1.StakerToOperator")
}

func init() {
	proto.RegisterFile("exocore/delegation/v1/genesis.proto", fileDescriptor_c26dd0d733927603)
}

var fileDescriptor_c26dd0d733927603 = []byte{
	// 541 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x4f, 0x73, 0xd2, 0x4e,
	0x18, 0xc7, 0x59, 0xe0, 0xd7, 0x1f, 0x3c, 0xa0, 0xc2, 0x56, 0x67, 0x32, 0xcc, 0x18, 0x30, 0x1e,
	0x4a, 0x2f, 0xc9, 0xb4, 0x3a, 0xde, 0x8b, 0xad, 0xca, 0xc1, 0x3a, 0x06, 0x9d, 0x8e, 0x3d, 0x98,
	0x09, 0xc9, 0x1a, 0x32, 0xa4, 0x59, 0xcc, 0x2e, 0x95, 0xbc, 0x0a, 0xbd, 0xfa, 0x16, 0x7c, 0x25,
	0x3d, 0xf6, 0xe8, 0xa9, 0xe3, 0xc0, 0x1b, 0x71, 0xb2, 0x09, 0x24, 0x44, 0x44, 0xbd, 0x6d, 0x9e,
	0x3f, 0x9f, 0xe7, 0xbb, 0xf9, 0xee, 0x2e, 0x3c, 0x24, 0x33, 0x6a, 0xd1, 0x80, 0x68, 0x36, 0xf1,
	0x88, 0x63, 0x72, 0x97, 0xfa, 0xda, 0xe5, 0x81, 0xe6, 0x10, 0x9f, 0x30, 0x97, 0xa9, 0x93, 0x80,
	0x72, 0x8a, 0xef, 0x25, 0x45, 0x6a, 0x5a, 0xa4, 0x5e, 0x1e, 0xb4, 0x1e, 0x6c, 0xee, 0xfd, 0x38,
	0x25, 0x41, 0x18, 0x77, 0xb6, 0xe4, 0xcd, 0x25, 0x7c, 0x96, 0xe4, 0xef, 0x3a, 0xd4, 0xa1, 0x62,
	0xa9, 0x45, 0xab, 0x38, 0xaa, 0x7c, 0x2b, 0x41, 0xfd, 0x79, 0xac, 0x60, 0xc0, 0x4d, 0x4e, 0xf0,
	0x6b, 0xa8, 0x9b, 0x8c, 0x51, 0xcb, 0x15, 0x04, 0x26, 0xa1, 0x4e, 0xa9, 0x5b, 0x3b, 0xdc, 0x53,
	0x37, 0xea, 0x52, 0x07, 0xdc, 0x1c, 0x93, 0xe0, 0x0d, 0x7d, 0x35, 0x21, 0x81, 0xc9, 0x69, 0xd0,
	0x2b, 0x5f, 0xdd, 0xb4, 0x0b, 0xfa, 0x1a, 0x02, 0x9f, 0x43, 0x33, 0xed, 0x32, 0x58, 0x34, 0x86,
	0x49, 0xc5, 0xad, 0xdc, 0xe3, 0xd5, 0x97, 0x50, 0xc5, 0x12, 0x6e, 0xc3, 0xce, 0xc5, 0xf1, 0x7b,
	0xd8, 0x65, 0x42, 0x03, 0x33, 0x86, 0xa1, 0x41, 0x13, 0x19, 0x52, 0x49, 0xd0, 0xbb, 0x5b, 0x55,
	0xb3, 0x5e, 0x98, 0x93, 0xdd, 0x64, 0xf9, 0x04, 0x1e, 0xc2, 0xad, 0xa9, 0x9f, 0x76, 0x33, 0xa9,
	0x2c, 0xc8, 0x4f, 0x7e, 0x43, 0x7e, 0x9b, 0xa9, 0xd5, 0x89, 0x45, 0x03, 0xfb, 0xcc, 0xe5, 0xa3,
	0x17, 0xd4, 0xb3, 0x9f, 0xd2, 0xa9, 0xcf, 0x93, 0x39, 0xeb, 0x48, 0xbc, 0x07, 0x77, 0xb2, 0x01,
	0xc3, 0xb5, 0xa5, 0xff, 0x3a, 0xa8, 0x5b, 0xd6, 0x6f, 0x67, 0xc3, 0x7d, 0x5b, 0xf9, 0x8c, 0xa0,
	0xfd, 0x87, 0x09, 0xf8, 0x25, 0xd4, 0xb3, 0x5d, 0x12, 0xea, 0xa0, 0x6e, 0xed, 0x70, 0xff, 0xaf,
	0xf5, 0xea, 0x6b, 0xed, 0xf8, 0x3e, 0xc0, 0x88, 0x7a, 0xb6, 0x61, 0x45, 0x70, 0xa9, 0x28, 0x64,
	0x55, 0x47, 0xcb, 0x69, 0x8a, 0x07, 0x8d, 0xbc, 0x55, 0xb8, 0x01, 0xa5, 0x31, 0x09, 0xc5, 0xe0,
	0xaa, 0x1e, 0x2d, 0xf1, 0x33, 0xd8, 0x59, 0xb9, 0x8e, 0xb6, 0xf8, 0x92, 0xa2, 0x8e, 0x2e, 0x22,
	0xfc, 0xd2, 0xf6, 0xa4, 0x5b, 0x39, 0x81, 0xe6, 0x2f, 0xd6, 0x6d, 0x18, 0x27, 0xc3, 0xff, 0x89,
	0x91, 0xe2, 0x94, 0x55, 0x13, 0xca, 0x32, 0xa8, 0x7c, 0x45, 0xb0, 0x9b, 0x8e, 0x62, 0xbd, 0x30,
	0x86, 0xe2, 0x7d, 0xa8, 0xc6, 0x25, 0x91, 0x03, 0x82, 0xd7, 0xab, 0xcf, 0x6f, 0xda, 0x95, 0x38,
	0xdd, 0x3f, 0xd6, 0x2b, 0x71, 0xba, 0x6f, 0xe3, 0x33, 0xa8, 0x65, 0x0f, 0x45, 0x7c, 0x98, 0xb5,
	0xed, 0xdb, 0x22, 0xf6, 0xc0, 0xf5, 0x1d, 0x8f, 0x1c, 0x31, 0x46, 0x78, 0xdf, 0xff, 0x40, 0x13,
	0x5d, 0x59, 0x92, 0xf2, 0x0e, 0x1a, 0xf9, 0x3b, 0xf5, 0x2f, 0xba, 0x5a, 0x50, 0x59, 0xdd, 0x81,
	0xa2, 0xf8, 0x23, 0xab, 0xef, 0xde, 0xe9, 0xd5, 0x5c, 0x46, 0xd7, 0x73, 0x19, 0xfd, 0x98, 0xcb,
	0xe8, 0xcb, 0x42, 0x2e, 0x5c, 0x2f, 0xe4, 0xc2, 0xf7, 0x85, 0x5c, 0x38, 0x7f, 0xec, 0xb8, 0x7c,
	0x34, 0x1d, 0xaa, 0x16, 0xbd, 0xd0, 0x4e, 0xe2, 0x2d, 0x9c, 0x12, 0xfe, 0x89, 0x06, 0x63, 0x6d,
	0xf9, 0xa8, 0xcc, 0xb2, 0xcf, 0x0a, 0x0f, 0x27, 0x84, 0x0d, 0x77, 0xc4, 0x0b, 0xf2, 0xe8, 0x67,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x8e, 0x97, 0xf9, 0x42, 0xd8, 0x04, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UndelegationId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.UndelegationId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Undelegations) > 0 {
		for iNdEx := len(m.Undelegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Undelegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.StakersByOperator) > 0 {
		for iNdEx := len(m.StakersByOperator) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StakersByOperator[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DelegationStates) > 0 {
		for iNdEx := len(m.DelegationStates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegationStates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Associations) > 0 {
		for iNdEx := len(m.Associations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Associations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UndelegationRecordWithHoldCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UndelegationRecordWithHoldCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UndelegationRecordWithHoldCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HoldCount != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.HoldCount))
		i--
		dAtA[i] = 0x10
	}
	if m.Undelegation != nil {
		{
			size, err := m.Undelegation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegationStates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationStates) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationStates) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.States.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StakersByOperator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakersByOperator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakersByOperator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stakers) > 0 {
		for iNdEx := len(m.Stakers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Stakers[iNdEx])
			copy(dAtA[i:], m.Stakers[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.Stakers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegationsByStaker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationsByStaker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationsByStaker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Delegations) > 0 {
		for iNdEx := len(m.Delegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Delegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.StakerID) > 0 {
		i -= len(m.StakerID)
		copy(dAtA[i:], m.StakerID)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.StakerID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StakerToOperator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakerToOperator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakerToOperator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StakerID) > 0 {
		i -= len(m.StakerID)
		copy(dAtA[i:], m.StakerID)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.StakerID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Associations) > 0 {
		for _, e := range m.Associations {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.DelegationStates) > 0 {
		for _, e := range m.DelegationStates {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.StakersByOperator) > 0 {
		for _, e := range m.StakersByOperator {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Undelegations) > 0 {
		for _, e := range m.Undelegations {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.UndelegationId != 0 {
		n += 1 + sovGenesis(uint64(m.UndelegationId))
	}
	return n
}

func (m *UndelegationRecordWithHoldCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Undelegation != nil {
		l = m.Undelegation.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.HoldCount != 0 {
		n += 1 + sovGenesis(uint64(m.HoldCount))
	}
	return n
}

func (m *DelegationStates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.States.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *StakersByOperator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.Stakers) > 0 {
		for _, s := range m.Stakers {
			l = len(s)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *DelegationsByStaker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakerID)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.Delegations) > 0 {
		for _, e := range m.Delegations {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *StakerToOperator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StakerID)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Associations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Associations = append(m.Associations, StakerToOperator{})
			if err := m.Associations[len(m.Associations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationStates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationStates = append(m.DelegationStates, DelegationStates{})
			if err := m.DelegationStates[len(m.DelegationStates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakersByOperator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakersByOperator = append(m.StakersByOperator, StakersByOperator{})
			if err := m.StakersByOperator[len(m.StakersByOperator)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Undelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Undelegations = append(m.Undelegations, UndelegationRecordWithHoldCount{})
			if err := m.Undelegations[len(m.Undelegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UndelegationId", wireType)
			}
			m.UndelegationId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UndelegationId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UndelegationRecordWithHoldCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UndelegationRecordWithHoldCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UndelegationRecordWithHoldCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Undelegation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Undelegation == nil {
				m.Undelegation = &UndelegationRecord{}
			}
			if err := m.Undelegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoldCount", wireType)
			}
			m.HoldCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HoldCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationStates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationStates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationStates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field States", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.States.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakersByOperator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakersByOperator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakersByOperator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stakers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stakers = append(m.Stakers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationsByStaker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationsByStaker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationsByStaker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegations = append(m.Delegations, DelegatedSingleAssetInfo{})
			if err := m.Delegations[len(m.Delegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakerToOperator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakerToOperator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakerToOperator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
